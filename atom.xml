<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawell的博客</title>
  <subtitle>我不是一个简单的少年~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dawell.github.io/"/>
  <updated>2018-10-16T11:16:08.090Z</updated>
  <id>https://dawell.github.io/</id>
  
  <author>
    <name>Dawell</name>
    <email>355398356@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日本旅游</title>
    <link href="https://dawell.github.io/2018/09/22/%E6%97%A5%E6%9C%AC%E6%97%85%E6%B8%B8/"/>
    <id>https://dawell.github.io/2018/09/22/日本旅游/</id>
    <published>2018-09-22T06:09:00.000Z</published>
    <updated>2018-10-16T11:16:08.090Z</updated>
    
    <content type="html"><![CDATA[<p>8月31日，终于踏上去日本的旅程了，在去往机场的路上，有些小兴奋~<br>小时候喜欢看动漫，喜欢玩游戏，所以冲着对二次元的爱好一直想着也该去一次日本吧，再加上大家都说日本适合旅游，就更加想去了<br>其实在12年左右因为公司支持原因有几次去日本的机会，不过当时各种阴差阳错都错过了，这次终于可以去成了，也算是满足一个小的愿望…</p>
<p><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa3jw87n0j22bc3341kz.jpg" alt="启程"></p>
<h3 id="计划不如变化"><a href="#计划不如变化" class="headerlink" title="计划不如变化"></a>计划不如变化</h3><p>这次是与同事公司outing的形式出来玩的，10人成团，虽然是同事，不过大部分人是其他团队的都不大熟，主要是与我们产品结伴而行<br>整体上这次去日本的计划是这样的：杭州，大阪，奈良，京都*2，大阪，杭州，一共玩4天左右，不过最后1天来了个刺激的台风打乱了返程计划，最终变成7天=。=<br>最后增加的3天，基本没怎么玩，把大阪剩余的地方逛了逛，冈山路过回家心切没怎么玩就去机场了<br>体验可以说是比较完整了，半深度游，有世界文化遗产、古城、寺庙、山林、市场与台风，吃吃吃，买买买，逛逛逛，前期略赶，后期略闲</p>
<h3 id="衣服"><a href="#衣服" class="headerlink" title="衣服"></a>衣服</h3><p>虽然日本的酒店里都配有烘干机，不过也只适合洗洗小件的内衣袜子之类的，旅行大件衣服只能拿到专门的洗衣房去洗，有的旅馆配备就比较方便<br>大部分情况都是一天玩完都累得要死，回去只想洗澡睡觉了<br>所以多带了几套换洗衣服备用，虽然天气刚好，不过为了以防万一备用了眼罩与一件外套，这次露宿机场就用上了，真是亏了这次准备的齐全，不过我的行李箱一半都是衣服<br>路上会碰到穿和服的妹子，这个也就是拍拍照吧，自己带妹子可以穿上拍拍照</p>
<h3 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h3><p>日本有很多的便利店，全家最多，其次罗森、7eleven，我才知道全家是日本的，还以为是北上广发展的呢，便利店买点早餐，水，奶之类的还是方便的<br>不过来了日本当然是吃这里的特色了，不去便利店吃午餐与晚餐，日本的特色饮食基本上就是拉面、盖饭、烧烤、寿司、海鲜之类的，这几天吃了个遍<br>天天下馆子，一顿饭的价格一般不低于1000日元，也就是60-100元的样子，日本的街上很少像国内还能消费到特别便宜饮食，基本想便宜吃的就只能去便利店吃了<br>不管是面还是饭还是肉，反正日本的饮食几乎没有菜没有水果，毕竟成本高，所以低端的饭就是主食+酱料or配料，而高端点的就+各种炸烤腌的肉，虽然好吃，但是不太健康<br>日本的饭上面上一般都会有半熟的鸡蛋，日文”温玉”，鸡蛋感觉在各种美食中都不可缺少。饮食注重颜色搭配，绿色主要靠葱花装饰，而且注重酱料与汤汁，酱料丰富，而汤汁浓郁算是对日本饮食的印象吧</p>
<p>发现日本的生鲜文化，各种生吃的食物确实新鲜，不过我还不能适应，螃蟹、鱼肉倒是让我想起了国内的盒马鲜生这类产品，不过国内不仅是吃的新鲜还是做熟了吃的，想吃鲜还是熟的比较好</p>
<p>随便发点吃过的照片<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9ic876nj23342bc4qs.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9kqw15rj23342bce83.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9l6yznlj23342bc7wk.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9li56cxj22bc334x6r.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9lusckwj23342bc4qs.jpg" alt=""></p>
<h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>酒店价格时高时低，一般2个人订酒店可以订到400-1000之间的酒店，台风那天涨到850，之前差不多是650，而后面找酒店找到550的，而同事订的还有450的，都还不错，所以完全看能否找到便宜的酒店，平摊下来一个人300左右还不贵<br>这个价格预定的酒店不带水，早上也不含早餐，所以一般自己便利店解决更划算点<br>除了预定酒店，一个人可以住胶囊公寓，听同事反馈也很独特的体验，还可以使用资生堂全套化妆品，一个人也是300元左右<br>还有就是民宿的方式，民宿就便宜很多了，有的一晚上才100多元，不过很多没有空调或者独立卧室，与其他人一起住，同事住的有的被蚊子咬，不过可以体验传统榻榻米与日本住宅风格，独特的体验，一般用爱彼迎订</p>
<p>除了周六周日酒店的价格都还好</p>
<h3 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h3><p>这次日本体验的交通挺全的，飞机场、火车、大巴、地铁、新干线、公交，就没有体验打的与坐船了</p>
<p>日本的交通很发达，地上铁很多，地铁也很复杂，去哪里都方便，跨城市可以做新干线，有300km/h的速度，关西的IC卡实在是方便，基本地上铁与地铁一卡通，而且多家铁路公司都是可以消费的<br>JR是日本的国铁，修建的铁路最多，其他公司也修建了很多铁路，所以有时候一个地方有多个重名的站点，不过会带着前缀标识不同的铁路公司，比如可以看看6个难波地铁站的介绍</p>
<p>大阪有2个机场，不过只有关西机场是国际机场，另一个只有国内航班，隔壁的神户也只有一个国内航班，所以关西机场挂了后，我们这次只能去较远的左冈山，或者右名古屋机场是最近的机场了<br>刚从关西机场下来后还要做个铁路到城市感觉还挺新颖的，不过台风导致船闯了连接桥就发现这样设计挺愚蠢的，在软件架构里这就是单点故障呀，至少修建2条连接桥backup下还差不多<br>飞机日本全日空是不错的，春秋航班也可以，不过这次台风来了，春秋的提早取消给安排了其他航班，而我们最后取消安排的很晚，比我们更加幸运一些</p>
<p>在车站买大巴票时最好用自动售票机买，以后可以退掉，而窗口买的是无法退票的，大巴的行李有专人安排并放到车上从车拿下，服务态度挺好的</p>
<p><img src="http://ww1.sinaimg.cn/mw690/712a7015gy1fwa3nvmgr9j23342bc4qr.jpg" alt="IC卡"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>支付：之前去过泰国，本以为日本也是支付宝微信的天下，其实日本大多还是用现金支付，信用卡也支持比较多，而支付宝微信只有不多的几家支持。不过自动化程度也挺高的，自动投币找零的机器到处都是，如拉面馆、章鱼小丸子的小摊、车站，基本都是大家自己投币找零，虽然不支持支付宝微信，但是也是比较高效方便的，就是口袋里一大堆硬币<br>记账：使用了挖财记账软件，记录日币消费发现是人民币符号，后来才知道日元与人民币的符号确实是一样的都是￥，所以不是软件的bug<br>网络：可以随身wifi携带，不过并不方便，如果开漫游很贵，我用的小米手机有全球上网服务，会虚拟一张本地卡，可以选择使用天数占用一个卡位，还是不错的一天12块钱还有优惠，网速不错，而且可以上youtube之类的网站</p>
<h3 id="日本特点"><a href="#日本特点" class="headerlink" title="日本特点"></a>日本特点</h3><p>化妆：女性的腮红很夸张，不管好看不好看的都化妆<br>雨伞：用的都是透明长伞，并非折叠伞<br>出租车：出租车的司机大多是老头，难道是为了解决老龄化问题？而车子都是黑色统一样子，感觉非常绅士讲究<br>车辆：大多是日本国产车，丰田，雷克萨斯，德系车不多，偶尔看到奔驰车。日本的车都很干净，尤其是夜景各个都反光，可能空气与城市都干净的原因<br>信仰：日本人同时信仰2种神：一个是佛教，中国传进来的，一个是日本自己的神名，所以可以看到很多祭拜的地方一种是佛教的寺庙，一般都有金色灰色，一种就是门口有鸟居的寺堂，一般都是红白色</p>
<h3 id="回忆经历"><a href="#回忆经历" class="headerlink" title="回忆经历"></a>回忆经历</h3><h4 id="第一天路线-奈良：小鹿公园、东大寺、春日大社、JR站门口的商业街、道顿崛、心斋桥"><a href="#第一天路线-奈良：小鹿公园、东大寺、春日大社、JR站门口的商业街、道顿崛、心斋桥" class="headerlink" title="第一天路线-奈良：小鹿公园、东大寺、春日大社、JR站门口的商业街、道顿崛、心斋桥"></a>第一天路线-奈良：小鹿公园、东大寺、春日大社、JR站门口的商业街、道顿崛、心斋桥</h4><p>一大早做JR环装倒车奈良高铁过去，路上就碰到了各种鹿，然后经过博物馆走向东大寺，旁边有卖150日元的喂鹿的饼干，鹿会盯着你的袋子，不给食物会咬你撞你跟着你，尤其是东大寺前面那群，带着角的还挺害怕的，不带角的可以调戏调戏，鹿跟你点头意思就是要吃的，还是挺可爱的<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa3yiksdrj23342bc4qx.jpg" alt="小鹿" title="小鹿"></p>
<p>东大寺确实够大，是我见过最大的佛像，而且寺庙建筑更大，还是非常震撼的，旁边还有一些小点的寺庙，不过里面也是收费的就没去看<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa3zaunx2j23342bce84.jpg" alt="东大寺" title="东大寺"></p>
<p>春日大社是日本的神教，里面有32个祠堂可以祭拜，每个神保佑的东西不一样，红白对比度很高很艳丽，是挺适合拍照的<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa3vyr8yhj23342bckjq.jpg" alt="去春日大社路上" title="去春日大社路上"></p>
<p>意外：春日大社那边走到导数第二个祠堂时突然从天上掉下来了一大段树干，我倒是没事，不过我同事受伤了，划破了头皮，后来被送到医院缝了3针然后管理人给了全额赔付，这个体检就不展开了，只能提醒大家要注意安全，而且记得买保险<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa408wjzkj23342bcb2e.jpg" alt="意外" title="意外"></p>
<p>总体上奈良第一天的体验非常的好，虽然出了一些意外，但是整体感觉就是小清新，而且那天是下雨过后来了大片森林中，感觉格外的好，如果正常进度，大约下午2点来钟就能玩完这3个景点，随后是返程，回JR时路过了商业街吃饭与买东西一把</p>
<p>回到大阪：由于中间的意外，回去正好是晚上了，从难波去了道顿崛，再到心斋桥，基本上这3个连在一起的，就是一路向北大致逛了下，人是超级多，而各种药妆店与购物点也是超级多，不过我对购物欲望不大，主要是看看各种名场景吧<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa43lj6x7j23342bcb2c.jpg" alt="道顿崛" title="道顿崛"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa42yg5bej23342bcb2c.jpg" alt="心斋桥" title="心斋桥"></p>
<h4 id="第二天路线-京都：伏见、三十三间堂、清水寺、三连板二连板、祇园、花见小路、八坂神社、鸭川"><a href="#第二天路线-京都：伏见、三十三间堂、清水寺、三连板二连板、祇园、花见小路、八坂神社、鸭川" class="headerlink" title="第二天路线-京都：伏见、三十三间堂、清水寺、三连板二连板、祇园、花见小路、八坂神社、鸭川"></a>第二天路线-京都：伏见、三十三间堂、清水寺、三连板二连板、祇园、花见小路、八坂神社、鸭川</h4><p>一早我们做上去京都的高速火车出发了，那班火车特别点出了IC卡入站后坐上车后还需要买票，为了能到了就玩我们轻装上阵，行李箱放在了同事那边，第一站是伏见，千本鸟居地，一路爬山，我们按照最远最长路线攀爬体验了一把完整的千本鸟居，分为好几个阶段，整个路程从上山到下山花了一上午时间，在鸟居上阳光下来的一瞬间是特别美的，各种拍照，不过一路都在想做这么多鸟居要砍多少木头呀…<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4qqrpt8j23342bckjn.jpg" alt="伏见" title="伏见"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9mquj1sj23342bcu12.jpg" alt="祈愿牌" title="祈愿牌"></p>
<p>我们中午在附近吃了顿拉面，然后看了下路过火车的临时拦截与路灯的场景，想到了秒速五厘米与创越时空的少女的动画，甚是感动</p>
<p>然后一路向北，第一站是三十三间堂，里面不允许拍照，光脚丫进，也是比较震撼，一千座佛像，还有千手观音，感觉就和兵马俑一样，数量多而且神圣，前面还站着天龙八部神仙，武器各种不同，火影中阿修罗的原型就是采用这里面的<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4q49z8ej23342bchdv.jpg" alt="三十三间堂外景" title="三十三间堂外景"></p>
<p>再往北一些就到了清水寺，进去逛了一圈，不过最大的地方在装修，拍不到名场景，上面还有个求姻缘的地方，2个石头闭着眼从一个摸到另一个就有姻缘上的好运，让同事搞了一遍，然后一圈后下来了<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4pr5tubj25fw1u3hdz.jpg" alt="清水寺" title="清水寺"></p>
<p>然后又是购物买买买的地方，这里有处抹茶搞点不错买了点，然后三连板二连板路过祇园，走到花见小路商业街，再走到鸭川，刚到鸭川感觉也没什么，不过夜景就很好了，所以晚上再来，我们去了酒店checkin<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4rrbml4j22bc334b2d.jpg" alt="二连板" title="二连板"></p>
<p>酒店整理好去了去了夜景的八坂神社各种拍照，地方不大，这里吃到一家超级棒的拉面馆，然后又去鸭川待了一晚上，有个妹子一直在旁边唱歌，挺好听的，鸭川坐着的大多是小情侣亲亲我我的，看来是个调情的好地方<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4o6e9r8j23342bcnpg.jpg" alt="八坂神社" title="八坂神社"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa4ovu2avj23342bcu0y.jpg" alt="鸭川" title="鸭川"><br>总体上这一天稍微累了点爬山多景点多，但是很满足，而且最终在鸭川听着歌吹着风休息了好久，很舒服，今天把京都我最想去的几个地方玩了</p>
<h4 id="第三天路线-京都：金阁寺、天龙寺、二条城、锦市场、大阪：友都八喜、蓝天大厦空中花园"><a href="#第三天路线-京都：金阁寺、天龙寺、二条城、锦市场、大阪：友都八喜、蓝天大厦空中花园" class="headerlink" title="第三天路线-京都：金阁寺、天龙寺、二条城、锦市场、大阪：友都八喜、蓝天大厦空中花园"></a>第三天路线-京都：金阁寺、天龙寺、二条城、锦市场、大阪：友都八喜、蓝天大厦空中花园</h4><p>一大早我们做公交一路赶到金阁寺，金阁寺的名票特别有意思，一进去就可以找到拍照的最佳位置，同时被金阁寺金灿灿的风景震撼一把，不过再往里走发现就没啥意思了，普通的花花草草<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7g75vbzj23342bcb2d.jpg" alt="金阁寺" title="金阁寺"></p>
<p>紧接着走到了里金阁寺不远的天龙寺，天龙寺听说还是乔布斯特别喜欢的寺庙，当时商业失败郁闷的时候就是来这里修身养性的，然后回苹果搞出了iphone，金龙寺最有名的是枯水庭院设计，大致参观了下，一共15块石头，从哪个方向都只能最多看到14块，比较特别<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7gw445nj23342bc7wm.jpg" alt="天龙寺" title="天龙寺"></p>
<p>中午就在天龙寺里的一家豆腐店吃了，最有名的是豆腐，不过这里最喜欢的还是布局与风景<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7hbbu9mj23342bcx6r.jpg" alt="天龙寺豆腐店" title="天龙寺豆腐店"></p>
<p>吃完公交车去了二条城，二条城是德川家族居住的地方，整个城很大，有各种房间，接待宾客的，卧室，其中一间卧室的墙壁上还绘有西湖名胜，倍感亲切<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7i3zoycj23342bcb2d.jpg" alt="二条城护城河" title="二条城护城河"></p>
<p>二条城出来一路向东，来到著名的锦市场，唯一的感觉是日本的蔬菜水果真心贵，10倍有余</p>
<p>晚上来到酒店附近的大商场友都八喜，从地下一楼逛到顶楼，地下一楼简直是动漫游戏天堂，各种手办模型游戏电影漫画都能在这里买到，东西齐全，发现儿童玩具也是超级多<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7ihptrpj23342bcu0z.jpg" alt="友都八喜" title="友都八喜"></p>
<p>最终在友都八喜顶楼碰到同事们一起吃了著名的铁板烧，国内也看到过这种日本料理店，这次吃个正宗的</p>
<p>吃完饭，也没有回酒店，赶上去附近的蓝天大厦空中花园看看，一路升到最高层，没想到最高层的房顶也可以上去，视野很宽广，在上面静静地看着这座城市结束这一天的行程<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa7ixamugj23342bc7wj.jpg" alt="蓝天大厦顶层" title="蓝天大厦顶层"></p>
<h4 id="第四条路线-大阪：大阪城公园、BIC、道顿崛、吃饭问题"><a href="#第四条路线-大阪：大阪城公园、BIC、道顿崛、吃饭问题" class="headerlink" title="第四条路线-大阪：大阪城公园、BIC、道顿崛、吃饭问题"></a>第四条路线-大阪：大阪城公园、BIC、道顿崛、吃饭问题</h4><p>最后一天的行程，我们就差大阪的名景点了，大早上的我们赶到了大阪城公园，等到9点开放买门票，不过广播公告由于天气影响不开放了，郁闷，只能在公园里逛了下，随后我们就收到了航班取消的通知，领队同事在联系更换航班，于是我们接着玩了下<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa8lom83dj23342bcx6r.jpg" alt="大阪城" title="大阪城"></p>
<p>先是赶到了BIC购物商场，看了看比友都八喜要小点，中途还碰到了代购，与一帮中国人疯狂抢购保温杯</p>
<p>心斋桥又去代购一番，中午在道顿崛吃了回转寿司，进去的时候下大雨，出来的时候就已经是狂风暴雨了，还看到了在说明天气情况电视台的人<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa8mkti91j23342bcqv8.jpg" alt="电视台采访台风" title="电视台采访台风"></p>
<p>发现地铁口都被封了，我们只能走到心斋桥附近的商场里，出口全是狂风，看到了吹倒的大树与马上上乱七八糟的物品，只能困在商场里了，很多店今天也是关门了，不过为了等台风过去还是随便逛了逛，台风小点的时候，出去找到大的地铁站南波站然后直接坐回了家<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa8wopjp0j21hc0u0adt.jpg" alt="台风" title="台风"></p>
<p>回旅馆休息了下，看了会日本的电视节目，不过目前报道的全是台风新闻，路上的时候就听同事说关西国际机场出事了，不过并不以为然，回到酒店发现各大频道都在播放关西机场的情况，竟然真的出问题了，一艘船把关西机场与大陆唯一的连接桥的撞了<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa8xjuedwj23342bcqv6.jpg" alt="电视台" title="电视台"></p>
<p>这时候出来玩的同事群里已经炸了，大家都在讨论机场是否可以修好，我们机票是否可以更换，不过带头的同事说是要等到第二天上午让全日空给更换机场，机场调换的话是免费的，有2个同事比较着急就当天买了名古屋的机票</p>
<p>晚上出去已经没风了，感觉与平日的行人差不多，找了好远才找到一家不错的店解决了温饱问题，晚上续订了酒店，酒店价格因为台风瞬间就涨了300，没办法只能继续订</p>
<h4 id="第五天路线-大阪：商量回去、书店、道顿崛、心斋桥、日本桥动漫街"><a href="#第五天路线-大阪：商量回去、书店、道顿崛、心斋桥、日本桥动漫街" class="headerlink" title="第五天路线-大阪：商量回去、书店、道顿崛、心斋桥、日本桥动漫街"></a>第五天路线-大阪：商量回去、书店、道顿崛、心斋桥、日本桥动漫街</h4><p>早上起来ANA说给安排换机，不过要等很久，我们也按捺不住了，我与我们产品买了从冈山出发的机票，剩余很多城市买了从福冈出发的机票，他们还打算去福冈玩玩</p>
<p>到了下午收到通知，我们产品跟领队被航空公司调整好了，其他人估计要调整到13号，太晚，这样我们就商量分开返回国</p>
<p>晚上预定了心斋桥附近的宾馆，过去落脚后，晚上赶到了日本街二次元天地逛了逛，不过去的有点晚，剩余的几家店看了看，发现日本真的是各种娃娃机，连手办都有，还有就是手办各种贵，因为都是正版货，简单看了看<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa91plks4j23342bckjn.jpg" alt="日本桥animate" title="日本桥animate"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa916du61j23342bcb2c.jpg" alt="日本桥" title="日本桥"></p>
<p>在心斋桥大丸百货又帮家人代购了一把</p>
<h4 id="最终2天-冈山：懒床休息、新干线、桃太郎、上海磁悬浮"><a href="#最终2天-冈山：懒床休息、新干线、桃太郎、上海磁悬浮" class="headerlink" title="最终2天-冈山：懒床休息、新干线、桃太郎、上海磁悬浮"></a>最终2天-冈山：懒床休息、新干线、桃太郎、上海磁悬浮</h4><p>早上与产品告别，我一个人踏上行程，虽然是第二天的才从机场出发，不过担心过程中有什么问题，中午就从大阪赶到冈山去了，这次路上又体验了一把日本的新干线，一路到达冈山</p>
<p>下车第一件事情是导航，不过时间还比较多，还打算去逛下，看到了桃太郎的雕像，这里也有故事，对面虽然是大商场，不过保险起见我先去买了汽车票<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa92yllicj22bc334u10.jpg" alt="桃太郎" title="桃太郎"></p>
<p>买汽车票的时候遇到了一行人买票困难，帮助了下，然后又来了一个会日语的妹子，发现都是因为关西机场原因来到这里，并且订的都是同一趟车</p>
<p>我们都搜了下附近酒店与民宿，价格都超高，于是妹子提议直接去机场过夜，而刚那一行人还行去打听下酒店的情况自己出发了，妹子没网，靠我开的热点，她提议现在就去机场，她会日语感觉方便点，就跟着去了一趟机场</p>
<p>去了一看是个小机场，沟通了一把，说是冈山晚上不允许逗留，要关门，不过好在妹子日语不错，沟通了一把，说是关西机场的难民，于是允许了逗留一晚，随后就看到很多中国人陆陆续续都来到了机场</p>
<p>机场里有个咖啡厅，有充电的地方，也有网，我们就在那边呆了很久，然后在机场里的餐馆饱餐了一顿</p>
<p>晚上本以为要躺在凳子上睡了，不过机场管事的日本人与保安推来了一大车毯子，给我们一人发了一床，然后在机场排队处铺了一些地铺，我看了直接上去帮忙，最终很多人都是在地铺中睡了一觉<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa93uwb18j23342bce83.jpg" alt="冈山机场" title="冈山机场"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa94hi8o0j23342bckjn.jpg" alt="冈山机场" title="冈山机场"></p>
<p>第二天早上我们验过行李，然后登机返回了上海</p>
<p>在上海等行李等了半小时多，吐槽，然后又体验了一把上海浦东机场新干线，可以直达公司附近，速度还不错，轨道比较刺激都是斜着的</p>
<h3 id="购物"><a href="#购物" class="headerlink" title="购物"></a>购物</h3><p>药妆店：超级多，都有中文导购，像是给中国人开的<br>专柜：专柜买的人也很多，不知道为啥，有的比国内都要贵<br>代购的疯狂：路上带着行李箱逛游的几乎都是代购</p>
<h3 id="二次元文化"><a href="#二次元文化" class="headerlink" title="二次元文化"></a>二次元文化</h3><p>游戏机厅真的不少<br>动漫电玩店<br>漫画店</p>
<h3 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h3><p>除了额外花的：帽子、手办、小饰品、化妆品等给自己买的东西外<br>费用的话还是挺省的，如果是原计划应该在7000左右，不过多增加的3天费用增加3000左右，所以最终花了1w左右<br>这7天大头是交通费一共花了4500元，住宿花了2000，吃喝花了1400，购物花了2200，不过有800是帮其他人代购的，自己花了1400，其中1000多都是给同事家人带的吃的<br>最初预定的ANA的机票来回2400，属于比较便宜的特价票了，而住宿4天双人合租平摊1300元，所以住行大头才3700元，整体成本不高，后来台风来了航班取消，机票价格都涨了不少，机票变为2000，多住宿3天（最后一天睡了机场），剩余都是日本国内交通费用了<br>虽然是花了1w，不过因为航班延误是可以保险理赔的，最终赔付了2k，所以算下来整个旅程花了8k左右，真的是很便宜了</p>
<h3 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h3><p>出国旅游保险是很有必要的，一个是在国外受伤或者住院的费用可以报销，还有就是飞机航班延误与取消会进行金额赔付，后者是大概率事件，尤其是日本动不动就地震台风的，所以保险非常必要<br>这次因为台风导致的延期3天的行程所有的住宿与交通费用由于买了报销都可以报销，而且公司人文关怀了下多给了3天outing假期，所以相当于免费多玩了3天，这种意外幸亏也不会产生额外的损失，保险费才几十块非常值<br>同事有的买的小额的20元的保险因为航班取消都赔付了1k元</p>
<p>台风是真的够猛的，当时恰好去过2次的蓝田，对比图如下<br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9zpgu6mj22bc334hdv.jpg" alt="" title="台风前"><br><img src="http://ww1.sinaimg.cn/mw690/712a7015ly1fwa9zekjbgj22bc334x6r.jpg" alt="" title="台风后"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个过程真的是非常难忘，赶上台风，听说北海道又发生了地震，好多关西机场的难民还想去北海道回国，看来他们是最倒霉的一批人了<br>日本多灾多难食物匮乏不适合生活，台风、地震、核辐射、青菜水果贵的要死，容易得胃肠病，怪不得日本的保险业很发达，感觉多灾多难也是一个原因<br>但是适合旅游，倒不是特别喜欢日本的饮食、购物与普通的景点，但是日本很干净，有更多的樱花树，独特的和风体验，二次元天堂，如果不去安排特别满的行程，不去购物，只看下特别的景点，去泡泡温泉慢下来欣赏这个城市也许才是最享受的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8月31日，终于踏上去日本的旅程了，在去往机场的路上，有些小兴奋~&lt;br&gt;小时候喜欢看动漫，喜欢玩游戏，所以冲着对二次元的爱好一直想着也该去一次日本吧，再加上大家都说日本适合旅游，就更加想去了&lt;br&gt;其实在12年左右因为公司支持原因有几次去日本的机会，不过当时各种阴差阳错都
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="旅游" scheme="https://dawell.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="日本" scheme="https://dawell.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>云栖大会2018一日游</title>
    <link href="https://dawell.github.io/2018/09/21/%E4%BA%91%E6%A0%96%E5%A4%A7%E4%BC%9A2018%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
    <id>https://dawell.github.io/2018/09/21/云栖大会2018一日游/</id>
    <published>2018-09-21T08:11:18.000Z</published>
    <updated>2018-10-16T11:15:20.781Z</updated>
    
    <content type="html"><![CDATA[<p>云栖大会是阿里组织的包含了最新的行业动态与技术分享的大会，每年一次，今年是第8次<br>往年真是关注技术分享，都是看在线直播，不过离杭州这么近，为啥不去亲身体验一把呢？于是这次请了一天假过去参加</p>
<p>整个大会持续4天，分为主会场与分会场还有一些音乐节之类的活动，看了下大会行程，只有开发者专场比较感兴趣，所以这次目标明确的想去E会场看看<br>票务有VIP票与普通票，有4天的票也有只参加1天的票，很早就关注的，阿里云还给我发了优惠券，所以买了第二天的早鸟票90多元<br>云栖大会前几天发来短信提示需要用钉钉才能取到票二维码，看来阿里是无处不安利钉钉，钉钉里还需要人脸识别录入</p>
<p>早上与同事打车过去，听说路上会堵，所以7点多就出发了，途径各种隧道到达云溪小镇（途中隧道有2条路径，导航指示往左走，但是有个很大的牌子指示云栖大会向右走，问了司机才知道，往右其实要绕远路，这样做得目的是为了分流，Get！）<br>我们从南门进，进去先到A座大楼前验票，先二维码验票，然后第二道关卡需要验证之前录入的人脸，感觉还是很有科技感的，拿了份大会的地图</p>
<p><img src="http://ww1.sinaimg.cn/large/712a7015ly1fvh96g4zdrj23342bcx6r.jpg" alt="地图"></p>
<p>C座看上去还是挺有艺术感的，楼上是塑胶跑道，还放着一个aliyun的热气球</p>
<p>先在B馆逛了下</p>
<p>待续。。。</p>
<h3 id="赠品"><a href="#赠品" class="headerlink" title="赠品"></a>赠品</h3><p>勋章，冒充的勋章<br>布袋子，塑料袋子，茶叶，鸡蛋，糖，便利贴，笔，悠悠球，玩偶手办，洁屏指，雨伞，鼠标垫，文件夹，烟盒，抹布，饮料，水，贴画</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云栖大会是阿里组织的包含了最新的行业动态与技术分享的大会，每年一次，今年是第8次&lt;br&gt;往年真是关注技术分享，都是看在线直播，不过离杭州这么近，为啥不去亲身体验一把呢？于是这次请了一天假过去参加&lt;/p&gt;
&lt;p&gt;整个大会持续4天，分为主会场与分会场还有一些音乐节之类的活动，看
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dubbo生态</title>
    <link href="https://dawell.github.io/2018/09/01/Dubbo%E7%94%9F%E6%80%81/"/>
    <id>https://dawell.github.io/2018/09/01/Dubbo生态/</id>
    <published>2018-09-01T02:40:32.000Z</published>
    <updated>2018-08-15T03:04:51.484Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo圈子最近也开源了各种产品，公司也主要以dubbo为主的微服务生态建设，而且也是自己从14年使用dubbo也做个总结</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dubbo圈子最近也开源了各种产品，公司也主要以dubbo为主的微服务生态建设，而且也是自己从14年使用dubbo也做个总结&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剑的传说</title>
    <link href="https://dawell.github.io/2018/08/22/%E5%89%91%E7%9A%84%E4%BC%A0%E8%AF%B4/"/>
    <id>https://dawell.github.io/2018/08/22/剑的传说/</id>
    <published>2018-08-22T13:16:05.000Z</published>
    <updated>2018-08-24T09:47:34.641Z</updated>
    
    <content type="html"><![CDATA[<p>总结下各种剑的传说吧，他们的游戏系列，电视剧情况，网游情况，评分与推荐，剧情与特色<br>中国游戏改编的古装剧是很有特色的，基本都与剑有关，拍一部火一部<br>传统单机三剑是：轩辕剑、仙剑、剑侠情缘，不过剑侠情缘感觉后续剧情上不怎么火，也没怎么玩过</p>
<p>这里介绍的有基本有这么几部</p>
<ol>
<li>轩辕剑</li>
<li>仙剑</li>
<li>古剑奇谭</li>
<li>诛仙</li>
</ol>
<h2 id="轩辕剑"><a href="#轩辕剑" class="headerlink" title="轩辕剑"></a>轩辕剑</h2><p>轩辕剑第一部作品诞生在1991年，到现在已经27岁了，国产单机系列三剑之一，由台湾大宇的DOMO工作室研发的RPC单机游戏</p>
<h3 id="作品"><a href="#作品" class="headerlink" title="作品"></a>作品</h3><p>首先回顾下历史朝代顺序：夏、<strong>商</strong>、<strong>西周</strong>、东周、<strong>春秋</strong>、<strong>战国</strong>、<strong>秦</strong>、<strong>汉</strong>、<strong>三国</strong>、<em>晋</em>、南北朝、<em>隋</em>、<strong>唐</strong>、宋、元、明、清<br>黑色的是轩辕剑涉及到的朝代，斜体是稍有交集</p>
<p>单机作品</p>
<ol>
<li>轩辕剑1</li>
<li>轩辕剑2、轩辕剑2外传枫之舞-战国</li>
<li>轩辕剑3云和山的彼端-隋唐朝西方世界、轩辕剑3外传天之痕-隋唐</li>
<li>轩辕剑4黑龙舞兮云飞扬-战国秦朝、轩辕剑4外传苍之涛春秋晋朝秦朝<ol>
<li>苍之涛跟进司马光资治通鉴按时间顺序写的，往前10年，往后10年，时间表，事件。史记不是按时间写的，所以这段还好搞一些</li>
<li>4与外传，一个是霸道，一个是王道，外传讲老百姓的感受</li>
<li>水镜与姬良是那种结婚后的感觉，现在的爱情太过了，山盟海誓什么的，其实婚后才是爱情开始的时候，之前的去掉了</li>
<li>砍头三人组里最后说我们要永远在一起，吐槽天之痕桥段</li>
</ol>
</li>
<li>轩辕剑5一剑凌云山海情-山海界、轩辕剑5外传汉之云-三国、轩辕剑5外传云之遥-三国</li>
<li>轩辕剑6凤凌长空千载云-商周时期、轩辕剑6外传穹之扉-商朝中期</li>
<li>轩辕剑7-汉朝：轩辕剑柒（大写，为了区分网游小写七），虚幻4引擎，期待</li>
<li>轩辕伏魔录</li>
</ol>
<p>轩辕剑壹、轩辕剑貮均时代不明<br>每一部时间顺序：6+商周、2+4+在战国秦朝、7+汉朝、5++三国、3+唐朝</p>
<p>网游作品</p>
<ol>
<li>轩辕剑网游1、2：看过视频，好像一起刷蚩尤还有点意思，应该没啥剧情</li>
<li>轩辕剑7：网游，占用了7的编号 </li>
<li>轩辕剑手游：好像是基于天之痕背景的，不过没啥剧情，就是一个轩辕剑的皮</li>
<li>轩辕剑群魔录：各种日常任务跑来跑去，剧情就是因为某种原因历史混乱了，见到了各代人物</li>
<li>18年-轩辕剑龙舞云山：网易出品，水墨画风，回合制，剧情RPC，良心，不过玩完剧情就卸载了</li>
</ol>
<p>电视剧</p>
<ol>
<li>轩辕剑3小雪，拍的不好看</li>
<li>轩辕剑汉之云：只是看颜值，不过胡晓彤火了</li>
</ol>
<p>电影</p>
<ol>
<li>18年轩辕剑大电影开拍</li>
</ol>
<p>动画</p>
<ol>
<li>苍之耀动画 <a href="http://xuanyuansword.net/index.html" target="_blank" rel="noopener">http://xuanyuansword.net/index.html</a> </li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>轩辕剑最大的特色是把故事埋藏在历史中，符合历史故事不冲突又补全了一些历史，非常讲究<br>世界观方面，轩辕剑设定从始至终一套，而且世界观宏伟，有趣要素很多，想象力丰富<br>而且轩辕剑里的世界观宏大，讲的故事更偏向于针对不同立场的选择造成的历史问题，没有善恶，讲霸道与王道的取舍。不像仙剑系列偏向于一个爱情故事多一些。<br>每一个单机轩辕界中都隐藏了DOMO工作室的地点，DOMO工作室印象挺深的作者：蔡明宏、曾志豪、吴欣叡、鲍弘修等人物</p>
<h4 id="黑科技"><a href="#黑科技" class="headerlink" title="黑科技"></a>黑科技</h4><p>轩辕剑里有十大神器：盘古斧（空间）、东皇钟（造界）、昆仑镜（时间）、轩辕剑（力量）、昊天塔（杀神）、炼妖壶（炼化）、神农鼎（炼药）、伏羲琴（心智）、女娲石（复活）、崆峒印（永生）</p>
<ol>
<li>前4样其实是挺逆天的，可以改变时间空间力量，中间3个算是不同种族的特殊神器，最后3个偏灵魂方面，与漫威宇宙中的5个宝石挺像的</li>
<li>神器还能组合成各种阵法：失却之阵（不同的神器放到中间效果还不一样）、九五之阵等</li>
<li>其实还有一些神器：造物仙鼎、太一轮之类的又属于神器中的神器了，一般见不着</li>
</ol>
<p>其他黑科技</p>
<ol>
<li>天书：壶中仙给辅子彻展示用的小世界</li>
<li>机关术：墨家发明的木头机械装置</li>
<li>黑火：从古蜀国柒发明的黑火与紫水晶</li>
</ol>
<h4 id="世界"><a href="#世界" class="headerlink" title="世界"></a>世界</h4><p>轩辕剑有多个世界，这里只是列举几个常出现的</p>
<ol>
<li>轩辕界（人界）</li>
<li>云中界（融合了桃源界-天书世界-桃源仙境-仙人岛）：壶中仙用东皇钟创建的，想与神州大地融合来着，不过被壶中仙实验黑火时玩坏了大半，后与天书世界融合</li>
<li>天上界：天界，包含伏羲殿，华胥国守护天门，很多仙与华胥国有关系，如伏羲与女娲是华胥子民</li>
<li>昊天界（太一神殿）：昊天帝的地盘，昊天帝又叫东皇太一，太一神殿在这里面维护世间万物生克关系控制世界的规则</li>
<li>山海界：黄帝为了用东皇钟创造的，妖怪出自山海经，有青龙白虎朱雀玄武，不过这些神兽当时都是炎帝的部下，跟天女一样被黄帝丢到山海界中了，兼职是神话异族回收厂呀。只能通过盘古斧进来</li>
<li>壶中界：炼妖壶中的世界，妖怪比较多，也有很多功能区域</li>
</ol>
<p>天山（昆仑仙境）、巫山、云中界都是仙界<br>仙是没有神厉害的，仙是世间万物修炼的最高境界，神是天生神力</p>
<p>网友总结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主体【轩辕界】，黄帝所创【山海界】，山海界正中印天女之地【中央界】，耶和华所在【西方天界】，撒旦所在【西方魔界】，万物轮回的【幽冥地界】，天帝居所【天界】，炼妖壶内【壶中世界】又称【壶中界】，壶中仙所创【云中界】，竹简内的【天书世界】，姬良手中天书发展而来的【桃源界】，云梦泽底【湘君界】，之罘山下【苍龙界】，太一神殿所在【昊天界】，西王母【昆仑界】，赤贯星与白贯星所在的【天上界】，紫雾源头【梵天异界】，【镜界】日向一族的神镜世界。</span><br></pre></td></tr></table></figure></p>
<h4 id="轩辕剑-1"><a href="#轩辕剑-1" class="headerlink" title="轩辕剑"></a>轩辕剑</h4><p>轩辕剑里有很多跨越千年的故事，包含穿越的剧情，形成闭环的小改变还会在原世界发送，生克太一轮重大改变事件会造成平行世界</p>
<ol>
<li>轩辕剑6商周时期姜太公改变过太一轮周克商</li>
<li>轩辕剑4外传苍之涛，太一轮秦晋相克跨越整整一千年。七曜使者的穿越故事在苍之耀动画里会涉及，导致秦朝异常发达的另一个平行世界的故事</li>
<li>轩辕剑6种凤天凌在商朝末期，最终结局时穿越到唐朝见女主，主角在唐朝老死，女主再回到男主活着的时候，然后直到女主死在这个世界，男主再穿越到唐朝形成循环</li>
</ol>
<p>轩辕剑有一些化身，集中在三国时期转世成人，诞生轩辕剑仙</p>
<ol>
<li>轩辕剑5的3部曲里介绍了轩辕剑诞生于黄帝与天女青儿之手，后转世2子朝云与暮云，后分别加入三国时期蜀与魏，最终双子合一回到山海界以暮云身份拯救母亲，在5种自杀，后朝云回到轩辕界与耶亚希在一起</li>
<li>云之遥中暮云小时候被剥离大部分灵魂到狼王身上，变为金狼，后化为人形，一直各种穿越学习王道精神，其中在轩辕剑6的故事中化为白王引领主角，后回到唐朝已经老到在轩3中遇到的轩辕剑仙老头形象</li>
</ol>
<h4 id="重要人物"><a href="#重要人物" class="headerlink" title="重要人物"></a>重要人物</h4><p>古月仙人：古月圣<br>壶中仙：炼妖壶之主<br>柒：古蜀国聪明少年<br>撒旦：路西法，西服世界魔神老大</p>
<p>妖怪有很多神话传说的，如饕餮，蚩尤<br>氐人是炎帝的后代</p>
<h4 id="有个分析帖子"><a href="#有个分析帖子" class="headerlink" title="有个分析帖子"></a>有个分析帖子</h4><ol>
<li>世界分析：<a href="http://www.lkong.net/thread-1896558-1-1.html" target="_blank" rel="noopener">http://www.lkong.net/thread-1896558-1-1.html</a></li>
<li>民间编年史：<a href="https://tieba.baidu.com/p/4331248113?red_tag=2218108712" target="_blank" rel="noopener">https://tieba.baidu.com/p/4331248113?red_tag=2218108712</a></li>
</ol>
<h3 id="仙剑"><a href="#仙剑" class="headerlink" title="仙剑"></a>仙剑</h3><p>仙剑的世界观没有打开，只是一个个独立的爱情故事<br>目前比较喜欢的是仙剑1与仙剑3、仙剑4，特别喜欢仙剑4</p>
<h4 id="作品-1"><a href="#作品-1" class="headerlink" title="作品"></a>作品</h4><ol>
<li>仙剑1 剧情好，不过电视剧垃圾</li>
<li>仙剑2，剧情垃圾</li>
<li>仙剑3、仙剑3外传，剧情好，电视剧胡歌、杨幂火了</li>
<li>仙剑4，剧情好，拍摄中</li>
<li>仙剑5，电视剧仙剑云之凡没火</li>
<li>仙剑6，讲神农，发现最终也有鱼人在鲲里，与轩辕剑氐人族一样设定，七零石的动画是一个特色</li>
<li>仙剑7，19年下半年，虚幻四引擎</li>
</ol>
<h3 id="古剑奇谭"><a href="#古剑奇谭" class="headerlink" title="古剑奇谭"></a>古剑奇谭</h3><p>古剑是从仙剑里因意见不和分裂出的团队，制作的作品也挺良心的，买了第一部玩过</p>
<h4 id="作品-2"><a href="#作品-2" class="headerlink" title="作品"></a>作品</h4><ol>
<li>古剑1，电视剧火了，李易峰，杨幂，霍建华</li>
<li>古剑2，电视剧有了，没火</li>
<li>古剑3，8月20日试玩版游戏刚出来</li>
</ol>
<h3 id="诛仙"><a href="#诛仙" class="headerlink" title="诛仙"></a>诛仙</h3><p>很早在网吧里听说过过的特别火的网游，不过没有玩过，直到后面出了电视剧才了解的剧情</p>
<h4 id="作品-3"><a href="#作品-3" class="headerlink" title="作品"></a>作品</h4><ol>
<li>电视剧青云志，诛仙，那tfboys火了，李易峰，杨紫火了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结下各种剑的传说吧，他们的游戏系列，电视剧情况，网游情况，评分与推荐，剧情与特色&lt;br&gt;中国游戏改编的古装剧是很有特色的，基本都与剑有关，拍一部火一部&lt;br&gt;传统单机三剑是：轩辕剑、仙剑、剑侠情缘，不过剑侠情缘感觉后续剧情上不怎么火，也没怎么玩过&lt;/p&gt;
&lt;p&gt;这里介绍的
    
    </summary>
    
      <category term="娱乐" scheme="https://dawell.github.io/categories/%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="游戏" scheme="https://dawell.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>轩辕剑龙舞云山体验感悟</title>
    <link href="https://dawell.github.io/2018/08/17/%E8%BD%A9%E8%BE%95%E5%89%91%E9%BE%99%E8%88%9E%E4%BA%91%E5%B1%B1%E4%BD%93%E9%AA%8C%E6%84%9F%E6%82%9F/"/>
    <id>https://dawell.github.io/2018/08/17/轩辕剑龙舞云山体验感悟/</id>
    <published>2018-08-17T07:13:32.000Z</published>
    <updated>2018-08-22T07:07:16.878Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有玩游戏了，手游RPC类型的也没有玩过，这次尝试下<br>小时候单机最爱玩的RPC游戏是轩辕剑，最近网易推出了这个IP的手游轩辕剑龙舞云山，听说继承了轩辕剑水墨画风非常唯美<br>正好删档公测申请体验了下，8月23日删档</p>
<p>游戏体验目的</p>
<ol>
<li>一个是想看下轩辕剑有什么新剧情</li>
<li>一个是看看现在的RPC手游都做成什么样子了</li>
<li>如果自己开发一个这样的游戏是否复杂</li>
<li>我玩的到底是什么，是什么让我放弃了这款游戏，游戏的本质是什么？</li>
</ol>
<h2 id="体验过程"><a href="#体验过程" class="headerlink" title="体验过程"></a>体验过程</h2><p>进去后先是取个名字，皇帝姓氏“姬”代表正统与历史，然后偏爱轩辕剑4里的墨家机关术，取一“墨”字，组合为“姬墨”（寂寞），好名~<br>有6个角色可以相当于传统游戏中的角色吧<br>剑士T（龙武军-男）、剑士输出（沧剑盟-男）、法师（琉璃会-女）、奶妈（灵素庄-女）、萨满（天道师-男童）、机械师（隐墨宗-女童）<br><img src="https://images.gitee.com/uploads/images/2018/0821/141357_aa120c5a_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>隐墨宗继承了墨家机关术，是我比较钟爱的门派，不过只能选女号<br><img src="https://images.gitee.com/uploads/images/2018/0821/141529_97086a5a_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>本以为还有捏脸环节，实际只是选个3种发型与3种容貌，衣服也没法换，不过角色还算ok，不Care<br><img src="https://images.gitee.com/uploads/images/2018/0821/141607_8af0197a_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>游戏的功能随着等级提升逐步开放，基本上60级功能就开的差不多了<br>等级提升前期非常快，第一天任务做完就差不多40级了，第二天50级，第三天57级，第四天60级，直到后面一天只能生1级左右，然后我最终玩到了74级就停止了<br>剧情都玩完了，活动基本玩了一遍，副职业都开启了，宠物也都差不多了</p>
<h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>背景设定在天之痕之后的100年唐盛时期<br>整个剧情有主线，围绕着撒旦魔王利用妮可复活假赛特，指挥核心骨干康那里士去收集黑火企图消灭神州大地的部分<br>同时有唐歌主线，体现唐朝表面繁荣，而内部各种政治斗争，贵妃+国舅党、太子+忠臣党、安禄山+西方妖魔党3者的冲突<br>轩辕主线与唐歌主线是有剧情交差的，只是突出的重点不太一样<br>也有各种支线任务，与各种NPC有关系，也有各种护驾的支线剧情任务，介绍各种护驾的历史吧</p>
<p>整体上还挺像单机游戏的风格，而且还接入了类似轩辕剑的DOMO工作室的设计人物与场地，用一口井进去，肥鱼宫，应该是游戏制作工作室的名字吧<br><img src="https://images.gitee.com/uploads/images/2018/0821/143346_9931118a_697510.png" alt="输入图片说明" title="屏幕截图.png"><br><img src="https://images.gitee.com/uploads/images/2018/0821/143830_1447ba3f_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<h3 id="主线剧情"><a href="#主线剧情" class="headerlink" title="主线剧情"></a>主线剧情</h3><p>进去后剧情遇到古月仙人，喝三杯酒，然后穿越到100年前封印天之痕的时候，与小雪、玉儿、靖仇相遇，然后回到现实中与玉儿的转世结缘<br><img src="https://images.gitee.com/uploads/images/2018/0821/141659_1cc0f623_697510.png" alt="输入图片说明" title="屏幕截图.png"><br><img src="https://images.gitee.com/uploads/images/2018/0821/142529_e9c3120c_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>主角还有个特殊身份是神器守护者，只是剧情需要，暂时没什么特殊技能之类的<br><img src="https://images.gitee.com/uploads/images/2018/0821/142714_f08542f0_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>转世的玉儿体内有黑火，康那里士来取黑火，然后被主角救走，主角买了一个天道师山寨的炼妖壶可以收纳万物，将玉儿放入其内，黑火结晶紫水晶也带走一些<br>主角先是带到江湖百晓生唐佑那里打探情报，然后被指引到琉璃会长那里，琉璃会发现紫水晶与琉璃的宝物差不多质地，而且牵起一段回忆，发现副会长也是被琉璃中的妖邪附身与康那里士变为一伙<br>后指引到隐墨宗看病，五长老也牵出一段当时因为利用黑火力量搞机关术失败导致妻儿死亡的回忆，结果康那里士找到了这里，为了迎战康那里士几位长老凑齐了，大长老出现，宇文拓也出现了，众人赶走了康师傅（大长老是个利用宗门技法的童颜美少女，大长老一直迷着宇文拓）<br>妮可复活假赛特不惜一切代价，所以与主角发生几次正面冲突，第一次还与天神李靖交战，后来妮可发现了被魔王利用，而黑火导致各种失魂的人也越来越多<br><img src="https://images.gitee.com/uploads/images/2018/0821/144902_3bd05559_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>安禄山想用魔族给他的黑火反兵皇帝，不过后面还没展开剧情<br>在墨家大长老出现的还是还介绍了一段与宇文拓认识的黑历史，当时宇文拓想要封印天之痕需要上天上界的方法，询问了隐墨宗，宇文拓解释一番，是个火车难题，隐墨宗权衡后提供了万灵血珠的制作方法，宇文拓独立背负罪名这点让大长老就迷上他了<br><img src="https://images.gitee.com/uploads/images/2018/0821/144415_eff8ad1f_697510.png" alt="输入图片说明" title="屏幕截图.png"><br><img src="https://images.gitee.com/uploads/images/2018/0821/144533_0ffb3d03_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>后面剧情就没了…感觉主创们还没做完</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="功能拆分"><a href="#功能拆分" class="headerlink" title="功能拆分"></a>功能拆分</h3><ol>
<li><em>个人+提升、地图、境界（剧情+任务）、设置+拍照、战斗</em></li>
<li><em>物品：装备、行囊、宠物、商城+摆摊</em></li>
<li>（网游加强）副职业：闲趣、行当、书斋</li>
<li>（网游加强）统计：传记（成就）、排行</li>
<li><em>【网游特有】关系与交互：好友、聊天、队伍、帮派</em></li>
<li>【网游特有】活动与扩展：活动、福利</li>
<li>游戏外功能：选择大区与用户，创建用户，公告，用户协议，客服，修复，用户中心账号，二维码扫描</li>
</ol>
<p>如果是做单机，前2个有了，基本上可玩性就有了，接下来就是打磨剧情与任务了<br>如果是做网游，最核心的是第5条，其次是第6条<br>目前看一共有170级吧，不过剧情大约70级就没了，所以应该是个半成品</p>
<h3 id="从最小产品去开发"><a href="#从最小产品去开发" class="headerlink" title="从最小产品去开发"></a>从最小产品去开发</h3><p>首先要有主角（等级、属性）、剧情任务、战斗、地图、设置这5个模块</p>
<ol>
<li>主角具备等级，通过任务引导玩家去战斗，然后提升等级完成更多的任务看到剧情，然后任务+打怪给经验继续提升，任务完成取决于等级，而等级取决于战斗，任务又引导战斗形成闭环</li>
<li>整个RPC的目前是为了完成更多的任务，看到更多的剧情，体验战斗的乐趣，等级本身只是条件。任务与战斗是RPC的核心，升级是手段</li>
<li>人数属性：生命、物理攻击-防御，回合制</li>
</ol>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/141806_5d37558e_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>基于水墨风格的场景设计是好的，画面流畅优雅，看了下其实很多场景是指几个图片增加一些层次做出的并非是3D的，只有人物是3D的，减少了页面元素渲染的成本<br><img src="https://images.gitee.com/uploads/images/2018/0821/142205_23f6c489_697510.png" alt="输入图片说明" title="比如这个井看上去是3D的但是就是一个图片而已"><br><img src="https://images.gitee.com/uploads/images/2018/0821/142317_e0410289_697510.png" alt="输入图片说明" title="这里边缘没控制好，可以看到这个悬崖只是一个图片加一个边缘限制"></p>
<h3 id="围绕人物-任务-战斗3个核心属性，丰富-amp-差异化人物属性、更有趣的战斗体验、添加物品要素提升各种环节"><a href="#围绕人物-任务-战斗3个核心属性，丰富-amp-差异化人物属性、更有趣的战斗体验、添加物品要素提升各种环节" class="headerlink" title="围绕人物+任务+战斗3个核心属性，丰富&amp;差异化人物属性、更有趣的战斗体验、添加物品要素提升各种环节"></a>围绕人物+任务+战斗3个核心属性，丰富&amp;差异化人物属性、更有趣的战斗体验、添加物品要素提升各种环节</h3><p>先将个人属性丰富起来，然后差异化个人属性，然后丰富战斗，然后添加通用设计-物品加强属性、任务、战斗整个环节</p>
<ol>
<li>人数属性增加<ol>
<li>增加法力、控制2个类型输出、增加攻击前、攻击后的各种属性效果，增加速度</li>
<li>生命、法力、控制-控制抵抗（辅助效果）、速度、物理攻击-防御（输出-中）、法术攻击-防御（输出-中）、命中-躲闪（打中-前）、暴击-强化-吸收（打中效果叠加-后）、阴阳属性（加强+追击-后）<br><img src="https://images.gitee.com/uploads/images/2018/0821/142757_06716d38_697510.png" alt="输入图片说明" title="战斗生克关系"></li>
</ol>
</li>
<li>人物属性加持优化<ol>
<li>添加职业</li>
<li>装备，装备打造+强化属性+随机属性的炼化</li>
<li>战斗模式切换（群攻、单攻）</li>
<li>添加属性加点，奇异果实提升，补天宝石，天数灵修加属性</li>
</ol>
</li>
<li>法力+控制的战斗优化<ol>
<li>增加技能，添加技能书，技能升级加点</li>
</ol>
</li>
<li>物品分为药品+功能道具、任务、装备，这些东西有些是可以进行交易的（过一会再讲交易），有些则不可只能丢弃<ol>
<li>装备，每个部位的，头饰、衣服、腰带、武器、鞋子、项链、戒指、玉佩、通宝1，通宝2</li>
<li>特殊武器-宠物系统可以丰富（宠物的等级、属性、技能，不需要装备），不过有天资（有上限，耐力、力量、灵性、智慧、敏捷、成长率），增长不同的属性，玩家可以洗练天赋+突破提升阶级+提升属性（氪金材料）</li>
<li>除了物品，还有金币，铜币等金钱的奖励</li>
<li>物品的话可以通过官方商城买卖，不过像模式这种都是用户自己在拍卖行里操作，没有上帝颁发东西，不需要氪金，更加公平</li>
<li>物品位不够了需要放到仓库，仓库可以分几个，多的需要额外收费</li>
</ol>
</li>
</ol>
<p>可以看出人物差异通过人物属性加持自己配置的，需要方法论固定提升，而宠物则避免复杂采用一个随机的天资控制，有一些随机性，生成需要炼妖系统合成<br>技能是基于属性发挥的效果，宠物的技能需要收集配置通用，而角色职业是固定的，其实也可以差异化加点激活，类似魔兽不过复杂一些<br>技能还能让战斗更加华丽，不过大家在升级时一直用华丽技能也腻了，所以现在回合制都开发了自动战斗的模式，而开放式战斗自己控制更有意思些</p>
<p>最终除了核心3要素，又增加了物品这一要素丰富了玩法成为4要素</p>
<ol>
<li>人物通过物品加持更改，消费物品</li>
<li>任务不止奖励经验，还奖励金币+物品，生产消费物品，不过更偏向于生产</li>
<li>战斗也可以消耗金币与物品，除了经验，也可以奖励金币与物品，生产消费物品，不过更偏向于生产</li>
</ol>
<p>排列组合</p>
<ol>
<li>前2个形成供需关系（任务完成奖励提升能力）</li>
<li>后2个也可以形成供需（战斗生产完成任务物品消耗，战斗消耗品只能任务领取发放）</li>
<li>而头尾2个也可以形成供需（战斗胜利品提升能力）</li>
<li>中自己形成供需（上个任务的奖励是下个任务的消费）</li>
<li>尾自己形成供需（上个战斗的奖励是下个战斗的消耗品）</li>
</ol>
<p>通过形成的这6种组合组成了更加丰富的任务、提升方式、战斗方式</p>
<h4 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h4><p>回合制在个人战斗是携带5个宠物，而团战时满员只携带第一只宠物<br>回合制只需要操作2个单位，剩余单位是自动的<br>一般发怪用自动战斗<br>回合制的灵活性差一些，所以针对boss的打法相对固定，挑战性小一些</p>
<p>隐墨宗的战斗系统是特殊一些的，分为2个形态<br>形态1就是普通输出，单控能力强，可以增加锁定控制的特殊效果<br>形态2是大规模输出，比其他职业输出更强，但是需要牺牲一个符鬼，而且不能连续2回合使用，而中间环节普通输出技能也无法使用只能普通攻击与使用物品或者召唤控制多一些<br>所以这里面使用时机需要把握，召唤兽的顺序也很重要，还是挺好玩的</p>
<p>助战就是选择一组宠物，可以配置3组选1</p>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/150257_0e78ac7a_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>因为任务与战斗都提供了自动机制，所以有些活动都是全自动的每日完成，只要手机挂在那里就行了，多少让我觉得有些浪费时间，这些每天不得不做又要占用手机的时间，还不如让我好好玩玩<br>其实最讨厌的就是自动任务了，自己也玩不了，但是每天都要强迫自己去浪费这个时间…</p>
<p>任务亮点在于NPC是有配音的，并且有些还用了方言，所以一听就是良心作品，不过只有主线有配音，这个做的挺好的</p>
<h4 id="炼妖-amp-合成系统"><a href="#炼妖-amp-合成系统" class="headerlink" title="炼妖&amp;合成系统"></a>炼妖&amp;合成系统</h4><p>分为2种：炼妖与机关组装2种，玩法不一样</p>
<ol>
<li>炼妖：通过炼妖炉合成，需要遵循五行相生，相克失败更高</li>
<li>机关：需要收集组件合成</li>
</ol>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/143124_39921bfc_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>他们引入这2个系统真的是结合了单机的玩法，还是挺良心的<br>2种模式要考虑平衡性，炼妖与零件合成的概率应该是差不多的</p>
<p>炼妖要去壶中界去炼，这里游戏设定壶中界因为某种原因与炼妖壶神器脱离了成了一个地方<br><img src="https://images.gitee.com/uploads/images/2018/0821/142928_6dddf0d7_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<h4 id="天书系统"><a href="#天书系统" class="headerlink" title="天书系统"></a>天书系统</h4><p>天书的概念也是轩辕剑的一个特点，这次也加进去了<br>不过天书搞得与炼妖壶很像了，有各种工厂其实都是固定的设施，功能其实也比较鸡肋，炼化符，制成一些水晶用于升级技能用<br>基本上天书其实是对物品要素的加强，就是炼化物品<br>不过单机里天书可以自己选择地方建造建筑物，类似一个建造型的内部游戏了，针对我这种钟爱建设发展的用户真是喜欢的不得了，不过这网游没那么灵活的建造功能，只能升级，当时的天书里还有DOMO入口<br>单机天书里还能炼妖合成，妖怪属性的提升等，不过这里只是炼化物品（一个是普通的药品、一个是战斗特殊buff），而炼妖放到了壶中界中炼化，而妖怪属性提升是单独的洗练操作<br>其实天书炼妖壶是个很好的设定，可以在这里炼化物品，炼化宠物，同时培养一些副职业，还可以搞建筑发展</p>
<p>这里游戏中天书世界也是独立存在，只需要有天书入口的密码即可进入这个世界，并且由姬良（张良）管理，也就是轩辕剑4的男主<br><img src="https://images.gitee.com/uploads/images/2018/0821/143605_b8723d9d_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<h3 id="副职业"><a href="#副职业" class="headerlink" title="副职业"></a>副职业</h3><p>其实一般的游戏中都有点小游戏会有趣一些，或者说有时候还会给出一些彩蛋与惊喜</p>
<p>休闲包括：画画、知识问答、诗词、弹曲、打牌、演戏几个方向，对应了行当（副职业）的几种：画师、博士、诗人、乐师、谋士、怜人6大副职业</p>
<ol>
<li>画师就是收集各种场景中的植物山水然后拼图打分</li>
<li>博士一个是找NPC答题考核，一个是每次会弹出一些知识问答答对了提升学识</li>
<li>诗人就是完成活动任务给一些诗词的单句最终凑齐一首诗，然可以与匹配的一个人比对诗词，就看自己收集了多少用于应答各种场景</li>
<li>乐师比较好玩，瞬间变成音乐节奏游戏，跟进游戏中的乐谱找NPC收集，然后选择难度弹奏，困难的的是真的很难~<br><img src="https://images.gitee.com/uploads/images/2018/0821/150114_1f753c5a_697510.png" alt="输入图片说明" title="屏幕截图.png"></li>
<li>谋士也是找NPC收集卡片，类似简单的扑克，然后与NPC打牌</li>
<li>怜人就是排练舞台剧，类似一个简单的动画制作软件，可以选择背景，出场人物，音乐，转场效果，指定台词，排练完了发布，会受到点赞与评论<br><img src="https://images.gitee.com/uploads/images/2018/0821/144001_28043b15_697510.png" alt="输入图片说明" title="屏幕截图.png"></li>
</ol>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/145426_b7b87ab0_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>书斋分为4个：一个是副职业的NPC、一个是豪杰就是重点NPC人物、一个是神魔记录，还有一个收集的诗句<br>每一个都会记录里面的任务事件与人物背景</p>
<p>副职业</p>
<ol>
<li>里面维护与每个NPC的好感度，好感度好的话NPC就会把自己的副职业的道具给出来</li>
<li>NPC的好感度有个氪金的花买了后可以直接提升到满级</li>
<li>NPC的情报可以去小二那边打听，每次只能打听到3条情报，而且每天只有一次问小二的机会，这个设计还挺好的</li>
</ol>
<p>神魔记录类似单机里的神魔记录簿，图鉴，也算是继承了特色了</p>
<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>成就、排行其实就是一般的统计数据的结果吧，这个没啥好说的</p>
<p>特别点</p>
<ol>
<li>每个地点有些眼睛点击后可以看到地点的一些故事，收集多了会达成成就</li>
</ol>
<h3 id="关系与交互"><a href="#关系与交互" class="headerlink" title="关系与交互"></a>关系与交互</h3><p>好友、聊天</p>
<ol>
<li>频道聊天，包含系统、世界、当前、帮派、队伍</li>
<li>好友列表与最近联系，可以添加好友，会跟你个人兴趣标签去匹配推荐</li>
<li>圈子主要是朋友做过哪些事件</li>
<li>邮箱，接收奖励与任务通知</li>
<li>聊天窗口可以配置显示哪些频道信息，相当于频道聊天的快捷显示</li>
<li>提供了连接麦克风的语音聊天方式，比较有趣的是在战斗中语音会自动翻译成弹幕飘在屏幕中</li>
</ol>
<p>队伍、帮派</p>
<ol>
<li>可以创建队伍，也可以便捷组队，选定哪些任务加入or创建，NPC里接任务时也会提示便捷组队，等待一段后会提示是否自己当队长</li>
<li>帮派：可以管理成员，帮派是每小时是耗费资金的，所以需要做帮派任务才行，否则会解散，活动任务主要是丝绸之路与对战了，奇异果实可以在这里买</li>
</ol>
<p>副职业是每个角色都可以学习的，没有差异性，魔兽中只有法师能开传送门，做水与面包，每个职业的副职业都有特殊点促进好友交流<br>魔兽中有意思的还有语言差异，听不懂对方说的</p>
<h4 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h4><p>空间感觉是在关系里是个亮点，可以配置自己的个性化标签，然后用于推荐好友用<br>一个是背景除了竹林与角色图还可以配置几张个人上传的图片<br>个人标签可以从性格、兴趣、行业、特征4个维度配置8个标签<br>空间还可以互赞，所以里面还有一个小的消息系统<br>可以配置定位、里面的动态就是个人的圈子的内容<br>还有一个盆栽是好友赠送用的</p>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/145548_83ccdaf2_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>感觉这个空间的设计可以加强好友互动，社交用的，可惜好友都是陌生人，也没发挥什么作用…</p>
<h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><p>每天都有各种活动，有丰富奖励，活动内容每天不一样，所以活动里还提供了日历的预告功能<br>活动每天有经验限制，并且完成个数后有额外奖励，最多8个任务完成有额外奖励。活动提供3种玩法<br>悠闲、江湖、一剑凌云，休闲小游戏偏多，一剑凌云是剧情与挑战PK等任务，而江湖偏向于支线任务与混合<br>活动基本上是做副职业的挑战，刷各种副本，完成历史剧情任务，完成帮派任务，完成日常任务</p>
<p>还有比较大的活动</p>
<ol>
<li>帮派任务：丝绸之路、挑战个人战绩</li>
<li>日常任务：师门任务、抓盗贼、机器人选策略挑战、抓符鬼</li>
<li>历史剧情任务：回到天之痕的各个阶段协助主角做任务，不过里面的任务都比较有挑战，需要技巧才能获胜，比如有的时候需要防御，阴阳相克，特殊技能</li>
<li>各种副本：限时开放的刷龙九子、遗迹、封印妖怪</li>
<li>副职业挑战：各种闲趣完成次数</li>
</ol>
<p><img src="https://images.gitee.com/uploads/images/2018/0821/145002_37a72556_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>福利也有很多</p>
<ol>
<li>每日登陆奖励</li>
<li>绑定手机号</li>
<li>神秘暗号（外部活动奖励码）</li>
<li>充值奖励？</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体上还是很有诚意的作品，不过坚持玩不会超过7天吧，差不多战斗与社交没有亮点，冲着画面与剧情发力更像是在玩单机RPC游戏</p>
<ol>
<li>画面：水墨风好评，看着自动转动3D视角也很有电影的感觉，这个也是继承了单机的设计</li>
<li>失败点：RPC玩单机玩的是剧情与战斗，而网游玩的是社交与战斗，我觉得这游戏做的最失败的一点是社交，好友都是虚的，都是不认识的人，这点会丧失RPC网游里最核心持之以恒的玩法</li>
<li>战斗：有挑战的副本战斗我其实玩隐墨宗还是挺爽的，但是因为是回合制，大多都是自动战斗，所以不是每次都能体会到战斗的乐趣的</li>
<li>任务：不过除了社交的玩法，其他传统单机优点剧情任务做的不错，确实也有些轩辕剑剧情的干货。不过我要是单纯为了剧情我可以去看网上的剧情剪辑流，不玩就能看，没必要去氪金与感受中间的不公平</li>
<li>副业：而还有不错就是可以闲情小游戏的各种玩法也比较有趣，不过这种如果专门去玩就没必要在这么大RPC里去玩了，更像是成就系统，社交有得玩这个才有意义，所以这里就有些鸡肋了</li>
</ol>
<p>而轩辕剑在我周围认识的人里对其着迷的还只是少数人，而宣传为魔兽这样的游戏又不具备公平而完善的玩法，而且动画各种成本太高对于手游，其实发展社交确实挺难的，除非有腾讯的那种资源天然就有社交优势<br>所有手机RPC如果不重视社交与战斗注定是失败的快餐游戏，即使消费单机的IP，大家也都是冲着剧情来玩的，没有剧情玩完就走了<br>其实这种类似的游戏也挺多的，打着一个好的IP，然后做的网游也就是体验下，在氪金的情况下后期就放弃完了，比如什么火影呀日漫游戏的IP，而轩辕剑这部还好点，有不错的剧情任务，比其他IP游戏要良心，不过战斗与社交都是硬伤，注定都不能持久<br>现在手机游戏排行榜一般都是一些低频爽的游戏，如吃鸡、荣耀、部落、穿火、飞车、音乐对战类的游戏，这种游戏适合在手机上与旁边的好友同事偶尔玩一下，自己也可以爽一下得到放松，比RPC要更加持久<br>不过因为是公测，剧情与升级吸引我的地方所需要的氪金都是没有的，而真正玩家在玩的时候可能会氪金玩剧情，所以走剧情模式也不一定赔钱，只是玩完剧情后很空虚，所以后面会变为一个一次性游戏了吧</p>
<h3 id="游戏模式感悟"><a href="#游戏模式感悟" class="headerlink" title="游戏模式感悟"></a>游戏模式感悟</h3><p>从开发角度看下开发的复杂性，其实游戏做个最简单的模式也不难，但是一旦把元素丰富起来，玩法就非常多了，不过这正好可以充分去使用面向对象的思路去设计，才能做到如此灵活而扩展<br>如果是建造类其实闭环更加简单，比如开罗游戏，城市建设需要钱，则钱需要通过订单服务（战斗+任务）然后生产钱，钱又可以造更好的建设生产更多的钱，形成一个循环，不过这个的核心是升级发展重点在主角（城市），订单是手段，因为只有2个核心，可以将2个核心扩大到更复杂<br>魔兽是社交与战斗做的都很好，帮派分明有特色，而DNF是战斗做的好，专注于副本，只有在网游特点中突出的游戏才能持久<br>后面尝试自己去设计一款游戏试试（开新坑=。=），估计会很有意思~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有玩游戏了，手游RPC类型的也没有玩过，这次尝试下&lt;br&gt;小时候单机最爱玩的RPC游戏是轩辕剑，最近网易推出了这个IP的手游轩辕剑龙舞云山，听说继承了轩辕剑水墨画风非常唯美&lt;br&gt;正好删档公测申请体验了下，8月23日删档&lt;/p&gt;
&lt;p&gt;游戏体验目的&lt;/p&gt;
&lt;ol&gt;

    
    </summary>
    
      <category term="娱乐" scheme="https://dawell.github.io/categories/%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="游戏" scheme="https://dawell.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="轩辕剑" scheme="https://dawell.github.io/tags/%E8%BD%A9%E8%BE%95%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-番外篇-源码解析</title>
    <link href="https://dawell.github.io/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://dawell.github.io/2018/08/13/SpringCloud-番外篇-源码解析/</id>
    <published>2018-08-13T08:07:04.000Z</published>
    <updated>2018-08-17T07:54:41.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<p>敬请期待…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-番外篇-文档生成</title>
    <link href="https://dawell.github.io/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/"/>
    <id>https://dawell.github.io/2018/08/12/SpringCloud-番外篇-文档生成/</id>
    <published>2018-08-12T07:43:56.000Z</published>
    <updated>2018-08-17T07:54:41.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<p>敬请期待…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-番外篇-临时任务</title>
    <link href="https://dawell.github.io/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://dawell.github.io/2018/08/11/SpringCloud-番外篇-临时任务/</id>
    <published>2018-08-11T07:41:14.000Z</published>
    <updated>2018-08-17T07:54:41.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
</ol>
<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为service-task的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka-server是Eureka服务器的依赖</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>task用于短命服务的依赖</li>
<li>jpa与mysql的依赖用于存储task相关的数据</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-task<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开ServiceTaskApplication，在class上加入@EnableTask注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server.port=8060</span><br><span class="line">spring.application.name=service-task</span><br><span class="line"></span><br><span class="line">#private</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springcloud</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=xxx</span><br><span class="line">spring.jpa.database=MySQL</span><br><span class="line">spring.jpa.show-sql=true  </span><br><span class="line">spring.jpa.generate-ddl=true  </span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy</span><br></pre></td></tr></table></figure>
<p>主要配置jpa与datasource链接到mysql数据库，如果使用内存存储则不需要任何数据库配置</p>
<h4 id="5-编写方法"><a href="#5-编写方法" class="headerlink" title="5. 编写方法"></a>5. 编写方法</h4><p>在main类中编写CommandLineRunner相关接口task会全部执行完</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTask</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strings -&gt; System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strings -&gt; System.out.println(<span class="string">"Hello 2!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>main方法运行后会直接退出，同时控制台会打印”Hello World!”与”Hello 2!”</p>
<h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p>这个干嘛用的？<br>官方叫做短命任务，就是执行一次就结束的任务，用于一些临时处理的代码场景，每次执行都会记录在数据库中执行的结果，正常，异常信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>20180501架构设计</title>
    <link href="https://dawell.github.io/2018/08/11/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://dawell.github.io/2018/08/11/架构设计/</id>
    <published>2018-08-11T02:47:36.000Z</published>
    <updated>2018-08-15T11:33:02.642Z</updated>
    
    <content type="html"><![CDATA[<p>准备介绍内容如下</p>
<ol>
<li>领域驱动</li>
<li>前后端分离</li>
<li>微服务设计</li>
<li>缓存策略</li>
<li>限流策略</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备介绍内容如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;领域驱动&lt;/li&gt;
&lt;li&gt;前后端分离&lt;/li&gt;
&lt;li&gt;微服务设计&lt;/li&gt;
&lt;li&gt;缓存策略&lt;/li&gt;
&lt;li&gt;限流策略&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud-监控管理</title>
    <link href="https://dawell.github.io/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/"/>
    <id>https://dawell.github.io/2018/08/10/SpringCloud-监控管理/</id>
    <published>2018-08-10T07:40:30.000Z</published>
    <updated>2018-08-17T07:54:41.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
</ol>
<h3 id="Admin监控"><a href="#Admin监控" class="headerlink" title="Admin监控"></a>Admin监控</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为service-admin的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka-server是Eureka服务器的依赖</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>admin-starter-server是admin监控平台的依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开ServiceAdminApplication，在class上加入@EnableAdminServer注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=7088</span><br><span class="line">spring.application.name=service-admin</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br></pre></td></tr></table></figure>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到service-admin已经注册了一台<br>访问 <a href="http://localhost:7088" target="_blank" rel="noopener">http://localhost:7088</a>  可以看到admin的列表，首页就是与注册中心信息差不多，全部的应用，还有detail可以点进去看到各个endpoint数据</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>admin其实是基于SpringBoot诞生的，在注册中心引入之前本来也是有一个admin的client的，用于发现服务维持心跳的<br>但是基于SpringCloud的注册中心就不需要在客户端依赖了</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="集成Hystrix大盘"><a href="#集成Hystrix大盘" class="headerlink" title="集成Hystrix大盘"></a>集成Hystrix大盘</h4><p>之前介绍过断路降级的hystrix大盘，其实可以集成在admin中更加方便统一<br>导入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置文件中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.boot.admin.routes.endpoints=env,metrics,dump,jolokia,info,configprops,trace,logfile,refresh,flyway,liquibase,heapdump,loggers,auditevents,hystrix.stream,turbine.stream,activiti</span><br><span class="line">spring.boot.admin.turbine.location=turbine-service</span><br></pre></td></tr></table></figure></p>
<p>这样打开页面时在每个服务的detail中可以看到hystrix的信息，同时在大菜单上加入了Tuibine的视图</p>
<p>同时有个方便的方式是将turbine服务直接在admin中去集成，不用单独开turbine服务</p>
<h4 id="集成登录验证"><a href="#集成登录验证" class="headerlink" title="集成登录验证"></a>集成登录验证</h4><p>简单的方式引入spring-boot-starter-security即可用basic验证了<br>不过admin也有一个登录界面<br>引入如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-login<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后建立登录认证的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled = <span class="keyword">true</span>, prePostEnabled = <span class="keyword">true</span>, proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//忽略css.jq.img等文件</span></span><br><span class="line">        web.ignoring()</span><br><span class="line">                .antMatchers(<span class="string">"/**.html"</span>, <span class="string">"/**.css"</span>, <span class="string">"/img/**"</span>, <span class="string">"/**.js"</span>, <span class="string">"/third-party/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                .csrf().disable() <span class="comment">//HTTP with Disable CSRF</span></span><br><span class="line">                .authorizeRequests() <span class="comment">//Authorize Request Configuration</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>,</span><br><span class="line">                        <span class="string">"/api/**"</span>,</span><br><span class="line">                        <span class="string">"/**/heapdump"</span>,</span><br><span class="line">                        <span class="string">"/**/loggers"</span>,</span><br><span class="line">                        <span class="string">"/**/liquibase"</span>,</span><br><span class="line">                        <span class="string">"/**/logfile"</span>,</span><br><span class="line">                        <span class="string">"/**/flyway"</span>,</span><br><span class="line">                        <span class="string">"/**/auditevents"</span>,</span><br><span class="line">                        <span class="string">"/**/jolokia"</span>).permitAll() <span class="comment">//放开"/api/**"：为了给被监控端免登录注册并解决Log与Logger冲突</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/**"</span>).hasRole(<span class="string">"USER"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/**"</span>).authenticated()</span><br><span class="line">                .and() <span class="comment">//Login Form configuration for all others</span></span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login.html"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>).permitAll()</span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/"</span>)</span><br><span class="line">                .and() <span class="comment">//Logout Form configuration</span></span><br><span class="line">                .logout()</span><br><span class="line">                .deleteCookies(<span class="string">"remove"</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/login.html"</span>).permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置文件中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 权限</span><br><span class="line">security.user.name=admin</span><br><span class="line">security.user.password=123</span><br><span class="line">security.basic.enabled=false</span><br></pre></td></tr></table></figure></p>
<p>这样在访问监控时会先要求登录 使用admin与123访问</p>
<h4 id="集成监控报警"><a href="#集成监控报警" class="headerlink" title="集成监控报警"></a>集成监控报警</h4><p>可以在应用状态变更与endpoin异常时自动邮件报警<br>导入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置中需要开启通知与邮件的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring.boot.admin.notify.mail.to=456@qq.com</span><br><span class="line">spring.boot.admin.notify.mail.from=123@qq.com</span><br><span class="line">#从任何状态到up状态都不要发邮件通知</span><br><span class="line">#spring.boot.admin.notify.mail.ignore-changes: *:UP</span><br><span class="line"># 邮件</span><br><span class="line">spring.mail.host=smtp.qq.com</span><br><span class="line">spring.mail.username=123@qq.com</span><br><span class="line">spring.mail.password=xxxxx</span><br><span class="line">spring.mail.properties.mail.debug=false</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.properties.mail.smtp.ssl.enable=true</span><br><span class="line">spring.mail.port=465</span><br></pre></td></tr></table></figure>
<p>上面配置是开启SSL的邮件配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-断路降级</title>
    <link href="https://dawell.github.io/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/"/>
    <id>https://dawell.github.io/2018/08/09/SpringCloud-断路降级/</id>
    <published>2018-08-09T07:39:14.000Z</published>
    <updated>2018-08-17T07:54:41.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
</ol>
<h3 id="断路监控大盘"><a href="#断路监控大盘" class="headerlink" title="断路监控大盘"></a>断路监控大盘</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为hystrix-dashboard的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka-server是Eureka服务器的依赖</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>netflix-hystrix-dashboard是hystrix监控大盘的依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开HystrixDashboardApplication，在class上加入@EnableHystrixDashboard注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=8030</span><br><span class="line">spring.application.name=hystrix-dashboard</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br></pre></td></tr></table></figure>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到hystrix-dashboard已经注册了一台<br>访问 <a href="http://localhost:8030" target="_blank" rel="noopener">http://localhost:8030</a>  可以看到hystrix监控的页面，上面需要配置一个xxx.stream的http地址，客户度集成后就有这个地址了</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>基于刚同步调用章节business-service服务调用account-service服务接口的例子</p>
<h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>BusinessServiceApplication加入注解 @EnableCircuitBreaker 打开断路器功能</p>
<h4 id="3-修改代码"><a href="#3-修改代码" class="headerlink" title="3. 修改代码"></a>3. 修改代码</h4><p>基于feign远程调用的降级非常简单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRead accountRead;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"掛了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account-msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountRead.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加@HystrixCommand注解，注解种指定fallbackMethod对应同参数与返回值的方法即可</p>
<p>其他的方法也可以在方法上面标注@HystrixCommand(fallbackMethod = “xxx”)注解就实现降级了，比如用restTempldate请求的方法上加上</p>
<h3 id="监控大盘集成"><a href="#监控大盘集成" class="headerlink" title="监控大盘集成"></a>监控大盘集成</h3><p>只需将客户的的<a href="http://localhost:8010/hystrix.stream填入hystrix-dashboard的url中点击下面按钮注册就可以看到监控数据" target="_blank" rel="noopener">http://localhost:8010/hystrix.stream填入hystrix-dashboard的url中点击下面按钮注册就可以看到监控数据</a><br>但是这样只能看到一台机器的，有时候我们想关注整个集群的情况，多个业务服务的链路情况，则需要使用数据聚合服务turbine-service</p>
<h4 id="turbine服务"><a href="#turbine服务" class="headerlink" title="turbine服务"></a>turbine服务</h4><p>导入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>添加bootstrap.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server.port=8001</span><br><span class="line">spring.application.name=turbine-service</span><br><span class="line"></span><br><span class="line"># private</span><br><span class="line">turbine.app-config=api-gateway,business-service</span><br><span class="line">turbine.aggregator.clusterConfig=default</span><br><span class="line">turbine.cluster-name-expression=&quot;default&quot;</span><br><span class="line">turbine.combine-host-port=true</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br></pre></td></tr></table></figure></p>
<p>turbine.app-config用于指定具体聚合哪些服务，这里聚合2个有调用请求的服务网关+business服务</p>
<p>在TurbineServiceApplication类上加入@EnableTurbine</p>
<p>将地址 <a href="http://localhost:8001/hystrix.stream" target="_blank" rel="noopener">http://localhost:8001/hystrix.stream</a> 配置在hystrix-dashboard上就可以看到服务网关+business服务2个集群的调用情况了</p>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h4 id="如果触发了断路器一定是调用服务不可用么？"><a href="#如果触发了断路器一定是调用服务不可用么？" class="headerlink" title="如果触发了断路器一定是调用服务不可用么？"></a>如果触发了断路器一定是调用服务不可用么？</h4><p>不是，因为断路器触发不止远程服务不可行，包括调用异常的情况，只要是异常都会触发断路，比如bug导致的</p>
<h4 id="如果fallback代码报错了呢？"><a href="#如果fallback代码报错了呢？" class="headerlink" title="如果fallback代码报错了呢？"></a>如果fallback代码报错了呢？</h4><p>fallback报错了会抛出一个异常，而fallback一般都是简单的返回默认值固定值的逻辑，如果担心这里处理也有问题，可以在fallback上再加上@HystrixCommand降级<br>可以这样一直降级下去</p>
<h3 id="其他注册中心"><a href="#其他注册中心" class="headerlink" title="其他注册中心"></a>其他注册中心</h3><p>其他更多的是限流的方案与设置调用超时与trycatch的简单处理方案，相对不是太灵活，这里不展开了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-同步调用</title>
    <link href="https://dawell.github.io/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
    <id>https://dawell.github.io/2018/08/08/SpringCloud-同步调用/</id>
    <published>2018-08-08T07:37:43.000Z</published>
    <updated>2018-08-17T07:54:41.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
<li>基于配置中心，请先按照配置中心章节，配置公共配置</li>
<li>依赖链路追踪章节</li>
</ol>
<h3 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h3><p>同步调用主要是通过HTTP去请求的，这里演示Feign的调用，重点在客户端的实现，服务端暴露接口就是普通的SpringMVC的使用</p>
<h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>继续使用”异步调用”章节的artifactId为account-service的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>可以显示引入web的依赖</li>
<li>actuator与eureka-server已经依赖web，其实SC中大部分组件已经强依赖web了，依赖这些组件可以不显示依赖（不过建议还是明确引入）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写服务端暴露接口"><a href="#3-编写服务端暴露接口" class="headerlink" title="3. 编写服务端暴露接口"></a>3. 编写服务端暴露接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageController</span><span class="params">(@Value(<span class="string">"$&#123;message&#125;"</span>)</span> String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个接口还是使用配置中心章节使用的/msg接口暴露服务</p>
<h4 id="4-启动main"><a href="#4-启动main" class="headerlink" title="4. 启动main"></a>4. 启动main</h4><h4 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h4><p>访问<a href="http://localhost:8020/msg" target="_blank" rel="noopener">http://localhost:8020/msg</a> 可以返回配置中心的msg配置数据</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>客户端使用项目business-service演示</p>
<h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>BusinessServiceApplication上加入@EnableFeignClients开启Feign</p>
<h4 id="3-添加调用代码"><a href="#3-添加调用代码" class="headerlink" title="3. 添加调用代码"></a>3. 添加调用代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"account-service"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AccountRead</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRead accountRead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account-msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountRead.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前在account-service中声明的/msg接口在这里使用同样的SpringMVC的注解标注AccountRead接口接口代表远程调用的客户端<br>然后调用时只需要@Autowired注入即可使用</p>
<h3 id="其他同步调用方式"><a href="#其他同步调用方式" class="headerlink" title="其他同步调用方式"></a>其他同步调用方式</h3><p>如restfulTemplate也可以远程调用，不过不如feign方便，需要拼请求参数的URL，当前例子因为不需要拼接参数，所以看起来差不多</p>
<h4 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h4><p>在main类或者config类中构建一个RestTemplate，标记@LoadBalanced，则会采用Ribbon提供的负载均衡算法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account-msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://account-service/msg"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h4 id="如果返回的不是String，而是一个对象呢？"><a href="#如果返回的不是String，而是一个对象呢？" class="headerlink" title="如果返回的不是String，而是一个对象呢？"></a>如果返回的不是String，而是一个对象呢？</h4><p>对象只需要在客户端这里声明一个类似的对象即可自动转换，其实中间数据都是用json传输的，类名可以不一样，只要属性一样即可匹配</p>
<h4 id="请求调用的IP与端口号我想获取或者单独控制怎么实现？"><a href="#请求调用的IP与端口号我想获取或者单独控制怎么实现？" class="headerlink" title="请求调用的IP与端口号我想获取或者单独控制怎么实现？"></a>请求调用的IP与端口号我想获取或者单独控制怎么实现？</h4><p>Feign其实是依赖Ribbon去做负载均衡的，可以在配置中配置负载均衡策略<br>具体获取请求IP与端口控制可以直接使用Ribbon去请求可以获取到负载的IP与端口号，结合RestfulTempldate去请求服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient client;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account-msg2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = client.choose(<span class="string">"account-service"</span>);</span><br><span class="line">        String url = <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/msg"</span>;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-异步消息</title>
    <link href="https://dawell.github.io/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/"/>
    <id>https://dawell.github.io/2018/08/07/SpringCloud-异步消息/</id>
    <published>2018-08-07T07:24:31.000Z</published>
    <updated>2018-08-20T03:52:56.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
<li>基于配置中心，请先按照配置中心章节，配置公共配置</li>
<li>依赖链路追踪章节</li>
</ol>
<h3 id="Stream-Kafka"><a href="#Stream-Kafka" class="headerlink" title="Stream-Kafka"></a>Stream-Kafka</h3><h4 id="0-搭建kafka"><a href="#0-搭建kafka" class="headerlink" title="0. 搭建kafka"></a>0. 搭建kafka</h4><p>详见中间件kafka章节</p>
<h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为account-service的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka是Eureka客户端，注册到注册中心</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>sleuth + zipkin是链路追踪客户端，用于监控链路调用</li>
<li>bus-kafka是基于kafka的bus消息总线客户端，用于接收消息总线异步事件</li>
<li>stream + stream-binder-kafka + spring-kafka配置的是kafka的发送/消费端依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开AccountServiceApplication，在class上加入@EnableBinding(Source.class)注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8020</span><br><span class="line">spring.application.name=account-service</span><br><span class="line"></span><br><span class="line">private</span><br><span class="line">spring.cloud.stream.bindings.output.destination=accounts</span><br><span class="line"></span><br><span class="line">#kafka</span><br><span class="line">spring.cloud.stream.kafka.binder.zk-nodes=localhost:2181</span><br><span class="line">spring.cloud.stream.kafka.binder.brokers=localhost:9092</span><br></pre></td></tr></table></figure>
<p>stream.bindings.output.destination主要是配置kafka发送端的topic</p>
<h4 id="5-编写调用代码"><a href="#5-编写调用代码" class="headerlink" title="5. 编写调用代码"></a>5. 编写调用代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/accounts"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(@RequestBody Account account)</span> </span>&#123;</span><br><span class="line">        source.output().send(MessageBuilder.withPayload(account.getMob()).build());</span><br><span class="line">        log.info(<span class="string">"kafka send!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>暴露一个/accounts接口，提交POST方法请求，传递包含mob字段的json数据，会将mob字段作为kafka消息体发送<br>其中Source直接注入即可，Source是Stream自带的接口类，默认Source中的配置关联到”output”中，刚才配置了output的destination也就是topic是accounts</p>
<h4 id="6-启动main"><a href="#6-启动main" class="headerlink" title="6. 启动main"></a>6. 启动main</h4><h4 id="7-验证"><a href="#7-验证" class="headerlink" title="7. 验证"></a>7. 验证</h4><p>可以打开一个控制台，通过kafka-console-consumer.sh/bat去监听accounts的topic的kafka<br>通过暴露/accounts接口post提交信息，通过kafka-console-consumer.sh/bat控台可以看到消息结构<br>stream会自动封装一个content-type类型，用于标识数据类型</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>stream + stream-binder-kafka + spring-kafka配置的是kafka的发送/消费端依赖<br>这个配置与发送端是一样的</p>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>BusinessServiceApplication添加@EnableBinding(Sink.class)</p>
<p>Sink用于接收kafka，当然如果是多个kafkaTopic这里可以设置多个，接口都是继承了Sink接口，也可以在一个接口中声明多个SubscribableChannel与注解如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomSink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String INPUT = <span class="string">"input3"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(INPUT)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    String INPUT0 = <span class="string">"input0"</span>;</span><br><span class="line"></span><br><span class="line">    String INPUT1 = <span class="string">"input1"</span>;</span><br><span class="line"></span><br><span class="line">    String INPUT2 = <span class="string">"input2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(INPUT0)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input0</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(INPUT1)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(INPUT2)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.stream.bindings.input.destination=accounts</span><br><span class="line">#spring.kafka.listener.poll-timeout=</span><br></pre></td></tr></table></figure>
<p>这里是接收端，所以是input<br>headerMode用于配置是stream的格式还是原始数据<br>content-type用于配置数据解析类型</p>
<p>注意：如果通过kafka的kafka-console-producer.bat模拟发送kafka的时候，消费端会报如下错误<br>    could not convert messages from Kafka异常<br>原因就是因为发送的内容不是stream发送出来的，stream有其固定的格式，至少要有content-type属性<br>如果想不用stream格式发送也能解析需要在消费方增加如下配置，进行raw源数据的解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.stream.bindings.input.consumer.headerMode=raw</span><br><span class="line">spring.cloud.stream.bindings.input.content-type=text/plain</span><br></pre></td></tr></table></figure></p>
<h4 id="4-接收消息代码"><a href="#4-接收消息代码" class="headerlink" title="4. 接收消息代码"></a>4. 接收消息代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@StreamListener注解用于标识处理消息的方法</p>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h4 id="Stream是怎么保存链路追踪的数据的？"><a href="#Stream是怎么保存链路追踪的数据的？" class="headerlink" title="Stream是怎么保存链路追踪的数据的？"></a>Stream是怎么保存链路追踪的数据的？</h4><p>如果不引入sleuth + zipkin依赖，保存的消息格式只是带有content-type字段，而如果引入了这2个依赖就会在Stream消息格式里加入额外4个字段</p>
<ol>
<li>traceId</li>
<li>spanId</li>
</ol>
<p>消息体会变大，不过带来的好处是消息消费的时候依然可以记录链路信息，这样在链路图上就可以看到所有消息者消费的情况了</p>
<h4 id="支持kafka的消息组及消息分区"><a href="#支持kafka的消息组及消息分区" class="headerlink" title="支持kafka的消息组及消息分区"></a>支持kafka的消息组及消息分区</h4><p>在生产端需要增加分区规则与个数的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload</span><br><span class="line">spring.cloud.stream.bindings.output.producer.partitionCount=2</span><br></pre></td></tr></table></figure></p>
<p>partitionKeyExpression可以使用SpEL去解析具体传输数据体中的某个key值去作为分区key<br>partitionCount指定分区的总个数</p>
<p>在消费端也需要开启分区配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.stream.bindings.input.comsumer.partitioned=true</span><br><span class="line">spring.cloud.stream.instanceCount=2</span><br><span class="line">spring.cloud.stream.instanceIndex=0</span><br></pre></td></tr></table></figure></p>
<p>指定总分区个数与当然消费的分区</p>
<p>而消费端如果要指定消费组只需要指定消费组的名称即可开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.stream.bindings.input.group=comsumer1</span><br></pre></td></tr></table></figure></p>
<p>不加消费组每个订阅者都收到同样的消息，offset独立维护<br>消费组能保证所有组内消费同一topic中的消息只有一个组内的服务消费，串性消费，offset维护在公共区域，Stream默认存储在zookeeper中</p>
<p>在kafka中的zookeeper中存储个位置：/consumers/组名/offsets/主题/分区移动的位置</p>
<h3 id="其他注册中心"><a href="#其他注册中心" class="headerlink" title="其他注册中心"></a>其他注册中心</h3><p>其他还有RabbitMQ的实现</p>
<h4 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h4><p>略…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-API网关</title>
    <link href="https://dawell.github.io/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/"/>
    <id>https://dawell.github.io/2018/08/06/SpringCloud-API网关/</id>
    <published>2018-08-06T12:21:35.000Z</published>
    <updated>2018-08-17T07:54:41.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
<li>基于配置中心，请先按照配置中心章节，配置公共配置</li>
<li>依赖链路追踪章节</li>
</ol>
<h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为api-gateway的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka是Eureka客户端，注册到注册中心</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>sleuth + zipkin是链路追踪客户端，用于监控链路调用</li>
<li>bus-kafka是基于kafka的bus消息总线客户端，用于接收消息总线异步事件</li>
<li>zuul是zuul网关的依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开ApiGatewayApplication，在class上加入@EnableZuulProxy注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=9998</span><br><span class="line">spring.application.name=api-gateway</span><br><span class="line"></span><br><span class="line">#private</span><br><span class="line">feign.httpclient.connection-timeout=3000</span><br><span class="line"></span><br><span class="line">#public 注册中心+配置中心+链路追踪+BUSkafka</span><br></pre></td></tr></table></figure>
<p>feign.httpclient.connection-timeout：API网关依赖Fegion客户端，而API调用时可能超时，一般远程调用的时间需要调整下</p>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到api-gateway已经注册了一台<br>访问 <a href="http://localhost:9998/应用名/接口名" target="_blank" rel="noopener">http://localhost:9998/应用名/接口名</a>  即可验证，被代理的接口是否调用成功</p>
<h3 id="API网关集群"><a href="#API网关集群" class="headerlink" title="API网关集群"></a>API网关集群</h3><p>只要配置2个端口区分开即可，如9998,9999</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>启动代理后就可以通过代理访问请求了，所以无客户端</p>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h3 id="其他API网关"><a href="#其他API网关" class="headerlink" title="其他API网关"></a>其他API网关</h3><p>目前还有SpringCLoud亲儿子，基于SpringBoot2的SpringCloud API Gateway</p>
<h4 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h4><p>略…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-消息总线</title>
    <link href="https://dawell.github.io/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
    <id>https://dawell.github.io/2018/08/05/SpringCloud-消息总线/</id>
    <published>2018-08-05T06:57:18.000Z</published>
    <updated>2018-08-17T07:54:41.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
<li>基于配置中心，请先按照配置中心章节，配置公共配置</li>
<li>依赖链路追踪章节</li>
</ol>
<h3 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为service-bus的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka是Eureka客户端，注册到注册中心</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>sleuth + zipkin是链路追踪客户端，用于监控链路调用</li>
<li>bus-kafka是基于kafka的bus消息总线客户端，用于接收消息总线异步事件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>不需要添加任何注解，bus依赖进来后扩展了SpringBoot的endpoint</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8901</span><br><span class="line">spring.application.name=service-bus</span><br><span class="line"></span><br><span class="line">## private</span><br><span class="line">spring.cloud.bus.trace.enabled=true</span><br><span class="line"></span><br><span class="line">#public</span><br><span class="line">spring.cloud.stream.kafka.binder.zk-nodes=localhost:2181</span><br><span class="line">spring.cloud.stream.kafka.binder.brokers=localhost:9092</span><br></pre></td></tr></table></figure>
<p>bus.trace.enabled可以开启bus操作的链路跟踪，每次客户端处理都是异步接收消息去处理的，所以可以观察到每个客户端接收消息时间与ack的情况<br>由于bus依赖于异步消息Stream，这里采用kafka，所以需要配置下kafka的zk与brokers的地址（这里可以看下之前kafka搭建的文章）</p>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到service-bus已经注册了一台<br>使用curl或者Postman用POST方式访问 <a href="http://localhost:8901/bus/refresh" target="_blank" rel="noopener">http://localhost:8901/bus/refresh</a> 可以通过/trace看到每台机器ack的情况<br>如果开启了链路追踪，也可以通过链路追踪看到每次bus请求的情况</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>无注解，引入依赖既开启</p>
<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#kafka</span><br><span class="line">spring.cloud.stream.kafka.binder.zk-nodes=localhost:2181</span><br><span class="line">spring.cloud.stream.kafka.binder.brokers=localhost:9092</span><br></pre></td></tr></table></figure>
<p>依赖kafka，与服务端统一kafka</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol>
<li>通过bus调用的命令不加参数是全局的，可以通过增加destination参数，如/bus/refresh?destination=business-service:**，只会请求business-service的所有服务</li>
<li>如果访问出现401，则配置需要加上management.security.enabled=false</li>
<li>很多BUS功能单一，一般主要与配置中心配合，所以往往BUS的功能可以直接集成在配置中心中，方便管理</li>
</ol>
<h3 id="其他消息总线"><a href="#其他消息总线" class="headerlink" title="其他消息总线"></a>其他消息总线</h3><p>除了kafka的支持，还可以通过rabbitMQ</p>
<h4 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h4><p>略…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-链路跟踪</title>
    <link href="https://dawell.github.io/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/"/>
    <id>https://dawell.github.io/2018/08/04/SpringCloud-链路跟踪/</id>
    <published>2018-08-04T03:51:52.000Z</published>
    <updated>2018-08-17T07:54:41.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
<li>基于配置中心，请先按照配置中心章节，配置公共配置</li>
</ol>
<h3 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为zipkin-service的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka是Eureka客户端，注册到注册中心</li>
<li>config是Config客户端，从配置中心拉取配置</li>
<li>zipkin-server + zipkin-autoconfigure-ui是链路追踪客户端，用于监控链路调用<ol>
<li>注意这个依赖属于zipkin的ui，并不是springcloud包下，需要单独引用</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开ZipkinServiceApplication，在class上加入@EnableZipkinServer注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.port=9411</span><br><span class="line">spring.application.name=zipkin-service</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br><span class="line">zipkin.storage.type=mem</span><br></pre></td></tr></table></figure>
<p>zipkin.storage.type默认也是用mem，默认数据存储在内存中，可以用mysql之类的存储去存储收集的信息</p>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到zipkin-service已经注册了一台<br>访问 <a href="http://localhost:9411/zipkin" target="_blank" rel="noopener">http://localhost:9411/zipkin</a> 看到服务端的UI界面，上面有查找调用链、依赖分析等功能</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>无须添加注解</p>
<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.sleuth.scheduled.enabled=false</span><br><span class="line">spring.sleuth.async.enabled=false</span><br><span class="line">spring.sleuth.annotation.enabled=false</span><br><span class="line">spring.sleuth.sampler.percentage=1</span><br><span class="line">spring.zipkin.sender.type=web</span><br></pre></td></tr></table></figure>
<p>scheduled.enabled与async.enabled关闭定时与异步推送数据，开启实时同步，可以更实时的看到数据<br>sampler.percentage采集率，用于控制多少比例的数据进行采集，默认是0.1，请求10次采集1次，这里设置为1，每一次调用都会采集<br>zipkin.sender.type设置为web才会直接请求到zipkin-server，否则如果依赖binders会默认是放在kafka中的，所以明确使用web方式调用</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="除了通过web同步请求链路信息，还可以采用kafka异步采集信息"><a href="#除了通过web同步请求链路信息，还可以采用kafka异步采集信息" class="headerlink" title="除了通过web同步请求链路信息，还可以采用kafka异步采集信息"></a>除了通过web同步请求链路信息，还可以采用kafka异步采集信息</h4><p>zipkin.collector可以采用kafka收集信息，而客户端也可以配置为kafka发送信息</p>
<p>配置略…</p>
<h4 id="zipkin的数据可以采用mysql数据存储"><a href="#zipkin的数据可以采用mysql数据存储" class="headerlink" title="zipkin的数据可以采用mysql数据存储"></a>zipkin的数据可以采用mysql数据存储</h4><p>配置略…</p>
<h4 id="trace中的流转"><a href="#trace中的流转" class="headerlink" title="trace中的流转"></a>trace中的流转</h4><p>一个是多出了trace信息，同时注意最后一个状态位<br>日志中[demo-trace1,63c082f6715c8979,63c082f6715c8979,true],true代表上传成功；</p>
<p>如果开启了kafka的日志，则kafka消息中会多出4个trace相关的key，详见异步消息章节</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-配置中心</title>
    <link href="https://dawell.github.io/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://dawell.github.io/2018/08/03/SpringCloud-配置中心/</id>
    <published>2018-08-03T12:10:50.000Z</published>
    <updated>2018-08-17T07:54:41.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
</ol>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为service-config的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>config-server是Config服务器的依赖</li>
<li>eureka是Eureka客户端，这里配置中心依赖于注册中心</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开ServiceConfigApplication，在class上加入@EnableConfigServer注解<br>并且加上@EnableEurekaClient，注册到注册中心</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><h5 id="建立git仓库"><a href="#建立git仓库" class="headerlink" title="建立git仓库"></a>建立git仓库</h5><p>可以是本地仓库，也可以是远程仓库，我们用本地仓库来模拟</p>
<ol>
<li>找到一个目录E:/config</li>
<li>git init 初始化仓库</li>
<li>新建文件application.properties</li>
<li>git add .</li>
<li>git commit -m ‘init’</li>
<li>git push origin master</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br><span class="line">spring.application.name=service-config</span><br><span class="line">spring.cloud.config.server.git.uri=E:/config</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management.security.enabled=false</span><br></pre></td></tr></table></figure>
<p>配置中心默认端口8888</p>
<p>config.server.git.uri设置为git的本地地址</p>
<ol>
<li>注意spring.cloud.config.server.git.uri必须配置在应用本地，否则不知道远程配置的地址，而其他服务的配置都可以放到配置中心，这个是特别的</li>
</ol>
<p>discovery.enabled与discovery.service-id其实是客户端的配置，配置中心自己是服务端也是客户端，作为客户端与其他服务一样，都需要通过配置中心去发现配置服务启动，读取公共配置</p>
<ol>
<li>discovery.enabled设置为通过注册中心暴露服务</li>
<li>discovery.service-id是配置中心对在注册中心外暴露的id一致，与server端配置的spring.application.name一致</li>
</ol>
<p>defaultZone注册中心地址<br>management.security.enabled用于关闭一些校验权限</p>
<h5 id="抽出公共配置–其他微服务共享"><a href="#抽出公共配置–其他微服务共享" class="headerlink" title="抽出公共配置–其他微服务共享"></a>抽出公共配置–其他微服务共享</h5><p>application.properties文件添加以下配置，并去掉service-config配置中的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management.security.enabled=false</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br></pre></td></tr></table></figure></p>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到service-config已经注册了一台<br>访问 <a href="http://localhost:8888/service-config/default" target="_blank" rel="noopener">http://localhost:8888/service-config/default</a> 就可以访问到配置中心加载的配置了，中间改其他服务名，default是指配置的profile</p>
<h3 id="Config集群"><a href="#Config集群" class="headerlink" title="Config集群"></a>Config集群</h3><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h4><p>配置2个server，server1使用端口8888，server2使用端口8889</p>
<p>server1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br><span class="line">spring.application.name=service-config</span><br><span class="line">spring.cloud.config.server.git.uri=E:/IdeaProjects/springcloud-test/config</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management.security.enabled=false</span><br></pre></td></tr></table></figure></p>
<p>server2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8889</span><br><span class="line">spring.application.name=service-config</span><br><span class="line">spring.cloud.config.server.git.uri=E:/IdeaProjects/springcloud-test/config</span><br><span class="line"></span><br><span class="line"># public</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management.security.enabled=false</span><br></pre></td></tr></table></figure></p>
<p>除了端口号不一样，其他都一样，本质上配置中心只要保证读取的git地址一样就可以了，客户端只是过来拉配置，git相当于数据库</p>
<h4 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h4><p>启动server1<br>启动server2</p>
<h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到service-config已经注册了2台<br>访问 <a href="http://localhost:8888/service-config/default" target="_blank" rel="noopener">http://localhost:8888/service-config/default</a> 就可以访问到配置中心加载的配置了<br>访问 <a href="http://localhost:8889/service-config/default" target="_blank" rel="noopener">http://localhost:8889/service-config/default</a> 就可以访问到配置中心加载的配置了</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><p>客户端要通过注册中心查找注册中心服务，所以需要依赖注册中心</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>开启注册中心的配置即可@EnableDiscoveryClient，配置中心不需要额外的注解</p>
<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=service-config</span><br></pre></td></tr></table></figure>
<p>config.discovery.enabled与config.discovery.service-id是依赖配置中心启动的核心配置，指定配置中心暴露的名称</p>
<h4 id="4-编写代码"><a href="#4-编写代码" class="headerlink" title="4. 编写代码"></a>4. 编写代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageController</span><span class="params">(@Value(<span class="string">"$&#123;message&#125;"</span>)</span> String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@RefreshScope 注意这里如果想通过/refresh接口能实时刷新配置的话，需要加这个注解，没有加的只是启动时加载的数据不会更新<br>注意这里进来保持好的使用习惯，使用final来保存数据</p>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h4 id="1-为什么一定通过注册中心暴露配置中心服务？"><a href="#1-为什么一定通过注册中心暴露配置中心服务？" class="headerlink" title="1. 为什么一定通过注册中心暴露配置中心服务？"></a>1. 为什么一定通过注册中心暴露配置中心服务？</h4><p>如果不通过注册中心，客户端的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.config.uri=http://localhost:8888</span><br></pre></td></tr></table></figure></p>
<p>如果修改修改了域名或者端口，增加减少机器都需要去修改此启动配置，则通过注册中心就可以用其各种好处，减少依赖</p>
<h4 id="2-配置中心为什么依赖注册中心？怎么我看有的是注册中心依赖配置中心？"><a href="#2-配置中心为什么依赖注册中心？怎么我看有的是注册中心依赖配置中心？" class="headerlink" title="2. 配置中心为什么依赖注册中心？怎么我看有的是注册中心依赖配置中心？"></a>2. 配置中心为什么依赖注册中心？怎么我看有的是注册中心依赖配置中心？</h4><p>其实目前2种配置都有</p>
<ol>
<li>注册中心依赖配置中心的解释：就是注册中心也是一个服务，启动所需要的配置从配置中心拉取，同时可以动态变更，启动顺序：先配置中心，再注册中心，配置中心不能依赖注册中心，否则无法启动。</li>
<li>配置中心依赖注册中心的解释：配置中心如果注册为集群模式那必然让客户端通过服务发现找到从注册中心找到配置中心，所以配置中心一定要注册到注册中心启动服务发现。启动顺序：注册中心，再配置中心，这样注册中心的配置是不经过配置中心的，而注册中心的配置一般也是固定不变的<br>针对第一种还有一种解：先启动配置中心，开启注册失败仍然可以启动的配置，只是第一次注册失败依然可以启动，然后再启动注册中心，可以两全<br>总体来说第二种更加合理一点，因为一般注册中心的defaultZone与其他应用不一样，注册中心的要排除掉自己的地址，而其他服务是全量，这样我在做公共配置时比较统一，不用开启注册中心的本地配置优先<br>不过其他解决方案中注册中心与配置中心一般都是一体的，所以也就没有这种相互依赖的尴尬，不过领域上确实是2个东西</li>
</ol>
<h4 id="3-为什么配置中心读取的配置变量声明为final的，但是调用-refresh后带-RefreshScope的对象里的final值还会发生变化？"><a href="#3-为什么配置中心读取的配置变量声明为final的，但是调用-refresh后带-RefreshScope的对象里的final值还会发生变化？" class="headerlink" title="3. 为什么配置中心读取的配置变量声明为final的，但是调用/refresh后带@RefreshScope的对象里的final值还会发生变化？"></a>3. 为什么配置中心读取的配置变量声明为final的，但是调用/refresh后带@RefreshScope的对象里的final值还会发生变化？</h4><p>首先final是不会变的，所以spring是把整个@RefreshScope标注的bean重新创建了一遍<br>final的好处是</p>
<ol>
<li>控制只有配置中心才可以更改变量，在程序中是无法赋值替换的</li>
<li>配置中心的数据都是很少去变化的，应该当做常量处理，final虚拟机有优化</li>
<li>可以保证线程安全，无状态类与不可变类多线程安全</li>
</ol>
<h3 id="其他注册中心"><a href="#其他注册中心" class="headerlink" title="其他注册中心"></a>其他注册中心</h3><p>因为consul与zookeeper本身具备配置存储的能力，所以这2个注册中心的配置中心一般用他们定制的，而非用SpringCloudConfig</p>
<h4 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h4><p>暂略…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-注册中心</title>
    <link href="https://dawell.github.io/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>https://dawell.github.io/2018/08/02/SpringCloud-注册中心/</id>
    <published>2018-08-02T11:29:32.000Z</published>
    <updated>2018-08-17T07:54:41.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li><a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li>【当前文章】<a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h3 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h3><ol>
<li>目前采用最新的1.xRelease版本：1.5.15.RELEASE</li>
<li>SpringCloud项目可以在start.spring.io下载，不过更方便的应该是通过idea新建项目，建立Spring Initializr项目</li>
<li>我一般习惯将具体实现服务用具体的服务名，而公共组件用service-xxx来命名，当然还有一些比较固定名字的公共组件</li>
</ol>
<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>新建artifactId为eureka-service的服务</p>
<h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h4><p>依赖说明</p>
<ol>
<li>actuator用于暴露监控的接口</li>
<li>eureka-server是Eureka服务器的依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3. 编写启动类"></a>3. 编写启动类</h4><p>打开EurekaServiceApplication，在class上加入@EnableEurekaServer注解</p>
<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port=8761</span><br><span class="line">spring.application.name=eureka-service</span><br><span class="line"></span><br><span class="line"># private</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">eureka.client.fetch-registry=false</span><br></pre></td></tr></table></figure>
<p>注册中心默认端口号8761<br>eureka.client.register-with-eureka代表开启自我注册，单机关闭<br>eureka.client.fetch-registry用于开启同步其他Eureka数据，单机关闭</p>
<h4 id="5-启动main"><a href="#5-启动main" class="headerlink" title="5. 启动main"></a>5. 启动main</h4><h4 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 可以看到单台的”System Status”、”DS Replicas”、”Instances currently registered”、”General Info”、”Instance Info”<br>Instance Info的status为UP，说明启动成功</p>
<h3 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h3><p>作为注册中心，是非常关键的服务，几乎所有服务的启动与调用都依赖于注册中心，需要保证注册中心高可用，所以Eureka一般配置为集群模式</p>
<p>如果不清楚在同一个工程中如何启动2种不同配置的服务器，请观看文章：<a href="">idea中同项目不同端口与配置启动多个步骤</a></p>
<h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h4><p>配置2个server，server1使用端口8761，server2使用端口8762</p>
<p>server1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=8761</span><br><span class="line">spring.application.name=eureka-service</span><br><span class="line"></span><br><span class="line"># private</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:8762/eureka</span><br></pre></td></tr></table></figure></p>
<p>server2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=8762</span><br><span class="line">spring.application.name=eureka-service</span><br><span class="line"></span><br><span class="line"># private</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:8761/eureka</span><br></pre></td></tr></table></figure></p>
<p>如果超过2台的集群怎么配置？</p>
<ol>
<li>defaultZone可以配置多个用”,”隔开，其实链接其中一个就能整个集群链接同步，不过一般担心某一台出现问题，还是配置多台</li>
</ol>
<h4 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h4><p>启动server1<br>启动server2</p>
<h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h4><p>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到”Instances currently registered”中EUREKA-SERVICE的UP是2个<br><a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a> 看到”Instances currently registered”中EUREKA-SERVICE的UP是2个</p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-开启注解"><a href="#2-开启注解" class="headerlink" title="2. 开启注解"></a>2. 开启注解</h4><p>启动类+@EnableEurekaClient</p>
<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h4><p>eureka.client.serviceUrl.defaultZone的默认值是 <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></p>
<p>基于以上集群可以配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=xxx-service</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka</span><br></pre></td></tr></table></figure>
<p>注意事项</p>
<ol>
<li>/eureka这个必须加上，否则是注册不上去的</li>
<li>spring.application.name是必须设置的，用于标识注册中心中服务的名称</li>
</ol>
<h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p>为什么客户端也需要配置2台，配置1台可以么？<br>可以配置一台。如果之前已经注册过server1了，会同步给server2，即使server1挂了，注册上的服务依然可以通过server2路由到<br>但是如果server1挂了，则后续只指定server1的client就无法启动成功，无法注册到Eureka上，所以为了启动注册的高可用需要配置多台</p>
<ol>
<li>优化：后续公共配置可以抽离到配置中心中，避免修改不同步问题，后续配置中心章节会讲</li>
</ol>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>spring.application.name 不能包含下划线，因为在eureka中java.net.URI不能区分下划线，否则在进行服务调用的时候报错（host name may not be null）；</li>
<li>注意eureka的Maven坐标发布过2种命名方式，其中一种已经废弃，使用最新版的命名可以保证后续更新（明确了客户端与服务器依赖，与公司名称）<ol>
<li>历史上的废弃版本：spring-cloud-starter-eureka与spring-cloud-starter-eureka-server</li>
<li>最新版本命名：spring-cloud-starter-netflix-eureka-client与spring-cloud-starter-netflix-eureka-server</li>
</ol>
</li>
</ol>
<h3 id="SpringCloud注册中心抽象层"><a href="#SpringCloud注册中心抽象层" class="headerlink" title="SpringCloud注册中心抽象层"></a>SpringCloud注册中心抽象层</h3><p>目前用到的注解都是@EnableEurekaClient，@EnableEurekaServer，而且配置都是eureka开头的，耦合了Eureka<br>其实为了方便替换注册中心实现，或者规范配置中心，SpringCloud针对多种实现提供一个抽象层，提供了通用的注解与配置，Eureka也是其中的一种实现而已</p>
<h4 id="抽象层配置"><a href="#抽象层配置" class="headerlink" title="抽象层配置"></a>抽象层配置</h4><p>主要防止客户端的强依赖，所以只提供了客户端的注解，服务端直接就是具体的注册中心实现<br>客户端注解：@EnableDiscoveryClient<br>客户端配置：略…</p>
<h3 id="其他注册中心"><a href="#其他注册中心" class="headerlink" title="其他注册中心"></a>其他注册中心</h3><p>目前业界有Consul、Zookeeper、etcd等实现方案，这里列举常用的2种</p>
<h3 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h3><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4><p>下载consul启动，server.port=8503，spring.cloud.consul.host=127.0.0.1，spring.cloud.consul.port=8500 #设置不需要注册到 consul 中spring.cloud.consul.discovery.register=false 消费端可以不注册<br>    服务器：spring-boot-starter-actuator + spring-cloud-starter-consul-discovery + @EnableDiscoveryClient spring.cloud.consul.host spring.cloud.consul.port=8500  spring.cloud.consul.discovery.serviceName=service-producer</p>
<h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>dependencys:spring-cloud-zookeeper-dependencies + spring-cloud-zookeeper-discovery + Apache Curator + Zookeeper Java Client + @EnableDiscoveryClient：自动连接 <a href="http://localhost:2181" target="_blank" rel="noopener">http://localhost:2181</a> 的注册中心（zookeeper.connectString）<br>    服务器：zookeeper集群</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringCloud文章系列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://dawell.github.io/2018/08/01/SpringCloud/"/>
    <id>https://dawell.github.io/2018/08/01/SpringCloud/</id>
    <published>2018-08-01T08:11:31.000Z</published>
    <updated>2018-08-17T07:54:41.460Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始介绍了业界比较火的SpringCloud生态</p>
<h1 id="SpringCloud文章系列"><a href="#SpringCloud文章系列" class="headerlink" title="SpringCloud文章系列"></a>SpringCloud文章系列</h1><ol>
<li>【当前文章】<a href="http://dawell.cc/2018/08/01/SpringCloud/" target="_blank" rel="noopener">SpringCloud</a></li>
<li><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-注册中心</a></li>
<li><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">SpringCloud-配置中心</a></li>
<li><a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">SpringCloud-链路跟踪</a></li>
<li><a href="http://dawell.cc/2018/08/05/SpringCloud-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/" target="_blank" rel="noopener">SpringCloud-消息总线</a></li>
<li><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">SpringCloud-API网关</a></li>
<li><a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">SpringCloud-异步消息</a></li>
<li><a href="http://dawell.cc/2018/08/08/SpringCloud-%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">SpringCloud-同步调用</a></li>
<li><a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">SpringCloud-断路降级</a></li>
<li><a href="http://dawell.cc/2018/08/10/SpringCloud-%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">SpringCloud-监控管理</a></li>
<li><a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">SpringCloud-番外篇-临时任务</a></li>
<li><a href="http://dawell.cc/2018/08/12/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/" target="_blank" rel="noopener">SpringCloud-番外篇-文档生成</a></li>
<li><a href="http://dawell.cc/2018/08/13/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">SpringCloud-番外篇-源码解析</a></li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>所有演示代码都已经公开到github中<br><a href="https://github.com/Dawell/springcloud-demo" target="_blank" rel="noopener">点我查看</a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们登录 <a href="https://spring.io" target="_blank" rel="noopener">https://spring.io</a> 可以看到Spring的发展计划了<br><img src="https://images.gitee.com/uploads/images/2018/0802/161451_98cf806f_697510.png" alt="Spring官网" title="Spring官网"></p>
<p>可以看到现在Spring主推3个东西：SpringBoot（构造一切）、SpringCloud（协调一切）、SpringCloudDataFlow（链接一切SpringXD，类似编排与管道处理）<br>在整个Java生态中，从开发工具集成—大规模分布式业务处理集成—走向大数据处理，生态在逐步扩大，而且可能是仅次于Java规范标准的开发标准了</p>
<p>Java程序员中应该都知道并且用过Spring框架去开发项目</p>
<h2 id="回顾下整个Spring的发展"><a href="#回顾下整个Spring的发展" class="headerlink" title="回顾下整个Spring的发展"></a>回顾下整个Spring的发展</h2><p>Spring创始人：Rod Johnson，Spring本身是免费的，主要靠培训与付费咨询赚钱<br>Spring公司叫做SpringSource，2009年被VMware收购，Rod用这个钱又收购了一批公司，其中有GemStone，12年12306挂掉的时候进行了17种技术选型PK，最终选择了他们家的Pivotal GemFire 分布式解决方案，去掉小型机用x86机器耗时减少75倍以上<br>后来VMare与EMC等公司成立Privotal，发展大数据技术，诞生了SpringBoot、SpringCloud等技术，可以看到未来大数据领域逐步会发展起来</p>
<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>2004年发布了Spring，2006发布2.0，2007年发布2.5，2009年发布3.0，2013年发布4.0，2017年发布了5.0</p>
<ol>
<li>Spring2个特性：IOC（依赖注入）与AOP（面向切面编程）</li>
<li>遵循Spring设计可以保持良好的设计与扩展能力，Spring里帮你实现了常用的设计模式，按照规范开发可以天然的实现解耦与扩展能力</li>
<li>可以快速标准的接入Java生态中的各种功能组件，因为他们都对Spring进行了支持，需要什么就加对应的依赖+bean配置+参数配置，然后注入使用</li>
<li>Spring的缺点：就是配置很多，接入什么组件都需要去找标准的使用配置方式粘贴过来改改，大项目要拆分出一大堆xml配置，后来虽然推出了JavaConfig方式也依然有较多配置</li>
<li>目前3已经停止维护，4与5在维护，5是目前的重点</li>
</ol>
<h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>在Spring1.0就有SpringMVC，最初自己的MVC是基于bean配置的，2007年2.5发布时推出了注解式的SpringMVC编写，在2009年Spring推出3.x之后加入Restful支持，SpringMVC逐渐出名，后面逐步干掉了Struts1+Struts2（WebWork）</p>
<ol>
<li>与Spring框架的浑然一体</li>
<li>基于注解处理请求，大多提高了开发效率，对Restful规范支持的比较好</li>
<li>Struts非常臃肿，SpringMVC简单，开发效率高</li>
<li>相比Struts安全性较高（Struts各种安全漏洞助攻SpringMVC的发展）</li>
</ol>
<h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>2014年推出了SpringBoot框架，2018年推出了2.0（基于Spring5）</p>
<ol>
<li>提升了开发效率，遵守约定大于配置的原则，遵循82原则，80%配置一般都是不需要自定义的，同时统一了依赖版本号</li>
<li>解决了配置多的问题，提供AutoConfig的机制自动加载默认配置，可以按照条件自动替换bean实现，自动加载新的bean功能，依赖各种Starter使得扩展功能开箱即用</li>
<li>web项目简化了容器如tomcat的集成，可以直接main启动，这不仅仅是因为方便，还因为一个更大的计划：基于Spring5的SpringBoot2.x版本还想用WebFlux干掉Servlet规范=。=</li>
<li>提供了Actuator工具，标准化监控的指标</li>
</ol>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p>2014年推出了SpringCloud生态工具集，17年E版本与SpringBoot1.4达到最佳，F版本对应SpringBoot2.x（SpringBoot与SpringCloud双子星发展）</p>
<ol>
<li>跟进业界流程的微服务的设计理念提供了一整套的微服务配套服务的标准抽象，提供中间件、分布式工具、监控3个分布式系统需要的能力，给大部分分布式系统的问题提供了能落地的解决方案</li>
<li>联合Netflix公司与业界开源实现，推出了现成的技术实现，目前的技术选型中立，也可以基于标准适配其他分布式组件</li>
<li>提供了各种云服务平台的集成，AWS，CloudFoundry等平台的集成</li>
</ol>
<h1 id="SpringCloud包含什么"><a href="#SpringCloud包含什么" class="headerlink" title="SpringCloud包含什么"></a>SpringCloud包含什么</h1><p>SpringCloud可以说是基于SpringBoot的一套生态，定义了一些抽象层与标准，具体的实现可以是开源的方案，不单单是Spring自己实现的<br>所以可以看到SpringCloud每次推出版本号不是基于数字的（”大版本不兼容.新功能版本.bug修复小版本”，如3.4.12.RELEASE），而是基于名字来代表一套组件的<br><img src="https://images.gitee.com/uploads/images/2018/0802/172548_35b0381d_697510.png" alt="SpringCloud版本" title="SpringCloud版本 目前维护E、F，而D不再升级"><br>名字是基于伦敦的地铁站名字命名，每个大版本命名就是根据ABCDEF等字母顺序排列，后面的SRx就是第几个功能升级版本，从Finchley开始，基于SpringBoot2.x版本开发了，不过现在业界大多用的都是1.x</p>
<h2 id="SpringCloud基于以下组件"><a href="#SpringCloud基于以下组件" class="headerlink" title="SpringCloud基于以下组件"></a>SpringCloud基于以下组件</h2><h3 id="中间件类："><a href="#中间件类：" class="headerlink" title="中间件类："></a>中间件类：</h3><ol>
<li>Spring Cloud Netflix Eureka</li>
<li>Spring Cloud Consul</li>
<li>Spring Cloud Zookeeper</li>
<li>Spring Cloud Config</li>
<li>Spring Cloud Bus</li>
<li>Spring Cloud Netflix Zuul</li>
<li>Spring Cloud Gateway</li>
<li>Spring Cloud Task</li>
<li>Spring Cloud Stream</li>
<li>Spring Cloud Dataflow</li>
</ol>
<h3 id="工具类："><a href="#工具类：" class="headerlink" title="工具类："></a>工具类：</h3><ol>
<li>Spring Cloud Netflix Hystrix</li>
<li>Spring Cloud Cluster</li>
<li>Spring Cloud Security</li>
<li>Feigon</li>
<li>Ribbon</li>
</ol>
<h3 id="监控类："><a href="#监控类：" class="headerlink" title="监控类："></a>监控类：</h3><ol>
<li>Spring Cloud Sleuth</li>
<li>Spring Cloud Turbine</li>
<li>Spring Boot Actuator</li>
<li>Spring Boot Admin</li>
</ol>
<h3 id="云服务类："><a href="#云服务类：" class="headerlink" title="云服务类："></a>云服务类：</h3><ol>
<li>Spring Cloud for Cloud Foundry</li>
<li>Spring Cloud for Amazon Web Services（AWS）</li>
</ol>
<p>这些服务一会都会介绍下作用，在介绍之前我们要先了解下分布式系统中的问题，为什么需要这么多组件？</p>
<h1 id="分布式系统的问题"><a href="#分布式系统的问题" class="headerlink" title="分布式系统的问题"></a>分布式系统的问题</h1><p>分布式系统面临着很多问题要解决，那为什么一定是分布式的呢？微服务架构与SOA有啥区别？分布式系统为啥问题这么多，我们怎么解决？这里将会逐步展开说明</p>
<h2 id="服务架构的演化"><a href="#服务架构的演化" class="headerlink" title="服务架构的演化"></a>服务架构的演化</h2><p>不同的阶段与公司的发展阶段有关，服务架构都是逐步进化而来<br>在架构升级的过程中中间的2种架构形态没必要去经历，针对中小型企业建议最初单体应用不能满足时直接升级到微服务架构中来，不过这需要一个拆分迁移的过程</p>
<h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p>单体应用就是所有业务逻辑与实现都在同一个工程中<br><img src="https://images.gitee.com/uploads/images/2018/0802/212545_8c4945f9_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>单体应用适用于企业早期，人少业务少的情况下，为了专注于业务逻辑与分工代价，一个人负责全部或者一大堆业务开发时，这种方式简单高效<br>但是随着企业发展，业务多样人员增多时，单体的缺点逐步暴露出来</p>
<p>单体应用缺点</p>
<ol>
<li>复杂性高：难以维护，耦合，依赖多个jar</li>
<li>技术债务：不坏不修，所以遗留问题多，错误的调用也多了</li>
<li>发布频率不一样：提高风险，发布慢</li>
<li>扩展能力不一样：有CPU密集与IO型，耦合一起</li>
<li>稳定性，任何一个bug都会导致整个服务挂</li>
<li>阻止创新：比如Struts的无法升级SpringMVC</li>
</ol>
<h3 id="垂直应用"><a href="#垂直应用" class="headerlink" title="垂直应用"></a>垂直应用</h3><p>垂直应用架构就是不同的业务进行了拆分，比如理财业务、信贷业务、电商业务，但是数据库都还用一套，而且公共的模块比如用户中心、短信发送等功能都用jar来共享的方式减少重复代码<br><img src="https://images.gitee.com/uploads/images/2018/0802/212600_d9ef67dc_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>这种服务中过去就都用SSH框架或者SSM框架去开发，然后nginx配置个域名或者挂到同域不同path下就完事了</p>
<h3 id="服务化架构（如SOA）"><a href="#服务化架构（如SOA）" class="headerlink" title="服务化架构（如SOA）"></a>服务化架构（如SOA）</h3><p>随着业务进一步发展，发现有很多公共的服务jar也无法满足了，每次升级jar都需要把依赖的服务全部重启升级，而且无法做到松耦合高内聚，jar内功能的使用情况未知<br>而且不止jar共享，业务线之间也需要相互调用，而且一个业务线服务为了把相对不变的服务层与变化多端的MVC逻辑拆分开希望改为远程调用<br>这时候引入一种合适的远程调用方式而且又能高效与适配是最好了，所以诞生了很多这种框架，如java体系的dubboRPC，Thift，WebServiceSOAP、SOA的解决方案<br>SOA这个就非常重了，通信方式比较麻烦，引入了ESB企业服务总线的设计，服务通信都需要走ESB，这一层还有很多业务聚合逻辑，非常复杂<br>dubbo相对是非常好的框架了，dubbo在2012年开源到SpringCloud火之前，很多企业使用dubbo进行了服务化改造<br><img src="https://images.gitee.com/uploads/images/2018/0802/212635_44f57d55_697510.png" alt="输入图片说明" title="屏幕截图.png"><br>于是最终像用户中心、通知中心、订单中心、库存中心这类公共的服务不再是jar包，而升级为了独立部署的服务，逐步做大发展为后期的大中台小前台结构</p>
<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>其实服务化架构下已经非常的可靠了，基本满足了企业架构的要求，不过服务之间还会有很多影响，没有做到完全的独立，比如服务实例几个部署在同机器，数据库还是共用一个库<br>而且因为服务化架构很多服务的调用拆分没有特定的指导原则导致一些链路超级长的拆分模式如：跟进控制器-服务-数据库3层模式拆分为3个服务，一次请求就要经历至少2次RPC调用<br>在微服务的设计中提倡垂直业务线聚合一个业务逻辑，保持业务的服务层与数据访问层在一起，减少横向拆分，进行竖向的业务拆分，而且保持一个数据库只被一个微服务使用，做到数据库层面的隔离<br>除此之外部署最好也是完全隔离的，不但是一个tomcat只部署一个web网站，而且一台机器最好只部署一个服务，当然实际可以使用虚拟化技术如VM虚拟机与docker技术去隔离，docker与微服务目前是最佳搭档<br>在SOA中有很多中心化的设计，如ESB，服务编排各种链路上的调用a依赖b，b依赖c，c依赖d，而在微服务中希望有一个总调度改为a调用b、c、d这种模式，减少链路<br>同时并不提倡使用分布式事务，而是采用一些最终一致性的解决方案去正面迎击分布式问题<br>微服务希望调用之间的协议保持轻量，而且具备跨语言通用性，推荐使用RestfulHTTP通信<br><img src="" alt="图片"><br>所以微服务其实更像是基于服务化架构之上教你怎么去设计服务拆分的原则，更像是一个不包含某些功能的SOA架构<br>所以服务化中的很多问题的解决方案，微服务是直接继承的，本质上都是分布式系统中的一些问题，所以接下来聊一下分布式系统中的问题怎么解决</p>
<h2 id="微服务架构下的分布式系统问题"><a href="#微服务架构下的分布式系统问题" class="headerlink" title="微服务架构下的分布式系统问题"></a>微服务架构下的分布式系统问题</h2><p>分布式下的应用失去了很多单体应用的优势，比如在内存中方法直接的调用变为了远程网络的调用，水平扩展后服务实例变多如何做路由如何在服务挂了的时候感知到<br>微服务分布式下独立多个DB如何保证事务性，外部服务如何调用内部服务呢？接下来进一步讨论</p>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>其实在单体普通的方法调用直接就可以区分出几种类型同样适用于网络中的场景<br>参考单体方法调用，网络通信按照大类分为同步、异步的方式，同时有的请求需要返回值，有的则不需要，而异步请求还存在一对多的情况，所以排列组合就有了几种模式</p>
<p>不同服务主机通过网络进行通信的几种模式</p>
<ol>
<li>同步需要返回值：请求/响应模式：HTTP请求</li>
<li>同步不需要返回值：通知模式：dubbo oneWay模式</li>
<li>异步单调用需要返回值：请求/异步响应模式：nio与netty（相当于）、aio、CompletableFuture与RxJava类似的网络异步通信模式</li>
<li>异步单调用不需要返回值：异步通知模式</li>
<li>异步多调用需要返回值：发布/异步相应模式</li>
<li>异步多调用不需要返回值：发布/订阅模式：消息队列</li>
</ol>
<p>基于服务开发的难度与模型的复杂度，一般开发常用到的是同步使用”请求/响应模式”与异步使用”发布/订阅模式”<br>在微服务中针对同步调用一般使用HTTPRestful请求服务，因为远程调用，所以这里会涉及注册发现的机制<br>异步一般使用消息中间件来请求服务</p>
<h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><p>由于微服务拆分了，所以事务去掉了，改为了最终一致性，所以一般设计为事件驱动模式，所有的业务事件发生后发布订阅模式通知另一个业务，而另一个业务再通过事件回执调用方结果<br>如果中间业务不通则调用方要进行处理，所以出现了很多中间态的设计，而且如果是同步模型，则可能会调用失败，则需要状态位维护一致性，则消费方要可支持重试</p>
<p>基于”发布/订阅模式”演化出了基于事件驱动的架构模式，所有的服务间通信都使用异步消息的模式请求与响应，同时业务场景中要多出各种中间态展示给用户<br>比如下单服务：因为订单能不能下成功取决于最终一致性请求所有依赖服务（用户额度、库存、物流）都回执ok后才能算作成功，否则只能取消该订单，当然在下单之前会进行各种同步查询检查，只是在检查通过最终执行时需要等待所有状态位都变为有效才能算作成功<br>这里还会引发另一个问题：如何保证我做完业务操作后发送消息队列一定是成功的，假设中间中断了呢？一旦中断则会造成最终的数据不一致<br>所以一种是通过本地事务队列，还有通过事务日志与db更新日志去扫描请求队列，当然还有一种就是常用的通过db中保存状态位+补偿定时任务去做这种错误情况的处理了</p>
<h3 id="注册与发现"><a href="#注册与发现" class="headerlink" title="注册与发现"></a>注册与发现</h3><p>在微服务中客户端调用服务端，最简单的模式我是可以直接写死对方的地址去调用的<br><img src="" alt="图"><br>但是如果服务端水平扩展了多条机器，我就要在调用端写多台了，如果调用端也有多台，而运行时服务端加减任何机器都要修改所有的请求地址就很难处理了</p>
<p>所以这时候需要采用一种方式避免这个问题，最终目的是客户端只要写死一个固定的地址or名字，每次请求的时候就能请求到真实的地址了<br>我可以在请求之前查找地址然后请求或者我请求一个代理的地址，所以服务发现有2种模式</p>
<ol>
<li>客户端发现：就是客户端主动查询注册表然后负载均衡请求一个端，缺点是不同的端都有这个逻辑，需要依赖一个client端，如Eureka、zk</li>
<li>服务端发现：类似nginx，nginx来做注册表与负载请求，缺点是需要保证nginx的高可用，类似的还有consul</li>
</ol>
<p><img src="https://images.gitee.com/uploads/images/2018/0803/102309_fa3f9424_697510.png" alt="输入图片说明" title="基于客户端发现的发现方式"></p>
<p>哪些服务可以用需要使用服务发现的技术<br>服务注册有2种模式</p>
<ol>
<li>自注册，自注册就是自己启动就自己去注册注册表，缺点是这个逻辑每个端都要写，同样需要依赖一个client端，如Eureka、zk</li>
<li>第三方注册，类似consul，consul主动与应用心跳，然后传播给consul的注册表，缺点是需要保证consul高可用</li>
</ol>
<p>综合2种主要看你运行的环境是否具备发现与负载能力，有的云平台本身提供了这种能力如：kubernetes，可以自注册与路由服务，则可以用第二种模式<br>否则发现机制与注册机制都耦合一个统一的客户端也可以接受，这个客户端可以同时做这2个事情<br>目前dubbo也是基于客户端发现与自注册的模式去设计的<br>同时客户端发现与自注册还可以结合软负载做注册表没有及时更新的重路由请求，建议在没有强大的运维能力与云平台的支持下都采用这种设计，可以减少对环境的依赖，更具通用性，同时减少了链路的长度</p>
<h3 id="服务的适配与屏蔽—API网关"><a href="#服务的适配与屏蔽—API网关" class="headerlink" title="服务的适配与屏蔽—API网关"></a>服务的适配与屏蔽—API网关</h3><p>API网关的作用一般用于做外部系统到内部系统转换的中间层，可以提供统一的服务端的公共功能，那这个东西为什么一定要统一到一个中间层呢？</p>
<p>假设一个客户端要展示一个产品页面，上面有商品、用户、订单、评价、推荐等等需要集成8个微服务的接口调用<br>如果客户端直接调用8个服务端的微服务也可以实现，比如在nginx配置暴露同一个api.company.com/xxx/客户端发Rest调用到后端，请求8个微服务接口，但是会有几个缺点</p>
<ol>
<li>网络请求太多，客户端需求与服务暴露粒度不匹配</li>
<li>技术实现不一样，有些面向二进制RPC对浏览器与防火墙不友好</li>
<li>关注细节，难以重构，后续合并拆分客户端无法改动</li>
</ol>
<p>API网关：设计模式中的门面模式：网关封装内部系统的架构，并且提供 API 给各个客户端。它还可能还具备授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等功能</p>
<ol>
<li>优点：使用 API 网关的最大优点是，它封装了应用程序的内部结构</li>
<li>缺点；API 网关也有一些不足。它增加了一个我们必须开发、部署和维护的高可用组件。还有一个风险是，API 网关变成了开发瓶颈，所以必须足够简单！</li>
</ol>
<p>一般针对大型互联网公司会有多套API网关，比如针对web端、APP端，还有开放平台端，APP端可能会有额外加密通信的逻辑，开放平台端会限制外部第三方的接口调用与计费<br>有的API网关直接使用nginx与插件去实现，不过nginx不太适合加太多扩展功能，更适合做静态分离，而在nginx后端的API网关可以负责更多职责<br>所以推荐是如下的架构模式<br><img src="" alt="图"></p>
<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>因为微服务众多，过去一次请求响应的过程会经过很多服务处理，如果一次请求失败了，如何才能知道是哪个环节出了问题呢，微服务中的监控非常重要，没有足够的监控手段执行微服务改造后问题将会难以排查<br><img src="https://images.gitee.com/uploads/images/2018/0803/102221_43653bba_697510.png" alt="输入图片说明" title="复杂的都动态调用关系"><br>监控一般分为几种</p>
<ol>
<li>机器状态的监控</li>
<li>服务状态的监控：自身依赖的状态，降级的触发</li>
<li>业务监控</li>
<li>链路追踪</li>
</ol>
<p>分布式中主要解决链路追踪的问题<br>现今业界分布式服务跟踪的理论基础主要来自于 Google 的一篇论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》，使用最为广泛的开源实现是 Twitter 的 Zipkin，为了实现平台无关、厂商无关的分布式服务跟踪，CNCF 发布了布式服务跟踪标准 Open Tracing。<br>国内，淘宝的“鹰眼”、京东的“Hydra”、大众点评的“CAT”、新浪的“Watchman”、唯品会的“Microscope”、窝窝网的“Tracing”都是这样的系统。<br><img src="https://images.gitee.com/uploads/images/2018/0803/111737_9c660718_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>服务追踪的追踪单元是从客户发起请求（request）抵达被追踪系统的边界开始，到被追踪系统向客户返回响应（response）为止的过程，称为一个“trace”。每个 trace 中会调用若干个服务，为了记录调用了哪些服务，以及每次调用的消耗时间等信息，在每次调用服务时，埋入一个调用记录，称为一个“span”。这样，若干个有序的 span 就组成了一个 trace。在系统向外界提供服务的过程中，会不断地有请求和响应发生，也就会不断生成 trace，把这些带有span 的 trace 记录下来，就可以描绘出一幅系统的服务拓扑图。附带上 span 中的响应时间，以及请求成功与否等信息，就可以在发生问题的时候，找到异常的服务；根据历史数据，还可以从系统整体层面分析出哪里性能差，定位性能优化的目标。</p>
<h1 id="SpringCloud组件介绍"><a href="#SpringCloud组件介绍" class="headerlink" title="SpringCloud组件介绍"></a>SpringCloud组件介绍</h1><p>SpringCloud里有很多组件，我简单的将其分成4类，相对独立部署的组件叫做”中间件”，嵌入到服务中的组件叫做”工具类”，与监控有关的属于”监控类”，剩余组件属于”其他”</p>
<p>Spring项目可以使用<a href="http://start.spring.io脚手架生成项目，非常方便" target="_blank" rel="noopener">http://start.spring.io脚手架生成项目，非常方便</a></p>
<p>SpringCloud中为了区别应用业务配置独立了bootstrap.properties文件，独立的BootstrapContext，与application.properties共存，并且bootstrap要比application优先级高<br>并且很多SpringCloud组件的配置必须配置在bootstrap中才生效，如配置中心的git path地址</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件基本可以概括为3类：服务注册配置管理、API网关、异步处理</p>
<ol>
<li>服务注册配置管理：解决分布式系统中的”注册与发现”问题，同时”配置中心”作为分布式系统的一种标配与注册中心形成一对搭档</li>
<li>API网关：解决分布式系统中的”服务的适配与屏蔽”问题</li>
<li>异步处理：在前面章节中我们介绍过”进程间通信”，微服务领域之间是松耦合的，所以分布式中很多逻辑都是异步在处理，比如异步通知，定时任务与聚合计算处理</li>
</ol>
<h3 id="服务注册配置管理"><a href="#服务注册配置管理" class="headerlink" title="服务注册配置管理"></a>服务注册配置管理</h3><h4 id="SpringCloud组件"><a href="#SpringCloud组件" class="headerlink" title="SpringCloud组件"></a>SpringCloud组件</h4><ol>
<li>Spring Cloud Netflix Eureka</li>
<li>Spring Cloud Consul</li>
<li>Spring Cloud Zookeeper</li>
<li>Spring Cloud Config</li>
<li>Spring Cloud Bus</li>
</ol>
<h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><p>Eureka、Consul、Zookeeper都是注册中心的解决方案</p>
<ol>
<li>SpringCloud层提供了一个注册中心的抽象层，具体的第三方组件可以作为这层抽象层的一种具体的实现，提供了一套基于注解的注册发现功能</li>
<li>Eureka是SpringCloud首推的注册中心，基于客户端发现与自注册模型，对SC体系支持性最好，属于Netflix公司的开源实现，其没有实现配置中心的功能，需要额外的配置中心组建配合，可以使用SpringCloudConfig组合<ol>
<li>Eureka在CAP中属于AP，牺牲了一致性，保证了可用性，所以其注册过程中只要1台注册成功就可以发现到，注册过程比较快，但是多台Eureka可能数据不一致</li>
<li>本质上A其实也不是完全保证的，Eureka的数据是存储在内存中，重启会丢失，相对没有zk可靠</li>
<li>目前大多用的1.x，而2.x近期Netflix公司选择了闭源，所以目前不推荐使用</li>
</ol>
</li>
<li>Consul基于Go语言编写，基于服务端发现与第三方注册模型，基于CP，使用raft算法，比zk的paiox算法要快，在SC体系中也有不错的支持，有支持配置中心的功能<ol>
<li>不过目前跟进大厂经验，consul的节点线上部署最好不要超过3000个，所以大规模使用需要谨慎</li>
</ol>
</li>
<li>Zookeeper是基于CP的，采用paixos算法，至少部署3台，只有超过半数机器同步成功后才认为注册成功，所以注册时间会长一些。zk支持配置存储，所以也支持配置中心功能<ol>
<li>老牌的注册中心了，起初在大数据领域诞生使用，后面dubbo的注册中心一般也使用zk<br>注册中心这3种其实都是不错的选择，具体的选择一般看社区的活跃支持程度与公司运维的熟悉程度，目前比较推荐的还是使用Zookeeper作为配置中心</li>
</ol>
</li>
</ol>
<h4 id="注册中心-使用"><a href="#注册中心-使用" class="headerlink" title="注册中心-使用"></a>注册中心-使用</h4><p><a href="http://dawell.cc/2018/08/02/SpringCloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">点我阅读</a></p>
<h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><p>Config是配置中心的解决方案</p>
<ol>
<li>目前在3套注册中心中只有Eureka不具备配置中心的功能，所以可以使用SpringCloud提供的配置中心</li>
<li>Config与Spring中的Environment与PropertySource抽象相同，配置存储在git中</li>
<li>配置中心不但在服务启动时去提供配置，配置是可以进行更改的，而更改之后需要通知到所有依赖此配置的服务实例，这时候就需要SpringCloudBus来支持了<ol>
<li>Bus：消息总线，通知一般要通知多台主机，所以一般是异步的，如果想通知所有的服务从哪里得知呢？当然在注册中心中可以获得，所以Bus是通过注册中心get到需要通知服务的所有实例，然后异步调用所有实例的接口</li>
<li>Bus一般目前支持RabbitMQ来实现</li>
</ol>
</li>
</ol>
<h4 id="配置中心-使用"><a href="#配置中心-使用" class="headerlink" title="配置中心-使用"></a>配置中心-使用</h4><p><a href="http://dawell.cc/2018/08/03/SpringCloud-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/" target="_blank" rel="noopener">点我阅读</a></p>
<h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><h4 id="SpringCloud组件-1"><a href="#SpringCloud组件-1" class="headerlink" title="SpringCloud组件"></a>SpringCloud组件</h4><ol>
<li>Spring Cloud Netflix Zuul</li>
<li>Spring Cloud Gateway</li>
</ol>
<h4 id="API网关-1"><a href="#API网关-1" class="headerlink" title="API网关"></a>API网关</h4><ol>
<li>Zuul是集成了Netflix公司的开源组件</li>
<li>Gateway可以说是SC的亲儿子，比起Zuul干儿子肯定会是未来的一个趋势，虽然SC技术选型中立，不过自身的实现的支持性是最好的</li>
</ol>
<h4 id="API网关-使用"><a href="#API网关-使用" class="headerlink" title="API网关-使用"></a>API网关-使用</h4><p><a href="http://dawell.cc/2018/08/06/SpringCloud-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">点我阅读</a></p>
<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><h4 id="SpringCloud组件-2"><a href="#SpringCloud组件-2" class="headerlink" title="SpringCloud组件"></a>SpringCloud组件</h4><ol>
<li>Spring Cloud Task</li>
<li>Spring Cloud Stream</li>
<li>Spring Cloud Dataflow</li>
</ol>
<h4 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h4><p>一般一个服务实例都有多个，如果要写个定时任务可以有3种方式</p>
<ol>
<li>每个实例对等都启动，同时加一把锁保证实际只有1个在执行</li>
<li>只有一个实例启动时配置开启定时任务，其他实例不开启</li>
<li>独立调度的触发逻辑，需要调度时使用负载均衡算法去请求一个服务实例<br>在分布式系统中第三种才是通用做法，Task就是做定时任务（又叫短命任务）的触发逻辑的</li>
</ol>
<p>使用<a href="http://dawell.cc/2018/08/11/SpringCloud-%E7%95%AA%E5%A4%96%E7%AF%87-%E4%B8%B4%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">点我阅读</a></p>
<h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>使用<a href="http://dawell.cc/2018/08/07/SpringCloud-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/" target="_blank" rel="noopener">点我阅读</a></p>
<h4 id="大数据聚类处理"><a href="#大数据聚类处理" class="headerlink" title="大数据聚类处理"></a>大数据聚类处理</h4><p>SpringCloudDataflow</p>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="SpringCloud组件："><a href="#SpringCloud组件：" class="headerlink" title="SpringCloud组件："></a>SpringCloud组件：</h3><ol>
<li>Spring Cloud Netflix Hystrix：降级限流 <a href="http://dawell.cc/2018/08/09/SpringCloud-%E6%96%AD%E8%B7%AF%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">点我阅读</a></li>
<li>Spring Cloud Cluster：选举，锁</li>
<li>Spring Cloud Security：安全</li>
</ol>
<h2 id="监控类"><a href="#监控类" class="headerlink" title="监控类"></a>监控类</h2><h3 id="SpringCloud组件：-1"><a href="#SpringCloud组件：-1" class="headerlink" title="SpringCloud组件："></a>SpringCloud组件：</h3><ol>
<li>Spring Cloud Sleuth</li>
<li>Spring Cloud Turbine</li>
<li>Spring Boot Actuator</li>
<li>Spring Boot Admin</li>
</ol>
<h3 id="监控-1"><a href="#监控-1" class="headerlink" title="监控"></a>监控</h3><ol>
<li>Sleuth是链路追踪平台 <a href="http://dawell.cc/2018/08/04/SpringCloud-%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/" target="_blank" rel="noopener">点我阅读</a></li>
<li>Turbine是属于Hystrix的监控聚合平台，可以聚合在一起看所以服务的断路器状态</li>
<li>Actuator是SpringBoot中提供的监控Endpoint，通过访问/xxx的urlpath可以看到服务的机器、服务、依赖、日志等数据，而admin则是针对这些数据接口做一个友好的展示平台</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>微服务的配套还是比较齐全的，包括了如何测试、如何继承各种云平台、如何连接各种第三方组件都有考虑</p>
<h3 id="云服务类：-1"><a href="#云服务类：-1" class="headerlink" title="云服务类："></a>云服务类：</h3><h4 id="SpringCloud组件：-2"><a href="#SpringCloud组件：-2" class="headerlink" title="SpringCloud组件："></a>SpringCloud组件：</h4><ol>
<li>Spring Cloud for Cloud Foundry</li>
<li>Spring Cloud for Amazon Web Services（AWS）</li>
</ol>
<h4 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h4><ol>
<li>连接器</li>
<li>测试平台</li>
</ol>
<h1 id="除了SpringCloud其他微服务解决方案"><a href="#除了SpringCloud其他微服务解决方案" class="headerlink" title="除了SpringCloud其他微服务解决方案"></a>除了SpringCloud其他微服务解决方案</h1><p>目前国内除了SC的解决方案，国内也有基于dubbo的方案</p>
<h2 id="基于Dubbo体系的微服务解决方案"><a href="#基于Dubbo体系的微服务解决方案" class="headerlink" title="基于Dubbo体系的微服务解决方案"></a>基于Dubbo体系的微服务解决方案</h2><p>17年底阿里复活了dubbo的开源维护，并且接入了apache项目中，后续还会更好的支持http协议<br>18年又开源了Alibaba Nacos注册发现与配置中心<br>不过总体上如果要搭建一套完整的微服务组件，光有dubbo的这2个组件还不够，还需要其他开源组件or自研组件配合，如果有自己的平台技术团队可以选择支持</p>
<p>一般开源的平台技术实现</p>
<ol>
<li>远程调用：apache dubbo</li>
<li>注册中心+配置中心：alibaba nacos、zookeeper、阿波罗、自研</li>
<li>API网关：nginx+lua、自研</li>
<li>异步任务-调度中心：xxxjob、自研</li>
<li>异步任务-消息组件可以直接使用kafka、rabbitMQ、activeMQ的实现</li>
<li>异步任务-聚合处理：spark、storm、akka</li>
<li>工具-熔断器：alibaba Sentinel</li>
<li>工具-分布式锁：zookeeper、redis</li>
<li>工具-认证：shiro、自研</li>
<li>监控-机器监控：zabbix</li>
<li>监控-日志监控收集：ELK</li>
<li>监控-链路跟踪：zipkin</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>SpringCloud是Spring目前主推的一套微服务生态的治理组件，提供了较全的解决方案，非常适合中小型企业在进行微服务改造时使用</li>
<li>分布式系统带来的问题有多方面，我们重点讲了进程调用、服务发现、API网关与监控主题，针对这些问题有多种解决方案，而这些解决方案在SpringCloud的组件中都有选择</li>
<li>SpringCloud的组件大致分为中间件、工具与监控3大类，中间件中的服务注册配置管理组件应该说是必备组件，而其他组件属于可选组件，按需引入</li>
<li>最后除了SC还有其他的选择，比如DUBBO，提供了微服务必须的服务注册配置管理组件，而其他可选组件则需要采用开源or自研方案，需要一定的整合能力的团队</li>
</ol>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ol>
<li>约定大于配置缺点：有时候你配置了但是不确定有没有用上，可能读取的是默认配置，所以有时候会故意避免默认配置防止配置错误</li>
<li>多个配置文件如果改名了，一定要clean，否则会读到过去的老编译带过去的文件</li>
</ol>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li><a href="https://my.oschina.net/polly/blog/1790057?nocache=1524474258058" target="_blank" rel="noopener">https://my.oschina.net/polly/blog/1790057?nocache=1524474258058</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始介绍了业界比较火的SpringCloud生态&lt;/p&gt;
&lt;h1 id=&quot;SpringCloud文章系列&quot;&gt;&lt;a href=&quot;#SpringCloud文章系列&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud文章系列&quot;&gt;&lt;/a&gt;SpringC
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringCloud" scheme="https://dawell.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>20180701SpringBoot</title>
    <link href="https://dawell.github.io/2018/07/01/SpringBoot/"/>
    <id>https://dawell.github.io/2018/07/01/SpringBoot/</id>
    <published>2018-07-01T08:03:29.000Z</published>
    <updated>2018-08-10T08:10:17.617Z</updated>
    
    <content type="html"><![CDATA[<p>从2015年公司就采用SpringBoot技术，到现在用了3年时间左右了，除了一些零散的经验记录外，一直也没有时间去总结下SpringBoot的功能，最近SpringCloud要火，所以作为SC的前置功课SB先来复习一遍知识点</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2015年公司就采用SpringBoot技术，到现在用了3年时间左右了，除了一些零散的经验记录外，一直也没有时间去总结下SpringBoot的功能，最近SpringCloud要火，所以作为SC的前置功课SB先来复习一遍知识点&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
