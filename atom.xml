<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawell的博客</title>
  <subtitle>我不是一个简单的少年~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dawell.github.io/"/>
  <updated>2017-09-05T02:15:06.087Z</updated>
  <id>https://dawell.github.io/</id>
  
  <author>
    <name>Dawell</name>
    <email>355398356@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户中心</title>
    <link href="https://dawell.github.io/2017/09/04/20170904%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
    <id>https://dawell.github.io/2017/09/04/20170904用户中心/</id>
    <published>2017-09-04T15:30:00.000Z</published>
    <updated>2017-09-05T02:15:06.087Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1504546211663&amp;di=2abfeebbce6670f8442681cf19dead67&amp;imgtype=0&amp;src=http%3A%2F%2Fupload.chinaz.com%2F2016%2F1020%2F201610201727406806.jpg" alt="用户中心"></p>
<h1 id="用户中心导论"><a href="#用户中心导论" class="headerlink" title="用户中心导论"></a>用户中心导论</h1><p>在互联网中，一切都是围绕用户来服务的，为了提供一系列服务，需要在服务中识别自然人个体，所以服务系统中出现了账号的概念来代表自然人，因为现在还不能把自然人通过某种方式直接在服务媒介上识别，所以互联网服务都是在用户想使用服务时引导用户注册一个账号的方式来创建账号。</p>
<ul>
<li>如果不是一系列服务而是一个服务，其实可以让用户直接输入需要填写的信息一次提交进行服务，如：调查问卷</li>
<li>自然人与系统中的账号最好的一一对应关系</li>
</ul>
<h2 id="业务对象（领域对象）"><a href="#业务对象（领域对象）" class="headerlink" title="业务对象（领域对象）"></a>业务对象（领域对象）</h2><p>账号要有唯一性，信息一部分是基本信息，另一部分是扩展的用户信息</p>
<h3 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h3><p>账号在内必须有唯一性，而对用户他不需要非常明确的唯一，只要长久不变的唯一即可</p>
<ul>
<li>对内的账号，会有uid或者userId的概念来代表唯一，不对外暴露</li>
<li>对外的账号会有account来标识唯一，每家公司最account的规则不一样<ul>
<li>微信是用户自己设置的，如果不设置就是空</li>
<li>有的公司会要求必须有账户字段，如果不要求用户输入则自动生成一个账号唯一标识，如 账号xxx</li>
<li>account一旦设置不允许更改</li>
</ul>
</li>
</ul>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>用户注册时的必须信息+个性化信息</p>
<ul>
<li>系统账号信息：uid、account、类型、状态</li>
<li>个人账号信息：手机号、邮箱、昵称、头像、个性化信息</li>
<li>企业账号信息：企业邮箱、代理人手机号、企业图标</li>
</ul>
<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>用户信息是用户自己填写的信息</p>
<ul>
<li>个人不变的自然人信息：姓名、身份证号、性别、生日、教育历史、工作历史、血型、籍贯</li>
<li>个人易变的信息：国籍、学历、当前工作、当前住址、婚姻、收入</li>
<li>企业信息：企业编码、企业名称、法人姓名、企业地址、企业logo</li>
</ul>
<h3 id="账号的分类"><a href="#账号的分类" class="headerlink" title="账号的分类"></a>账号的分类</h3><p>账号在多个系统中都有其存在，所以会有很多种类</p>
<ul>
<li>对外<ul>
<li>通行证个人账号</li>
<li>企业账号</li>
</ul>
</li>
<li>对内<ul>
<li>内部员工账号</li>
<li>外包人员账号</li>
</ul>
</li>
</ul>
<h3 id="账号属性的区别"><a href="#账号属性的区别" class="headerlink" title="账号属性的区别"></a>账号属性的区别</h3><ul>
<li>uid/userid 内部唯一id</li>
<li>account 用户所知的唯一标识</li>
<li>昵称 用户对外的展示名称</li>
</ul>
<h2 id="业务行为（领域行为）"><a href="#业务行为（领域行为）" class="headerlink" title="业务行为（领域行为）"></a>业务行为（领域行为）</h2><p>围绕账号有一系列服务，不过本质要解决的问题是认证、授权与会话。</p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>认证分为2个阶段，首先要创建一个账号，称作“注册”，要进行自然人与服务的映射认证绑定，然后使用这个账号完成认证叫做“登录”。</p>
<p>注册往往需要自然人的唯一性标识，注册认证成功后，用户就可以拿此账号进行登录完成登录认证</p>
<ul>
<li>也可以每次都使用自然人的真实信息认证，在认证的第一次自动完成注册环节。<ul>
<li>因为如果每次认证都使用真实信息会比较麻烦，要让用户输入过多信息，体验不好，所以采用第一种的比较多，比如一般账号都会设置一个密码，下次使用服务，只需要认证账户名+密码即可以完成。</li>
<li>不过现在由于手机验证码方式验证方便出现了登录也使用验证码进行登录的方式。</li>
</ul>
</li>
<li>有的服务为了用户体验，注册完成时就自动登录成功了。</li>
<li>注册时认证最好的信息是自然人中最具有唯一性的标识，比如国内的身份证，国外的驾驶证护照之类信息。而这些信息往往比较长，而且过于隐私，对于用户来说心里门槛高，所以往往可以通过用户的手机号或者邮箱进行认证完成注册认证。<ul>
<li>国内由于手机的普及倾向于使用手机号，而国外倾向于使用邮箱。</li>
<li>支付宝是强金融属性应用，使用身份证号进行注册</li>
<li>银行网银一般通过柜台认证的银行卡或者使用身份证号进行注册</li>
<li>手机号与邮箱都是可变更的，所以用这种方式容易导致用户注册多个账号的情况，为了避免可以在客户端记录上一次登录方式或者服务器记录设备信息对应的登录账号提醒用户</li>
<li>如果是注册or登录的流程，流程中可以在手机号验证后要注册新账号的时候提示用户是否注册或者要登录，这样登录后替换手机号码或者设置</li>
</ul>
</li>
</ul>
<p>认证中有个特别认证方式叫做第三方认证，本质是可信第三方授权+补充认证</p>
<ul>
<li>如果第三方授权后第三方提供的信息足以满足本系统注册要求可直接生成账号并登录</li>
<li>如果不满足一般会在第一次三方授权后要求补充账号认证或账号信息后才能完成注册</li>
</ul>
<h4 id="业务形态"><a href="#业务形态" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>认证前<ul>
<li>注册</li>
<li>登录</li>
<li>通过XXX找回密码</li>
<li>三方登录</li>
<li>完善账号信息</li>
<li>激活验证信息交互</li>
</ul>
</li>
<li>认证后<ul>
<li>修改登录信息</li>
<li>修改三方授权绑定</li>
<li>认证登录记录</li>
</ul>
</li>
</ul>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权在认证之后，如果使用一项服务都需要先进行授权，同时使用一个授权服务往往还需要显示一份使用服务法律协议需用户同意</p>
<ul>
<li>有些场景可以避免授权界面，比如使用一系列的服务时在注册或者登陆的协议中全部写入，即可免授权，不过这种在认证中绑定过多协议的做法可能是不合规的，尤其是金融行业，捆绑授权</li>
<li>比如工具服务中要使用一项P2P服务需要进行授权，支付宝中第一次使用花呗、借呗都需要单独授权同意后</li>
<li>还有一种对外授权，比如你的账号可以提供开放的能力，在其它平台中使用此账号可以登录认证并经过用户授权后把此账号的部分信息提供给第三方使用。</li>
</ul>
<p>对内部账号的授权都是通过权限管理员分配的，所以与前台用户交互流程不一样</p>
<ul>
<li>一般使用RBAC权限模型，即账号-角色-资源，把所有的CRUD操作设置为资源，然后一个角色包含多个资源，一个用户可以分配多个角色，角色相当于资源包的存在</li>
<li>超级管理员一般是不受权限限制的特例</li>
<li>资源的申请尽量自动化，所以一般使用工作流申请</li>
<li>有一种特殊的资源叫做菜单，从而菜单显示也通过权限来控制</li>
<li>资源的管理往往会增加应用这一级别用于隔离，为了同时操作多个资源每个应用会有资源包，而角色会作为跨资源包与资源的汇集方</li>
</ul>
<h4 id="业务形态-1"><a href="#业务形态-1" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>同意授权与协议</li>
<li>授权管理，协议查看</li>
</ul>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>会话是指用户从登录后用户持续使用服务一直到退出整个登录状态，与服务器中的session概念差不多，不过这里在登录后产生的</p>
<ul>
<li>为了保持登录认证状态持续，最简单的做法是用户在输入用户名密码后将用户名密码保存在cookie中，以后每次请求都去校验cookie中的信息</li>
<li>但是这样非常不安全，所以一般在登录认证成功后会生成一个令牌，放到cookie中，每次请求都去校验令牌</li>
<li>为了防止令牌因为意外泄露后的风险，会给令牌设置一个有效期，客户端APP的有效期会更短，而通过刷新令牌机制来换取令牌保持会话持续</li>
</ul>
<p>针对一些多应用或者跨域的情况会提供单点登录功能，即SSO</p>
<ul>
<li>用户在同企业的一个平台认证后，则其他平台会自动认证成功</li>
<li>如果退出，也会全部退出</li>
</ul>
<p>APP中的单点登录会有挤出登录的情况，会话类型会有多种</p>
<ul>
<li>会话排他型：如果在同一个APP中，如果2个人用同样的账号在不同设备上登录，则前一个账号会被强制退出，一般针对金融类APP</li>
<li>会话共享型：同一个账号可以同时在不同设备上登录成功，一般用于工具类APP</li>
</ul>
<h4 id="业务形态-2"><a href="#业务形态-2" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>登录成功后生成会话</li>
<li>退出</li>
<li>自动登录</li>
<li>刷新令牌</li>
</ul>
<h3 id="业务行为附带信息"><a href="#业务行为附带信息" class="headerlink" title="业务行为附带信息"></a>业务行为附带信息</h3><p>这种附带信息不止是用户中心，应该说对于所有业务行为都会有这些信息</p>
<ul>
<li>通过设备请求获取的信息：设备唯一号、请求IP地址</li>
<li>通过来源APP请求的信息：平台号、版本号、投放标识</li>
<li>身份识别信息：用户令牌（认证前为空）</li>
</ul>
<h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全分为通用技术安全与业务安全</p>
<p>通用技术安全</p>
<ul>
<li>CSRF攻击</li>
<li>cookie安全</li>
<li>XSS攻击</li>
</ul>
<p>业务安全：注册、登录、找回密码因为数据验证前操作，需要重点关注安全问题</p>
<ul>
<li>短信验证码、邮箱验证码攻击安全</li>
<li>多业务步骤安全</li>
</ul>
<h3 id="账号集成"><a href="#账号集成" class="headerlink" title="账号集成"></a>账号集成</h3><p>比如将2个公司账号系统进行整合集成打通的业务场景，这里暂不展开</p>
<h3 id="自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录"><a href="#自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录" class="headerlink" title="自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录"></a>自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录</h3><ul>
<li>PC通过信息传入识别<ul>
<li><del>PC上比如指纹识别需要从硬件-操作系统-浏览器打通，非常麻烦，而且还要在设备上绑定好用户信息</del></li>
<li><del>PC人脸识别操作系统是支持了，不过需要浏览器可以调用，且需要电脑配备摄像头，也比较麻烦</del></li>
</ul>
</li>
<li>PC通过信息传出识别<ul>
<li><del>通过文字、声音不是太方便</del></li>
<li>通过图片可以，比如通过二维码图片，然后通过手机设备扫描然后通过认证</li>
</ul>
</li>
<li>手机通过信息传入识别<ul>
<li>指纹，如指纹支付已经有了，估计登录也可以 注册的话需要本地设备设置个人信息 需要手机软件支持</li>
<li>通过PC或者某个非手机设备生产的二维码这里用摄像头对准后识别注册or登录</li>
<li>手机的话通过APP唤醒其他第三方授权注册登录 就是普通的三方登录</li>
<li>通过摄像头人脸识别 可以有 登录 但是不能注册 除非人脸库有你的信息</li>
<li>通过SIM卡信息或者网络基站获取本机手机号码进行注册，并通过手机号码获取实名信息</li>
</ul>
</li>
</ul>
<h1 id="用户中心技术"><a href="#用户中心技术" class="headerlink" title="用户中心技术"></a>用户中心技术</h1><p>技术主要集中在业务行为上</p>
<p>认证<br>认证技术：第三方Oauth2</p>
<p>授权<br>授权协议</p>
<p>会话<br>token技术：刷新令牌<br>SSO技术：CAS、前埋后埋</p>
<p>安全<br>客户端安全<br>token安全<br>密码安全</p>
<p>未完待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1504546211663&amp;amp;di=2abfeebbce6670f8442681cf19
    
    </summary>
    
      <category term="业务" scheme="https://dawell.github.io/categories/%E4%B8%9A%E5%8A%A1/"/>
    
    
      <category term="用户中心" scheme="https://dawell.github.io/tags/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
    
      <category term="账号" scheme="https://dawell.github.io/tags/%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Selenium爬虫</title>
    <link href="https://dawell.github.io/2017/07/22/20170722Selenium%E7%88%AC%E8%99%AB/"/>
    <id>https://dawell.github.io/2017/07/22/20170722Selenium爬虫/</id>
    <published>2017-07-22T15:30:00.000Z</published>
    <updated>2017-07-23T10:19:41.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫研究"><a href="#爬虫研究" class="headerlink" title="爬虫研究"></a>爬虫研究</h3><p>Selenium是一个浏览器自动化测试API，不过目前也可以作为爬虫使用<br>早在2013年的时候就在自动化测试中使用过Selenium，所以对他的API也算熟悉</p>
<p>不过目前Selenium针对浏览器的开发支持程度不一样，一般都需要插件进行辅助</p>
<ul>
<li>chrome 开发最佳</li>
<li>firefox 开发也不错</li>
<li>IE 没有xpath获取的插件，开发困难</li>
</ul>
<p>除了网站登录认证，其实用HttpClient直接请求就可以爬取数据<br>但是有时候这种方式并不直接，直接网站上的信息所见即所得，还能截图看个清楚</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;爬虫研究&quot;&gt;&lt;a href=&quot;#爬虫研究&quot; class=&quot;headerlink&quot; title=&quot;爬虫研究&quot;&gt;&lt;/a&gt;爬虫研究&lt;/h3&gt;&lt;p&gt;Selenium是一个浏览器自动化测试API，不过目前也可以作为爬虫使用&lt;br&gt;早在2013年的时候就在自动化测试中使用过S
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="爬虫" scheme="https://dawell.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>西塘乌镇一日游</title>
    <link href="https://dawell.github.io/2017/05/29/20170529%E8%A5%BF%E5%A1%98%E4%B9%8C%E9%95%87%E4%B8%80%E4%BA%BA%E6%B8%B8/"/>
    <id>https://dawell.github.io/2017/05/29/20170529西塘乌镇一人游/</id>
    <published>2017-05-29T15:30:00.000Z</published>
    <updated>2017-05-30T09:31:45.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>端午节一共3天，是在房价前一天晚上突然想到要去的，但是第一天假期的旅游票已经订不上了，所以定了第二天的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class=&quot;headerlink&quot; title=&quot;经历&quot;&gt;&lt;/a&gt;经历&lt;/h1&gt;&lt;p&gt;端午节一共3天，是在房价前一天晚上突然想到要去的，但是第一天假期的旅游票已经订不上了，所以定了第二天的&lt;/p&gt;

    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="旅游" scheme="https://dawell.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="西塘" scheme="https://dawell.github.io/tags/%E8%A5%BF%E5%A1%98/"/>
    
      <category term="乌镇" scheme="https://dawell.github.io/tags/%E4%B9%8C%E9%95%87/"/>
    
  </entry>
  
  <entry>
    <title>监控系统</title>
    <link href="https://dawell.github.io/2017/05/27/20170527%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://dawell.github.io/2017/05/27/20170527监控系统/</id>
    <published>2017-05-27T12:00:00.000Z</published>
    <updated>2017-05-27T09:32:25.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>记得14年的时候我在公司负责支付资金对账系统，整体逻辑类似定时跑批比对，如果数据对账成功要通知支付系统，如果发现差错账后要进行告警<br>由于整个系统在拉取数据时存在多种方式与各种不可靠情况，比如第三方的对账数据没有在约定时间内放置，数据拉取失败，数据放置错误。还有数据中各种长短账的情况处理，状态与异常情况比较多<br>由于那时候公司也没有监控系统，所以那时候为了方便排查问题，自己做了一个<br>不过现在看来那时候的监控手段还是比较挫的，不过当时不想天天因为排查问题而浪费一上午时间的我能做出这么一个东西也是很有意义的，哈哈</p>
<h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><p>为了不影响线上的对账程序，在后台上开发了这个功能，其实这也是现在监控系统设计的要素之一，就是绝对不能影响核心业务系统的运行<br>开发了一个页面，上面在页面加载的时候会去将各种异常与正常的情况通过SQL去查询数据库，然后将数据统计结果显示在页面上，因为是定时任务，所以为了方便修复数据，在每个统计点都提供了一个按钮可以重新调度定时任务执行一次<br>这个按钮就是一个数据修复的能力了，所以准确说这不止是个监控系统，还是个灰度控制系统<br>整个系统起名叫：上帝模式（当时同事听说这个名字后，都为之称赞~）<br>这个系统在初期帮了我很大的忙，每次排查问题，先看这个界面，上面数字对不上的我都会去确认，一个不漏，非常方便排查问题，而且如果排查完问题，就要重新对某个环节重新执行，只要点一下那个环节的按钮就可以了，so easy！<br>不过之后就发现这个页面要很久才能打开，因为上面执行了太多的SQL，而且越来越慢，这些SQL查询有些字段需要优化：限制时间范围、增加索引 于是又可以继续使用了</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>可以说这是一个简单的看板系统，就是通过SQL语句查询数据库，然后判断异常的数据显示而已，但是足够当时的检查数据的需求<br>真实的监控系统是可以告警，处理业务执行中的数据的，比如打点与异常的监视，不依赖业务方数据库存储的<br>所以真实的监控系统都是采用业务逻辑层主动发送监控数据到监控系统中的，而不是像我这种设计思路，通过扫描存储的数据来监控</p>
<ol>
<li>业务存储的数据只为了业务场景而优化查询，而监控可能是有多维度的需求，不适合在业务库中加索引优化</li>
<li>直接在业务库中查询也会影响真实业务使用，顶多查下从库</li>
<li>如果业务改变了表结构，监控的逻辑也要跟着改</li>
<li>业务数据中很多监控的数据不会存储，而监控需要的数据也只是业务字段的一部分<br>可能最重要的还是第4点，业务落地的数据并不能满足监控需要的数据，比如调用异常，不落地的数据，存储在redis缓存中的业务场景，所以监控系统还是不要基于业务表进行监控<br>基于表的数据分析其实是BI（数据智能）他们的方式，他们其实解决了前3个问题，通过大数据中的Hadoop、HDFS、Hbase、Hive、离线数据分析等技术通过ETL（抽取、过滤、清洗）把业务表变为BI表数据用于统计分析，毕竟落地的数据才是有价值的业务数据<br>而监控关注的是产生这些业务数据的过程，业务逻辑调用过程中的问题，所以要通过业务逻辑层植入监控的逻辑</li>
</ol>
<h1 id="监控系统"><a href="#监控系统" class="headerlink" title="监控系统"></a>监控系统</h1><p>现在监控通过业务监控指标日志打印、日志采集、消息系统、日志信息入库、日志加工分析存储这样的方式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class=&quot;headerlink&quot; title=&quot;经历&quot;&gt;&lt;/a&gt;经历&lt;/h1&gt;&lt;p&gt;记得14年的时候我在公司负责支付资金对账系统，整体逻辑类似定时跑批比对，如果数据对账成功要通知支付系统，如果发现差错账后要进行告警&lt;br&gt;由
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="监控" scheme="https://dawell.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Sonarlint插件</title>
    <link href="https://dawell.github.io/2017/05/23/20170523Sonarlint%E6%8F%92%E4%BB%B6/"/>
    <id>https://dawell.github.io/2017/05/23/20170523Sonarlint插件/</id>
    <published>2017-05-23T13:30:00.000Z</published>
    <updated>2017-05-25T09:01:45.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>sonar与idea集成的相关步骤：</p>
<ol>
<li><p>安装插件<br>idea–plugns中查找sonarLint插件，并安装；安装完成后，重启idea；<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffxpq8n40dj20at047glk.jpg" alt="image"></p>
</li>
<li><p>配置sonarlint插件<br>第一次添加时，需要到General中配置使用的sonar平台地址，一般是公司内部搭建的地址<br><img src="http://wx4.sinaimg.cn/mw690/712a7015gy1ffxpq9bjadj20rr0fk3zv.jpg" alt="image"><br>配置项目信息，在上面那个环节时，下面有个“UPdate bingding”，必须要点击下；看解释就很清楚了。从服务器获取项目列表、规则、配置等；必须在选择项目前完成这事儿。<br><img src="http://wx1.sinaimg.cn/mw690/712a7015gy1ffxpq9xwpuj20id028web.jpg" alt="image"></p>
</li>
<li><p>配置项目：<br>选择你们的项目<br>如果项目，要在SonarQube在配置下你们的项目，导入checkstyle、pmd、findbugs的配置，或者用默认的<br><img src="http://wx4.sinaimg.cn/mw690/712a7015gy1ffxpqafpqvj20s00h50tq.jpg" alt="image"></p>
</li>
<li><p>使用插件<br>配置完成后，在当前项目环境下，idea的左下角就可以看到sonar扩展了，注意选Project files后选择scope<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffxpqaxrguj20n009bmxm.jpg" alt="image"></p>
</li>
</ol>
<p>至此，idea与sonar插件集成完毕</p>
<h2 id="插件拉去项目列表时报错"><a href="#插件拉去项目列表时报错" class="headerlink" title="插件拉去项目列表时报错"></a>插件拉去项目列表时报错</h2><p>不过使用起来遇到一个问题，如果SonarQube的子项目比较多时，插件拉去项目的api会超时timeout，导致无法使用<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue2o52c4j20hd03r74d.jpg" alt="img"><br>解决：<br>问题就是<code>http://xxx:9000/api/projects/index?format=json&amp;subprojects=true</code>这个URL请求时timeout，如果浏览器请求会报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;err_code&quot;:500,&quot;err_msg&quot;:&quot;ActiveRecord::JDBCError: Can not read response from server. Expected to read 255 bytes, read 0 bytes before connection was unexpectedly lost.: SELECT id,uuid,kee,name,language,long_name,scope,qualifier,root_uuid,project_uuid FROM `projects` WHERE (enabled=1 AND scope in (&apos;PRJ&apos;) AND qualifier in (&apos;TRK&apos;,&apos;BRC&apos;))  ORDER BY name&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>问题SQL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">uuid</span>,kee,<span class="keyword">name</span>,<span class="keyword">language</span>,long_name,<span class="keyword">scope</span>,qualifier,root_uuid,project_uuid</div><div class="line"><span class="keyword">FROM</span> <span class="string">`projects`</span></div><div class="line"><span class="keyword">WHERE</span> (enabled=<span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">scope</span> <span class="keyword">in</span> (<span class="string">'PRJ'</span>) <span class="keyword">AND</span> qualifier <span class="keyword">in</span> (<span class="string">'TRK'</span>,<span class="string">'BRC'</span>))</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></div></pre></td></tr></table></figure></p>
<p>实际测试发现：问题出在order by name上，如果只使用order by，执行就会慢到没结果甚至报<code>[Err] 2000 - Unknown MySQL error</code>错误，之后看表结构发现问题<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`name` varchar(2000) COLLATE utf8_bin DEFAULT NULL,</div></pre></td></tr></table></figure></p>
<p>name这个字段竟然有2000的长度，然后看数据库实际数据长度没有超过160的，所以修改为300，查询就非常快了，问题解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;sonar与idea集成的相关步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装插件&lt;br&gt;idea–plugns中查找sonarLint插件，并
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="质量" scheme="https://dawell.github.io/tags/%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>静态代码扫描工具</title>
    <link href="https://dawell.github.io/2017/05/22/20170522%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://dawell.github.io/2017/05/22/20170522静态代码扫描工具/</id>
    <published>2017-05-22T13:57:00.000Z</published>
    <updated>2017-05-25T08:32:23.139Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffuejerhtrj20xc0i0wgr.jpg" alt="img"></p>
<p>优秀的团队为了保证可读性、可维护性、避免重复踩坑与保证代码质量，都会推出一些开发规范来遵守。<br>开发规范是前置主动要求团队成员遵守的，而光靠意识是难以保证完全遵守规范的，所以还需要一些工具辅助。<br>当然即使有工具做这些事情，规范也是必须推广的，让大家先仔细读读，毕竟直接写出优秀的代码是最好的，然后再辅助工具乃最佳实践。</p>
<h1 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h1><p>一流公司制定规范，二流公司申请专利，三流公司生产产品。<br>所以目前公开规范的大多是大厂的规范。</p>
<p>目前知道大厂公开的Java开发规范</p>
<ul>
<li>Google开发规范 github markdown格式 <a href="http://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">点我查看</a></li>
<li>阿里巴巴开发规范 PDF格式 <a href="https://yq.aliyun.com/articles/69327" target="_blank" rel="external">点我查看最新版</a></li>
<li>华为开发规范</li>
<li>Oracle开发规范</li>
</ul>
<p>阿里巴巴的开发规范，虽然不是单纯的规范，还包括了开发中的各种坑从主观上的一些强制规定，但是总体上还是很有用的，可以拿来部分or全部直接执行。</p>
<h1 id="独立的组件"><a href="#独立的组件" class="headerlink" title="独立的组件"></a>独立的组件</h1><h2 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h2><p>只寻找可能存在bug的地方，不注重样式或者格式，它试图只寻找真正的缺陷或者潜在的性能问题。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>基于class分析，如果你clean了再去执行发现没有执行生成报告，所以需要编译后才能执行分析</li>
<li>有maven插件，有IDE插件（eclipse插件，也有idea插件）</li>
<li>开发时不用使用maven插件，要编译执行检测生成xml然后再生成网页查看结果，挺麻烦。如果要与Jenkins集成的时候，maven插件就有用了，<a href="http://www.tuicool.com/articles/QB7nqqF" target="_blank" rel="external">集成方式点我</a></li>
<li>开发时使用IDE插件非常方便</li>
<li>插件中Bug Explorer 中的灰色图标处为 Bug 类型，红色图标表示 bug 较为严重，黄色的图标表示 bug 为警告程度</li>
</ul>
<h3 id="代码缺陷分类"><a href="#代码缺陷分类" class="headerlink" title="代码缺陷分类"></a>代码缺陷分类</h3><p>根据缺陷的性质，大致可以分为下列几类</p>
<ul>
<li>Bad practice  不好的做法</li>
<li>Correctness   可能有不正确</li>
<li>Dodgy code     糟糕的代码</li>
<li>Experimental  实验</li>
<li>Internationalization  国际化</li>
<li>Malicious code vulnerility 恶意的代码漏洞</li>
<li>Multithreaded correctness 多线程问题</li>
<li>Performance  性能问题</li>
</ul>
<p>FindBugs官方网站上也给出了一些案例：<a href="http://findbugs.sourceforge.net/bugDescriptions.html" target="_blank" rel="external">案例点我</a></p>
<h3 id="缺陷列表"><a href="#缺陷列表" class="headerlink" title="缺陷列表"></a>缺陷列表</h3><p><a href="">缺陷列表</a></p>
<h3 id="排除单个规则"><a href="#排除单个规则" class="headerlink" title="排除单个规则"></a>排除单个规则</h3><p>如果是排除一类规则，点击IDE旁边的提示选择排除类型就行</p>
<p>可以针对规则排除单独类中的接触限制，使用注解<code>@edu.umd.cs.findbugs.annotations.SuppressFBWarnings</code><br>要加入依赖  provided代表只在编译时依赖，打包后就没有这个依赖了<br>IDE旁边提示也有这种，不过不会加入以下依赖，需要手动在POM中加入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr305<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a>CheckStyle</h2><p>代码样式风格检查，专门check代码规范风格的，比如缩进，换行操作，命名<br>大项目往往是有很多人一起完成的，然而每个人都有自己的style，导致整个项目的代码不仅存在不符合语言规范的情况，而且读起来非常困难。因此，这样的项目中都会引入Checkstyle，来规范大家的编码风格，尽量做到统一和合理。<br>所以使用checkStyle检查到问题</p>
<p>官方文档：<a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">http://checkstyle.sourceforge.net/checks.html</a></p>
<h3 id="工具界面"><a href="#工具界面" class="headerlink" title="工具界面"></a>工具界面</h3><p>插件<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2cdu0qj20fa06aq3l.jpg" alt="img"></p>
<p>单个文件check<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2fumooj20eq0d3jt3.jpg" alt="img"></p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>基于源码，无需编译</li>
<li>有maven插件，与IDE插件（eclipse插件，也有idea插件）。<a href="http://checkstyle.sourceforge.net/idea.html" target="_blank" rel="external">idea的一些细节配置</a></li>
<li>可以自定义规则</li>
<li>CheckStyle底层基于antlr对源码进行处理</li>
<li>可以配置哪些文件不检查</li>
</ul>
<h3 id="规范配置"><a href="#规范配置" class="headerlink" title="规范配置"></a>规范配置</h3><p>配置位置<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2ixrz0j20su0jhmxs.jpg" alt="img"></p>
<ul>
<li>sun_checks.xml 默认自带sun公司的开发规范，有点严格</li>
<li>google_checks.xml 下载下来好像有点问题，可能与版本有关 <a href="http://checkstyle.sourceforge.net/google_style.html" target="_blank" rel="external">查看</a></li>
<li>华为的规范 很多公司都会用华为的规范改改</li>
<li>自定义的规范 比较了解配置规则的情况下配置</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>我们在代码写完之后，还要花时间去手动解决Checkstyle提示的问题，这是一个非常无聊和耗时的工作。<br>其实很多问题使用IDE的格式化已经能解决一部分，所以最好能提供一个IDE的formatter配置，整个团队都用这个配置导入IDE，这样用用快捷键就能解决一些问题，非常easy。</p>
<h2 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a>PMD</h2><p>与findbug类似找bug用，还有规范，比如说注释不全</p>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>有maven插件，与IDE插件（eclipse插件，也有idea插件）</li>
<li>增强代码质量和修改代码的功能</li>
</ul>
<h3 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h3><ul>
<li>可能的bug——空的try/catch/finally/switch块。</li>
<li>无用代码(Dead code)：无用的本地变量，方法参数和私有方法。</li>
<li>空的if/while语句。</li>
<li>过度复杂的表达式——不必要的if语句，本来可以用while循环但是却用了for循环。</li>
<li>可优化的代码：浪费性能的String/StringBuffer的使用。</li>
</ul>
<h1 id="集合组件"><a href="#集合组件" class="headerlink" title="集合组件"></a>集合组件</h1><h2 id="IdeaIDE的QAPlug"><a href="#IdeaIDE的QAPlug" class="headerlink" title="IdeaIDE的QAPlug"></a>IdeaIDE的QAPlug</h2><p>这个插件是汇集这前面说的3个插件的结果，不用每次都运行3个插件分别排错，1键运行3个同时汇总整合，非常方便，所以其他的不用装了，就用这个就行了！<br>与sonar平台的功能类似！<br>如果公司没有搭建sonarqube平台的话，本地使用这个最佳</p>
<h3 id="插件下载安装"><a href="#插件下载安装" class="headerlink" title="插件下载安装"></a>插件下载安装</h3><p>依次下载 QAPlug、QAPlug-Checkstyle、QAPlug-FindBugs、QAPlug-PMD<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue2lstwvj20b706rdfv.jpg" alt="img"></p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>这个插件会把3个插件的错误分类汇总</p>
<ul>
<li>Efficiency 效能</li>
<li>Maintainability 可维护性</li>
<li>Reliability 可靠性</li>
<li>Usability 可用性</li>
</ul>
<h2 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h2><p>代码质量管理系统<br>相当于QAPlug的工程独立出一个服务器部署，可以配置规则，扫描代码，集成了很多静态扫描工具<br>2015年3月的时候就看到一篇文章介绍这个平台了，那时候还没有太过关注，后来发现这个是个很好的平台</p>
<h3 id="Sonarlint"><a href="#Sonarlint" class="headerlink" title="Sonarlint"></a>Sonarlint</h3><p>是SonarQube的配套的IDE插件，配置远程服务器的地址,选取要拉去规则的项目，然后本地就可以执行校验了，用的远程的规则<br>这样还是很方便的，规则可以同一在SonarQube维护，不用每个人本地导入，团队的话用这个最适合</p>
<p>Sonarlint安装与拉取列表失败问题解决见 <a href="/2017/05/23/20170523Sonarlint插件/" title="Sonarlint插件">Sonarlint插件</a></p>
<h3 id="扩充-Lint概念"><a href="#扩充-Lint概念" class="headerlink" title="扩充-Lint概念"></a>扩充-Lint概念</h3><p>Sonarlint是一个Lint工具，其实Lint的含义就代表代码静态分析的工具，协助开发的工具，尤其是前端经常使用，比如插件eslint：检查JavaScript错误非常方便</p>
<h2 id="JArchitect"><a href="#JArchitect" class="headerlink" title="JArchitect"></a>JArchitect</h2><p>多种分析工具的聚合工具<br>是一个商业性的收费的分析工具<br>可以汇聚checkstyle、findbugs、pmd的xml，然后分类总结生成图表<br>不过是收费的，也没有idea插件，不用</p>
<h1 id="代码覆盖率工具"><a href="#代码覆盖率工具" class="headerlink" title="代码覆盖率工具"></a>代码覆盖率工具</h1><p>idea自带了代码覆盖率插件还不错<br>跑单元测试的时候以代码覆盖率的方式运行就行了<br>一般逻辑覆盖率60%就差不多了，核心模块80%覆盖标准即可</p>
<h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><p><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue9vkviqj208r0jumxx.jpg" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先要从意识上要遵守规范，风格统一，需要制定一份Java开发规范，我比较倾向于直接使用阿里的Java规范吧，简单实用，也不过分严格<br>其次要选择静态代码工具，没有SonarQube的话用QAPlug是很好的选择，有的话装个Sonarlint插件就可以了<br>代码覆盖率通过idea自带的即可</p>
<p>有些人可能很排斥规范，总感觉条条框框太多，不符合自己的自由风格，但是软件不是开发完上线就结束的过程，而是需要持续迭代维护升级的过程，新人会接手，要有可读性可维护性。项目大了，人多了也是需要规范化才能更好的融合协作，让混乱变得有序<br>一个人的优秀靠的是经验，一个团队的优秀靠的是规范。<br>有了这些规范与工具，就可以大大的提高团队的整体素质与水平，尤其是大厂开发人员，这个是必须有的。</p>
<p>Best Wishes!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/712a7015gy1ffuejerhtrj20xc0i0wgr.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;优秀的团队为了保证可读性、可维护性、避免重复踩坑与保证代码质量，都会推出一些开发规范来
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="质量" scheme="https://dawell.github.io/tags/%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>博客评论插件</title>
    <link href="https://dawell.github.io/2017/05/21/20170521%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://dawell.github.io/2017/05/21/20170521博客评论插件/</id>
    <published>2017-05-21T13:00:00.000Z</published>
    <updated>2017-05-25T08:33:49.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h1><p>目前知道的评论插件系统</p>
<ul>
<li>多说</li>
<li>友言</li>
<li>网易云跟帖</li>
<li>disqus</li>
<li>畅言</li>
</ul>
<h2 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h2><p>以前一直用多说，不过2017年6月1日开始将不再维护，所以只能弃用之</p>
<h2 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h2><p>尝试了下，一开始网上说不支持https，所以哥有申请了个域名换成了http，结果发现还是不行，最后才发现官网的示例程序都不能跑了，都是一个错误：502，所以弃用！</p>
<h2 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h2><p>目前就是用的这个，功能还算可以满足，不过不支持子域名，所以过去挂在github.io上的子域名注册的时候会提示“站点url存在”，所以需要单独申请个域名挂上</p>
<p>新版的next主体已经支持网易云跟帖，主要更新新版后只要加一个配置即可使用。</p>
<h2 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h2><p>我看网上很多人在弃用多说后都是选择的这个，不过不用翻墙vpn，我官网都无法访问，无比尴尬，所以国内无法使用，弃用！</p>
<h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><p>搜狐的，不过未备案的网站只能用15天，弃用！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前能选择的只有 网易云跟帖了 ，后续完善教程，如何配置网易云跟帖。</p>
<h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul>
<li><a href="https://www.zhihu.com/question/57426274" target="_blank" rel="external">https://www.zhihu.com/question/57426274</a></li>
<li><a href="https://blog.shuiba.co/comment-systems-recommendation#toc_2" target="_blank" rel="external">https://blog.shuiba.co/comment-systems-recommendation#toc_2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;评论插件&quot;&gt;&lt;a href=&quot;#评论插件&quot; class=&quot;headerlink&quot; title=&quot;评论插件&quot;&gt;&lt;/a&gt;评论插件&lt;/h1&gt;&lt;p&gt;目前知道的评论插件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多说&lt;/li&gt;
&lt;li&gt;友言&lt;/li&gt;
&lt;li&gt;网易云跟帖&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="博客" scheme="https://dawell.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客插件" scheme="https://dawell.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%8F%92%E4%BB%B6/"/>
    
      <category term="评论" scheme="https://dawell.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>人的未来，我的人生观</title>
    <link href="https://dawell.github.io/2017/01/02/20170102%E4%BA%BA%E7%9A%84%E6%9C%AA%E6%9D%A5%EF%BC%8C%E6%88%91%E7%9A%84%E4%BA%BA%E7%94%9F%E8%A7%82/"/>
    <id>https://dawell.github.io/2017/01/02/20170102人的未来，我的人生观/</id>
    <published>2017-01-01T16:00:00.000Z</published>
    <updated>2017-06-25T05:43:14.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人的未来，我的价值观"><a href="#人的未来，我的价值观" class="headerlink" title="人的未来，我的价值观"></a>人的未来，我的价值观</h2><p>偶尔看到了一些机器人发展的新闻，这块日本玩的最6，说造出了美女机器人，使用最好的皮肤，可以模拟人说话，微笑等等</p>
<p>其实我对日本一直想造出真实模拟人类的机器一直保持不看好的态度<br>因为人与机器其实差异还挺大的，人是生物，机器是非生物，他们的工作原理不同，人注定要进行吃喝拉撒睡的过程，而机器不需要<br>如果想让机器完全变为人，那就要有人类的一切功能，包括生理的<br>就算用上了机器学习给机器一个与人类工作原理一样的大脑，那也没必要给机器配置上吃喝拉撒睡的功能，因为对于机器来说是多余的，他们可以去掉这些功能也可以正常运作，这些功能对他们没有任何意义，有的只是看上去更像人类罢了<br>机器应该有机器特别的地方，他应该做人类做不到的事情，而不是做人可以做的事情，这才是一个好的方向<br>所以机器发展最终肯定不是模拟人操作的方式，不要认为人就是上帝创造最好的设计，我们用机器堆出一个自己完全没什么软用</p>
<p>我倒是觉得超人总动员中微型机器人黑科技肯定是最终形态，这种完全突破人肉身的限制随意组合的小东西可以做任何事情<br>所以材料与设计问题是要解决的问题</p>
<p>未来的人类肯定与机器各有所长，机器有了人工智能AI也会很聪明，人类受大脑与身体的限制肯定达不到AI的进化程度，到最后人类肯定要依靠机器来进化<br>我觉得人类可能先做出机器人工智能的外设，然后外设效率不如直接大脑联通，所以给大脑植入芯片，最后人类身体逐渐老化，为了意识存留，肯定会将意识上传机器中，人工智能AI去尝试改造基因组，通过制造更聪明的生物来进行辅助进化，最后生物与非生物的结合体组合为主宰IA的载体，意识可以下载到人造载体中，形成真正的“互联网”<br>最终机器与人造生物就是人类的载体，意识与思想才能代表人类，最终的人类也许就没有了吃喝拉撒睡，七情六欲的问题，只会发展科技，但是为了保留人类的情感，肯定会有一个模拟系统来体验过去的人类功能<br>一切就和黑客帝国那样，一些都是为了让你体验而已</p>
<p>也许这个世界就是假的，人类早就发展到了终点，看到了宇宙的谎言，目前的世界只是一个体验系统，等你死后你的意识流就会回归主宰AI，想知道这个世界的一切都在那里。<br>所以我的三观上就认为反正都是假的，人的一生就是要开心嘛，有身体的时候就要让身体愉悦，吃喝拉撒睡，挣钱来更好的体验这原始的人类生活<br>而且最好要丰富的人生经历，好好体验一把，不要干一辈子一样的事情，因为那就浪费了作为原始人类的机会</p>
<p>一切都是为了可以享受生活，不害怕死亡，只是不想遗憾的死去~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人的未来，我的价值观&quot;&gt;&lt;a href=&quot;#人的未来，我的价值观&quot; class=&quot;headerlink&quot; title=&quot;人的未来，我的价值观&quot;&gt;&lt;/a&gt;人的未来，我的价值观&lt;/h2&gt;&lt;p&gt;偶尔看到了一些机器人发展的新闻，这块日本玩的最6，说造出了美女机器人，使用最
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>利率研究</title>
    <link href="https://dawell.github.io/2017/01/01/20170101%E5%88%A9%E7%8E%87%E7%A0%94%E7%A9%B6/"/>
    <id>https://dawell.github.io/2017/01/01/20170101利率研究/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-06-25T05:00:19.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="花呗分期的真实利率"><a href="#花呗分期的真实利率" class="headerlink" title="花呗分期的真实利率"></a>花呗分期的真实利率</h2><p>为了方便看利率，先统一时间，都换算为年化利率</p>
<h3 id="花呗分期"><a href="#花呗分期" class="headerlink" title="花呗分期"></a>花呗分期</h3><p>花呗分期可以申请3、6、9、12个月的分期还款，费率分别为2.5%，4.5%，6.5%，8.8%，如果直接换算年化为10%，9%，8.67%,8.8%<br>注意这里是费率，并非利率，因为分期每月都会还款，但是按总费率平均每月还的钱不会变化，与实际银行的利率规则不同</p>
<h3 id="银行利率"><a href="#银行利率" class="headerlink" title="银行利率"></a>银行利率</h3><p>银行利率是按照剩余本金计算的，每月还款后会递减。而这里相当于利息一直按贷款最开始的总额计算，利息每月不变了，这样相当于交的利息更多了，一般这种算法比普通的算法大约高出3/2的手续费<br>如果大约计算实际年化利率为15%，13.5%，13.17%，13.2%，这个才算是花呗实际收益利率数据，可以看到花呗的分期还款利率很高，还是非常不划算的。</p>
<h3 id="借呗利率"><a href="#借呗利率" class="headerlink" title="借呗利率"></a>借呗利率</h3><p>借呗的贷款利率与银行一致，有些人的借呗利率是万四，那年化0.0004*365=14.6%，利率也是比较高的<br>借呗我个人之前利率是每日万三，也就是年化10.95%的利率，目前是万2.5，相当于年化9.125%，0.75分利息，1w块钱1年2块5利息</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以看以看出，如果买商品，分期要支付很多利息，而如果自己的借呗日利率低于万4，那使用借呗先借出来分期还款花呗要比直接花呗分期要划算<br>总体来说借呗借的钱可以随便使用，而且利率相对其他网络平台算低的，实时到账，还是非常不错的产品。</p>
<h2 id="P2P平台的利率"><a href="#P2P平台的利率" class="headerlink" title="P2P平台的利率"></a>P2P平台的利率</h2><p>现在有很多P2P网贷平台，也许今年国家要像去年P2P理财平台一样开始整治，不过还没有开始<br>国家的套路一向是先撒网再收网，先让你自由发展，睁一只眼闭一只眼，大批创业公司诞生，然后出个政策，最后只留下100来家同类平台<br>既然国家还没有整治，具体要求还没有下来，那必然这些P2P网贷平台的会有一些猫腻，尤其是利息计算方式</p>
<h3 id="“费率”并非“利率”"><a href="#“费率”并非“利率”" class="headerlink" title="“费率”并非“利率”"></a>“费率”并非“利率”</h3><p>比如现在很多平台并不直接使用“利率”提示用户该还多少利息，而是通过“费率”<br>费率也就是手续费，为啥不叫利率呢，因为利率其实应该与银行利率概念一样，按照每月本金计算，还款也应该是银行借款等额本金、等额本息的分期还款方式<br>但是有些P2P平台依然是让用户选择分期，但是每月还的利息却不是按照剩余本金计算的，要按照贷款时的“费率”算好然后每月还相同的利息，这就相当于每月还款的利息要按照最初借款的总金额计算，每月都还第一个月最大金额的利息</p>
<p>比如一些平台费率都标注到1%，也就是说一年看上去应该就是12%的利率了，但实际上换算为银行的还款利率（大致3/2）就已经20%多了<br>举个实际例子，1w元1年，年化12%，银行利息一年实际只有661.85元，而用这个平台看上去年化12%实际利息要1200元，实际利率达到21.5%了</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>目前来说我知道的蚂蚁借呗、小米贷款、微信的微粒贷应该都是按照银行贷款利率计算的，还算良心<br>但是很多P2P贷款的利率就不好说了，所以借钱的话，费率一定看清楚是如何计算的，可以用房贷计算器之类的算算实际利率是多少</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;花呗分期的真实利率&quot;&gt;&lt;a href=&quot;#花呗分期的真实利率&quot; class=&quot;headerlink&quot; title=&quot;花呗分期的真实利率&quot;&gt;&lt;/a&gt;花呗分期的真实利率&lt;/h2&gt;&lt;p&gt;为了方便看利率，先统一时间，都换算为年化利率&lt;/p&gt;
&lt;h3 id=&quot;花呗分期&quot;&gt;&lt;
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Dawell的博客</title>
    <link href="https://dawell.github.io/2016/12/11/20161211%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://dawell.github.io/2016/12/11/20161211我的博客/</id>
    <published>2016-12-11T07:17:39.000Z</published>
    <updated>2017-05-25T08:31:21.331Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/mw690/712a7015jw1famyj9sbqfj21hc0u0n2u.jpg" alt="img"></p>
<p>网名Dawell，第一个公开的博客站点，分享自己的观点与学到的技术！</p>
<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><ul>
<li>Java架构师</li>
<li>喜欢编程、动漫、游戏</li>
<li>就职于一家大型互联网金融公司</li>
</ul>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul>
<li>过去记录笔记都在本地使用OneNote记录，有很多知识经验不如拿出来分享下，网络公开可以促使自己更加Open。</li>
<li>为了达成每日学习2小时的目标，每周写一篇博文总结，更好的消化知识，督促自己学习。</li>
<li>可以结交更多志同道合的人</li>
</ul>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul>
<li>技术博文每周1篇</li>
<li>专题总结每月1篇</li>
<li>非技术博文每年?篇</li>
</ul>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul>
<li>2016年12月各种环境准备</li>
<li>2017年1月正式开始</li>
</ul>
<p>Best Wishes!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/712a7015jw1famyj9sbqfj21hc0u0n2u.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;网名Dawell，第一个公开的博客站点，分享自己的观点与学到的技术！&lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
