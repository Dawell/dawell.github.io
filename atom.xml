<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawell的博客</title>
  <subtitle>我不是一个简单的少年~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dawell.github.io/"/>
  <updated>2018-07-26T12:20:25.187Z</updated>
  <id>https://dawell.github.io/</id>
  
  <author>
    <name>Dawell</name>
    <email>355398356@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20180826后端架构师技术图谱</title>
    <link href="https://dawell.github.io/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    <id>https://dawell.github.io/2018/07/26/20180826后端架构师技术图谱/</id>
    <published>2018-07-26T12:14:36.000Z</published>
    <updated>2018-07-26T12:20:25.187Z</updated>
    
    <content type="html"><![CDATA[<h1>《后端架构师技术图谱》</h1>

<p><strong>更新于20180624</strong></p>
<ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据结构" target="_blank" rel="external">数据结构</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#队列" target="_blank" rel="external">队列</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#集合" target="_blank" rel="external">集合</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#链表数组" target="_blank" rel="external">链表、数组</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#字典关联数组" target="_blank" rel="external">字典、关联数组</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#栈" target="_blank" rel="external">栈</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#树" target="_blank" rel="external">树</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#二叉树" target="_blank" rel="external">二叉树</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#完全二叉树" target="_blank" rel="external">完全二叉树</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#平衡二叉树" target="_blank" rel="external">平衡二叉树</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#二叉查找树bst" target="_blank" rel="external">二叉查找树（BST）</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#红黑树" target="_blank" rel="external">红黑树</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#b-bb树" target="_blank" rel="external">B-，B+，B*树</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#lsm-树" target="_blank" rel="external">LSM 树</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#bitset" target="_blank" rel="external">BitSet</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#常用算法" target="_blank" rel="external">常用算法</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#排序查找算法" target="_blank" rel="external">排序、查找算法</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#选择排序" target="_blank" rel="external">选择排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#冒泡排序" target="_blank" rel="external">冒泡排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#插入排序" target="_blank" rel="external">插入排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#快速排序" target="_blank" rel="external">快速排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#归并排序" target="_blank" rel="external">归并排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#希尔排序" target="_blank" rel="external">希尔排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#堆排序" target="_blank" rel="external">堆排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#计数排序" target="_blank" rel="external">计数排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#桶排序" target="_blank" rel="external">桶排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#基数排序" target="_blank" rel="external">基数排序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#二分查找" target="_blank" rel="external">二分查找</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#java-中的排序工具" target="_blank" rel="external">Java 中的排序工具</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#布隆过滤器" target="_blank" rel="external">布隆过滤器</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#字符串比较" target="_blank" rel="external">字符串比较</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#kmp-算法" target="_blank" rel="external">KMP 算法</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#深度优先广度优先" target="_blank" rel="external">深度优先、广度优先</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#贪心算法" target="_blank" rel="external">贪心算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#回溯算法" target="_blank" rel="external">回溯算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#剪枝算法" target="_blank" rel="external">剪枝算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#动态规划" target="_blank" rel="external">动态规划</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#朴素贝叶斯" target="_blank" rel="external">朴素贝叶斯</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#推荐算法" target="_blank" rel="external">推荐算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#最小生成树算法" target="_blank" rel="external">最小生成树算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#最短路径算法" target="_blank" rel="external">最短路径算法</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#并发" target="_blank" rel="external">并发</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#java-并发" target="_blank" rel="external">Java 并发</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#多线程" target="_blank" rel="external">多线程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#线程安全" target="_blank" rel="external">线程安全</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#一致性事务" target="_blank" rel="external">一致性、事务</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#事务-acid-特性" target="_blank" rel="external">事务 ACID 特性</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#事务的隔离级别" target="_blank" rel="external">事务的隔离级别</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#mvcc" target="_blank" rel="external">MVCC</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#锁" target="_blank" rel="external">锁</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#java中的锁和同步类" target="_blank" rel="external">Java中的锁和同步类</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#公平锁--非公平锁" target="_blank" rel="external">公平锁 &amp; 非公平锁</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#悲观锁" target="_blank" rel="external">悲观锁</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#乐观锁--cas" target="_blank" rel="external">乐观锁 &amp; CAS</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#aba-问题" target="_blank" rel="external">ABA 问题</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#copyonwrite容器" target="_blank" rel="external">CopyOnWrite容器</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ringbuffer" target="_blank" rel="external">RingBuffer</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#可重入锁--不可重入锁" target="_blank" rel="external">可重入锁 &amp; 不可重入锁</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#互斥锁--共享锁" target="_blank" rel="external">互斥锁 &amp; 共享锁</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#死锁" target="_blank" rel="external">死锁</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#操作系统" target="_blank" rel="external">操作系统</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#计算机原理" target="_blank" rel="external">计算机原理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#cpu" target="_blank" rel="external">CPU</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#多级缓存" target="_blank" rel="external">多级缓存</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#进程" target="_blank" rel="external">进程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#线程" target="_blank" rel="external">线程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#协程" target="_blank" rel="external">协程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#linux" target="_blank" rel="external">Linux</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#设计模式" target="_blank" rel="external">设计模式</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#设计模式的六大原则" target="_blank" rel="external">设计模式的六大原则</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#23种常见设计模式" target="_blank" rel="external">23种常见设计模式</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#应用场景" target="_blank" rel="external">应用场景</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#单例模式" target="_blank" rel="external">单例模式</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#责任链模式" target="_blank" rel="external">责任链模式</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#mvc" target="_blank" rel="external">MVC</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ioc" target="_blank" rel="external">IOC</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#aop" target="_blank" rel="external">AOP</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#uml" target="_blank" rel="external">UML</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#微服务思想" target="_blank" rel="external">微服务思想</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#康威定律" target="_blank" rel="external">康威定律</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#运维--统计--技术支持" target="_blank" rel="external">运维 &amp; 统计 &amp; 技术支持</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#常规监控" target="_blank" rel="external">常规监控</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#apm" target="_blank" rel="external">APM</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#统计分析" target="_blank" rel="external">统计分析</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#持续集成cicd" target="_blank" rel="external">持续集成(CI/CD)</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#jenkins" target="_blank" rel="external">Jenkins</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#环境分离" target="_blank" rel="external">环境分离</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#自动化运维" target="_blank" rel="external">自动化运维</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ansible" target="_blank" rel="external">Ansible</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#puppet" target="_blank" rel="external">puppet</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#chef" target="_blank" rel="external">chef</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#测试" target="_blank" rel="external">测试</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#tdd-理论" target="_blank" rel="external">TDD 理论</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#单元测试" target="_blank" rel="external">单元测试</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#压力测试" target="_blank" rel="external">压力测试</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#全链路压测" target="_blank" rel="external">全链路压测</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ab-灰度蓝绿测试" target="_blank" rel="external">A/B 、灰度、蓝绿测试</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#虚拟化" target="_blank" rel="external">虚拟化</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#kvm" target="_blank" rel="external">KVM</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#xen" target="_blank" rel="external">Xen</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#openvz" target="_blank" rel="external">OpenVZ</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#容器技术" target="_blank" rel="external">容器技术</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#docker" target="_blank" rel="external">Docker</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#云技术" target="_blank" rel="external">云技术</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#openstack" target="_blank" rel="external">OpenStack</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#devops" target="_blank" rel="external">DevOps</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#文档管理" target="_blank" rel="external">文档管理</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#中间件" target="_blank" rel="external">中间件</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#web-server" target="_blank" rel="external">Web Server</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#nginx" target="_blank" rel="external">Nginx</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#openresty" target="_blank" rel="external">OpenResty</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#apache-httpd" target="_blank" rel="external">Apache Httpd</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#tomcat" target="_blank" rel="external">Tomcat</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#架构原理" target="_blank" rel="external">架构原理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#调优方案" target="_blank" rel="external">调优方案</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#jetty" target="_blank" rel="external">Jetty</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#缓存" target="_blank" rel="external">缓存</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#本地缓存" target="_blank" rel="external">本地缓存</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#客户端缓存" target="_blank" rel="external">客户端缓存</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#服务端缓存" target="_blank" rel="external">服务端缓存</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#web缓存" target="_blank" rel="external">Web缓存</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#memcached" target="_blank" rel="external">Memcached</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#redis" target="_blank" rel="external">Redis</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#架构" target="_blank" rel="external">架构</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#回收策略" target="_blank" rel="external">回收策略</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#tair" target="_blank" rel="external">Tair</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#消息队列" target="_blank" rel="external">消息队列</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#消息总线" target="_blank" rel="external">消息总线</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#消息的顺序" target="_blank" rel="external">消息的顺序</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rabbitmq" target="_blank" rel="external">RabbitMQ</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rocketmq" target="_blank" rel="external">RocketMQ</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#activemq" target="_blank" rel="external">ActiveMQ</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#kafka" target="_blank" rel="external">Kafka</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#redis-消息推送" target="_blank" rel="external">Redis 消息推送</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#zeromq" target="_blank" rel="external">ZeroMQ</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#定时调度" target="_blank" rel="external">定时调度</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#单机定时调度" target="_blank" rel="external">单机定时调度</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式定时调度" target="_blank" rel="external">分布式定时调度</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rpc" target="_blank" rel="external">RPC</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#dubbo" target="_blank" rel="external">Dubbo</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#thrift" target="_blank" rel="external">Thrift</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#grpc" target="_blank" rel="external">gRPC</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据库中间件" target="_blank" rel="external">数据库中间件</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#sharding-jdbc" target="_blank" rel="external">Sharding Jdbc</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#日志系统" target="_blank" rel="external">日志系统</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#日志搜集" target="_blank" rel="external">日志搜集</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#配置中心" target="_blank" rel="external">配置中心</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#api-网关" target="_blank" rel="external">API 网关</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#网络" target="_blank" rel="external">网络</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#协议" target="_blank" rel="external">协议</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#osi-七层协议" target="_blank" rel="external">OSI 七层协议</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#tcpip" target="_blank" rel="external">TCP/IP</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#http" target="_blank" rel="external">HTTP</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#http20" target="_blank" rel="external">HTTP2.0</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#https" target="_blank" rel="external">HTTPS</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#网络模型" target="_blank" rel="external">网络模型</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#epoll" target="_blank" rel="external">Epoll</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#java-nio" target="_blank" rel="external">Java NIO</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#kqueue" target="_blank" rel="external">kqueue</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#连接和短连接" target="_blank" rel="external">连接和短连接</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#框架" target="_blank" rel="external">框架</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#零拷贝zero-copy" target="_blank" rel="external">零拷贝（Zero-copy）</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#序列化二进制协议" target="_blank" rel="external">序列化(二进制协议)</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#hessian" target="_blank" rel="external">Hessian</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#protobuf" target="_blank" rel="external">Protobuf</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据库" target="_blank" rel="external">数据库</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#基础理论" target="_blank" rel="external">基础理论</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据库设计的三大范式" target="_blank" rel="external">数据库设计的三大范式</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#mysql" target="_blank" rel="external">MySQL</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#原理" target="_blank" rel="external">原理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#innodb" target="_blank" rel="external">InnoDB</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#优化" target="_blank" rel="external">优化</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#索引" target="_blank" rel="external">索引</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#聚集索引-非聚集索引" target="_blank" rel="external">聚集索引, 非聚集索引</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#复合索引" target="_blank" rel="external">复合索引</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#自适应哈希索引ahi" target="_blank" rel="external">自适应哈希索引(AHI)</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#explain" target="_blank" rel="external">explain</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#nosql" target="_blank" rel="external">NoSQL</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#mongodb" target="_blank" rel="external">MongoDB</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#hbase" target="_blank" rel="external">Hbase</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#搜索引擎" target="_blank" rel="external">搜索引擎</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#搜索引擎原理" target="_blank" rel="external">搜索引擎原理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#lucene" target="_blank" rel="external">Lucene</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#elasticsearch" target="_blank" rel="external">Elasticsearch</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#solr" target="_blank" rel="external">Solr</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#sphinx" target="_blank" rel="external">sphinx</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#性能" target="_blank" rel="external">性能</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#性能优化方法论" target="_blank" rel="external">性能优化方法论</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#容量评估" target="_blank" rel="external">容量评估</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#cdn-网络" target="_blank" rel="external">CDN 网络</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#连接池" target="_blank" rel="external">连接池</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#性能调优" target="_blank" rel="external">性能调优</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#大数据" target="_blank" rel="external">大数据</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#流式计算" target="_blank" rel="external">流式计算</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#storm" target="_blank" rel="external">Storm</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#flink" target="_blank" rel="external">Flink</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#kafka-stream" target="_blank" rel="external">Kafka Stream</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#应用场景-1" target="_blank" rel="external">应用场景</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#hadoop" target="_blank" rel="external">Hadoop</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#hdfs" target="_blank" rel="external">HDFS</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#mapreduce" target="_blank" rel="external">MapReduce</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#yarn" target="_blank" rel="external">Yarn</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#spark" target="_blank" rel="external">Spark</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#安全" target="_blank" rel="external">安全</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#web-安全" target="_blank" rel="external">web 安全</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#xss" target="_blank" rel="external">XSS</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#csrf" target="_blank" rel="external">CSRF</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#sql-注入" target="_blank" rel="external">SQL 注入</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#hash-dos" target="_blank" rel="external">Hash Dos</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#脚本注入" target="_blank" rel="external">脚本注入</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#漏洞扫描工具" target="_blank" rel="external">漏洞扫描工具</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#验证码" target="_blank" rel="external">验证码</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ddos-防范" target="_blank" rel="external">DDoS 防范</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#用户隐私信息保护" target="_blank" rel="external">用户隐私信息保护</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#序列化漏洞" target="_blank" rel="external">序列化漏洞</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#加密解密" target="_blank" rel="external">加密解密</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#对称加密" target="_blank" rel="external">对称加密</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#哈希算法" target="_blank" rel="external">哈希算法</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#非对称加密" target="_blank" rel="external">非对称加密</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#服务器安全" target="_blank" rel="external">服务器安全</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据安全" target="_blank" rel="external">数据安全</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据备份" target="_blank" rel="external">数据备份</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#网络隔离" target="_blank" rel="external">网络隔离</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#内外网分离" target="_blank" rel="external">内外网分离</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#登录跳板机" target="_blank" rel="external">登录跳板机</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#授权认证" target="_blank" rel="external">授权、认证</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rbac" target="_blank" rel="external">RBAC</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#oauth20" target="_blank" rel="external">OAuth2.0</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#双因素认证2fa" target="_blank" rel="external">双因素认证（2FA）</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#单点登录sso" target="_blank" rel="external">单点登录(SSO)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#常用开源框架" target="_blank" rel="external">常用开源框架</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#开源协议" target="_blank" rel="external">开源协议</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#日志框架" target="_blank" rel="external">日志框架</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#log4jlog4j2" target="_blank" rel="external">Log4j、Log4j2</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#logback" target="_blank" rel="external">Logback</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#orm" target="_blank" rel="external">ORM</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#网络框架" target="_blank" rel="external">网络框架</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#web-框架" target="_blank" rel="external">Web 框架</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#spring-家族" target="_blank" rel="external">Spring 家族</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#工具框架" target="_blank" rel="external">工具框架</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式设计" target="_blank" rel="external">分布式设计</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#扩展性设计" target="_blank" rel="external">扩展性设计</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#稳定性--高可用" target="_blank" rel="external">稳定性 &amp; 高可用</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#硬件负载均衡" target="_blank" rel="external">硬件负载均衡</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#软件负载均衡" target="_blank" rel="external">软件负载均衡</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#限流" target="_blank" rel="external">限流</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#应用层容灾" target="_blank" rel="external">应用层容灾</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#跨机房容灾" target="_blank" rel="external">跨机房容灾</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#容灾演练流程" target="_blank" rel="external">容灾演练流程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#平滑启动" target="_blank" rel="external">平滑启动</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#数据库扩展" target="_blank" rel="external">数据库扩展</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#读写分离模式" target="_blank" rel="external">读写分离模式</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分片模式" target="_blank" rel="external">分片模式</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#服务治理" target="_blank" rel="external">服务治理</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#服务注册与发现" target="_blank" rel="external">服务注册与发现</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#服务路由控制" target="_blank" rel="external">服务路由控制</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式一致" target="_blank" rel="external">分布式一致</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#cap-与-base-理论" target="_blank" rel="external">CAP 与 BASE 理论</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式锁" target="_blank" rel="external">分布式锁</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式一致性算法" target="_blank" rel="external">分布式一致性算法</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#paxos" target="_blank" rel="external">PAXOS</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#zab" target="_blank" rel="external">Zab</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#raft" target="_blank" rel="external">Raft</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#gossip" target="_blank" rel="external">Gossip</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#两阶段提交多阶段提交" target="_blank" rel="external">两阶段提交、多阶段提交</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#幂等" target="_blank" rel="external">幂等</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式一致方案" target="_blank" rel="external">分布式一致方案</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式-leader-节点选举" target="_blank" rel="external">分布式 Leader 节点选举</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#tcctryconfirmcancel-柔性事务" target="_blank" rel="external">TCC(Try/Confirm/Cancel) 柔性事务</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#分布式文件系统" target="_blank" rel="external">分布式文件系统</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#唯一id-生成" target="_blank" rel="external">唯一ID 生成</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#全局唯一id" target="_blank" rel="external">全局唯一ID</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#一致性hash算法" target="_blank" rel="external">一致性Hash算法</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#设计思想--开发模式" target="_blank" rel="external">设计思想 &amp; 开发模式</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#ddddomain-driven-design---领域驱动设计" target="_blank" rel="external">DDD(Domain-driven Design - 领域驱动设计)</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#命令查询职责分离cqrs" target="_blank" rel="external">命令查询职责分离(CQRS)</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#贫血充血模型" target="_blank" rel="external">贫血，充血模型</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#actor-模式" target="_blank" rel="external">Actor 模式</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#响应式编程" target="_blank" rel="external">响应式编程</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#reactor" target="_blank" rel="external">Reactor</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rxjava" target="_blank" rel="external">RxJava</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#vertx" target="_blank" rel="external">Vert.x</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#dodaf20" target="_blank" rel="external">DODAF2.0</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#serverless" target="_blank" rel="external">Serverless</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#service-mesh" target="_blank" rel="external">Service Mesh</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#项目管理" target="_blank" rel="external">项目管理</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#架构评审" target="_blank" rel="external">架构评审</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#重构" target="_blank" rel="external">重构</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#代码规范" target="_blank" rel="external">代码规范</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#代码-review" target="_blank" rel="external">代码 Review</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#rup" target="_blank" rel="external">RUP</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#看板管理" target="_blank" rel="external">看板管理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#scrum" target="_blank" rel="external">SCRUM</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#敏捷开发" target="_blank" rel="external">敏捷开发</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#极限编程xp" target="_blank" rel="external">极限编程（XP）</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#结对编程" target="_blank" rel="external">结对编程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#pdca-循环质量管理" target="_blank" rel="external">PDCA 循环质量管理</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#fmea管理模式" target="_blank" rel="external">FMEA管理模式</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#通用业务术语" target="_blank" rel="external">通用业务术语</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#技术趋势" target="_blank" rel="external">技术趋势</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#政策法规" target="_blank" rel="external">政策、法规</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#法律" target="_blank" rel="external">法律</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#严格遵守刑法253法条" target="_blank" rel="external">严格遵守刑法253法条</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#架构师素质" target="_blank" rel="external">架构师素质</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#团队管理" target="_blank" rel="external">团队管理</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#招聘" target="_blank" rel="external">招聘</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#资讯" target="_blank" rel="external">资讯</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#行业资讯" target="_blank" rel="external">行业资讯</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#公众号列表" target="_blank" rel="external">公众号列表</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#博客" target="_blank" rel="external">博客</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#团队博客" target="_blank" rel="external">团队博客</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#个人博客" target="_blank" rel="external">个人博客</a></li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#综合门户社区" target="_blank" rel="external">综合门户、社区</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#问答讨论类社区" target="_blank" rel="external">问答、讨论类社区</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#行业数据分析" target="_blank" rel="external">行业数据分析</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#专项网站" target="_blank" rel="external">专项网站</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#其他类" target="_blank" rel="external">其他类</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#推荐参考书" target="_blank" rel="external">推荐参考书</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#在线电子书" target="_blank" rel="external">在线电子书</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#纸质书" target="_blank" rel="external">纸质书</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#开发方面" target="_blank" rel="external">开发方面</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#架构方面" target="_blank" rel="external">架构方面</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#技术管理方面" target="_blank" rel="external">技术管理方面</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#基础理论-1" target="_blank" rel="external">基础理论</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#工具方面" target="_blank" rel="external">工具方面</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#大数据方面" target="_blank" rel="external">大数据方面</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#技术资源" target="_blank" rel="external">技术资源</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#开源资源" target="_blank" rel="external">开源资源</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#手册文档教程" target="_blank" rel="external">手册、文档、教程</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#在线课堂" target="_blank" rel="external">在线课堂</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#会议活动" target="_blank" rel="external">会议、活动</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#常用app" target="_blank" rel="external">常用APP</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#找工作" target="_blank" rel="external">找工作</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#工具" target="_blank" rel="external">工具</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#代码托管" target="_blank" rel="external">代码托管</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#文件服务" target="_blank" rel="external">文件服务</a></li>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#综合云服务商" target="_blank" rel="external">综合云服务商</a><ul>
<li><a href="http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/#vps" target="_blank" rel="external">VPS</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>（Toc generated by <a href="https://github.com/xingshaocheng/simple-php-github-toc" target="_blank" rel="external">simple-php-github-toc</a> ）</strong></p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul>
<li><p><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html" target="_blank" rel="external">《java队列——queue详细分析》</a></p>
<ul>
<li>非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。</li>
<li>阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/mantu/p/5802393.html" target="_blank" rel="external">《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》</a></p>
</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul>
<li><a href="https://blog.csdn.net/qq_33642117/article/details/52040345" target="_blank" rel="external">《Java Set集合的详解》</a></li>
</ul>
<h2 id="链表、数组"><a href="#链表、数组" class="headerlink" title="链表、数组"></a>链表、数组</h2><ul>
<li><a href="https://blog.csdn.net/wz249863091/article/details/52853360" target="_blank" rel="external">《Java集合详解–什么是List》</a></li>
</ul>
<h2 id="字典、关联数组"><a href="#字典、关联数组" class="headerlink" title="字典、关联数组"></a>字典、关联数组</h2><ul>
<li><a href="https://baike.xsoftlab.net/view/250.html" target="_blank" rel="external">《Java map 详解 - 用法、遍历、排序、常用API等》</a></li>
</ul>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul>
<li><a href="https://blog.csdn.net/javazejian/article/details/53362993" target="_blank" rel="external">《java数据结构与算法之栈（Stack）设计与实现》</a></li>
<li><a href="http://www.runoob.com/java/java-stack-class.html" target="_blank" rel="external">《Java Stack 类》</a></li>
<li><a href="https://blog.csdn.net/f2006116/article/details/51375225" target="_blank" rel="external">《java stack的详细实现分析》</a><ul>
<li>Stack 是线程安全的。</li>
<li>内部使用数组保存数据，不够时翻倍。</li>
</ul>
</li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>每个节点最多有两个叶子节点。</p>
<ul>
<li><a href="https://blog.csdn.net/cai2016/article/details/52589952" target="_blank" rel="external">《二叉树》</a></li>
</ul>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul>
<li><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" target="_blank" rel="external">《完全二叉树》</a><ul>
<li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li>
</ul>
</li>
</ul>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<ul>
<li><a href="http://www.cnblogs.com/polly333/p/4798944.html" target="_blank" rel="external">《浅谈数据结构-平衡二叉树》</a></li>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 八 平衡查找树之2-3树》</a></li>
</ul>
<h3 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h3><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。</p>
<ul>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 七 二叉查找树》</a></li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul>
<li><a href="https://blog.csdn.net/sun_tttt/article/details/65445754" target="_blank" rel="external">《最容易懂得红黑树》</a><ul>
<li>添加阶段后，左旋或者右旋从而再次达到平衡。 </li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 九 平衡查找树之红黑树》</a></li>
</ul>
<h3 id="B-，B-，B-树"><a href="#B-，B-，B-树" class="headerlink" title="B-，B+，B*树"></a>B-，B+，B*树</h3><p>MySQL是基于B+树聚集索引组织表</p>
<ul>
<li><a href="https://blog.csdn.net/aqzwss/article/details/53074186" target="_blank" rel="external">《B-树，B+树，B*树详解》</a></li>
<li><a href="https://blog.csdn.net/bigtree_3721/article/details/73632405" target="_blank" rel="external">《B-树，B+树与B*树的优缺点比较》</a><ul>
<li>B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。<h3 id="LSM-树"><a href="#LSM-树" class="headerlink" title="LSM 树"></a>LSM 树</h3></li>
</ul>
</li>
</ul>
<p>LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的。<br>Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。</p>
<ul>
<li><p><a href="https://blog.csdn.net/dbanote/article/details/8897599" target="_blank" rel="external">《LSM树 VS B+树》</a></p>
<ul>
<li>B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能。</li>
<li>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/u014774781/article/details/52105708" target="_blank" rel="external">《LSM树（Log-Structured Merge Tree）存储引擎》</a></p>
<ul>
<li>极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。</li>
<li>优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。</li>
<li>Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。</li>
</ul>
</li>
</ul>
<h2 id="BitSet"><a href="#BitSet" class="headerlink" title="BitSet"></a>BitSet</h2><p>经常用于大规模数据的排重检查。</p>
<ul>
<li><a href="http://www.runoob.com/java/java-bitset-class.html" target="_blank" rel="external">《Java Bitset类》</a></li>
<li><a href="https://blog.csdn.net/caiandyong/article/details/51581160" target="_blank" rel="external">《Java BitSet（位集）》</a></li>
</ul>
<h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h2 id="排序、查找算法"><a href="#排序、查找算法" class="headerlink" title="排序、查找算法"></a>排序、查找算法</h2><ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul>
<li><a href="https://www.cnblogs.com/shen-hua/p/5424059.html" target="_blank" rel="external">《Java中的经典算法之选择排序（SelectionSort）》</a><ul>
<li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。</li>
</ul>
</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul>
<li><a href="https://blog.csdn.net/shuaizai88/article/details/73250615" target="_blank" rel="external">《冒泡排序的2种写法》</a><ul>
<li>相邻元素前后交换、把最大的排到最后。</li>
<li>时间复杂度 O(n²) </li>
</ul>
</li>
</ul>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul>
<li><a href="https://www.cnblogs.com/hapjin/p/5517667.html" target="_blank" rel="external">《排序算法总结之插入排序》</a></li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul>
<li><a href="http://developer.51cto.com/art/201403/430986.htm" target="_blank" rel="external">《坐在马桶上看算法：快速排序》</a><ul>
<li>一侧比另外一次都大或小。 <h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="external">《图解排序算法(四)之归并排序》</a><ul>
<li>分而治之，分成小份排序，在合并(重建一个新空间进行复制)。 </li>
</ul>
</li>
</ul>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>TODO</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul>
<li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="external">《图解排序算法(三)之堆排序》</a><ul>
<li>排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。</li>
</ul>
</li>
</ul>
<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><ul>
<li><a href="https://www.cnblogs.com/suvllian/p/5495780.html" target="_blank" rel="external">《计数排序和桶排序》</a><ul>
<li>和桶排序过程比较像，差别在于桶的数量。</li>
</ul>
</li>
</ul>
<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ul>
<li><a href="http://blog.51cto.com/ahalei/1362789" target="_blank" rel="external">《【啊哈！算法】最快最简单的排序——桶排序》</a></li>
<li><a href="https://blog.csdn.net/sunjinshengli/article/details/70738527" target="_blank" rel="external">《排序算法（三）：计数排序与桶排序》</a><ul>
<li>桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。</li>
<li>每个桶单独进行排序，然后再遍历每个桶。</li>
</ul>
</li>
</ul>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>按照个位、十位、百位、…依次来排。</p>
<ul>
<li><a href="https://blog.csdn.net/lemon_tree12138/article/details/51695211" target="_blank" rel="external">《排序算法系列：基数排序》</a></li>
<li><a href="https://www.cnblogs.com/skywang12345/p/3603669.html" target="_blank" rel="external">《基数排序》</a></li>
</ul>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><ul>
<li><p><a href="https://www.cnblogs.com/coderising/p/5708632.html" target="_blank" rel="external">《二分查找(java实现)》</a></p>
<ul>
<li>要求待查找的序列有序。</li>
<li>时间复杂度 O(logN)。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/maoyuanming0806/article/details/78176957" target="_blank" rel="external">《java实现二分查找-两种方式》</a></p>
<ul>
<li>while + 递归。<h3 id="Java-中的排序工具"><a href="#Java-中的排序工具" class="headerlink" title="Java 中的排序工具"></a>Java 中的排序工具</h3></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u011410529/article/details/56668545?locationnum=6&amp;fps=1" target="_blank" rel="external">《Arrays.sort和Collections.sort实现原理解析》</a><ul>
<li>Collections.sort算法调用的是合并排序。</li>
<li>Arrays.sort() 采用了2种排序算法 – 基本类型数据使用快速排序法，对象数组使用归并排序。</li>
</ul>
</li>
</ul>
<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>常用于大数据的排重，比如email，url 等。<br>核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。<br>优点：空间和时间效率都很高。<br>缺点：随着存入的元素数量增加，误算率随之增加。</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000002729689" target="_blank" rel="external">《布隆过滤器 – 空间效率很高的数据结构》</a></li>
<li><a href="https://blog.csdn.net/zdxiq000/article/details/57626464" target="_blank" rel="external">《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》</a></li>
<li><a href="https://blog.csdn.net/qq_30242609/article/details/71024458" target="_blank" rel="external">《基于Redis的布隆过滤器的实现》</a><ul>
<li>基于 Redis 的 Bitmap 数据结构。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/lemon_tree12138/article/details/47973715" target="_blank" rel="external">《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》</a><ul>
<li>使用Java中的 BitSet 类 和 加权和hash算法。</li>
</ul>
</li>
</ul>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>KMP：Knuth-Morris-Pratt算法（简称KMP）<br>核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">《字符串匹配的KMP算法》</a></li>
</ul>
<h2 id="深度优先、广度优先"><a href="#深度优先、广度优先" class="headerlink" title="深度优先、广度优先"></a>深度优先、广度优先</h2><ul>
<li><a href="https://www.cnblogs.com/0kk470/p/7555033.html" target="_blank" rel="external">《广度优先搜索BFS和深度优先搜索DFS》</a></li>
</ul>
<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul>
<li><a href="https://www.cnblogs.com/MrSaver/p/8641971.html" target="_blank" rel="external">《算法：贪婪算法基础》</a></li>
<li><a href="https://blog.csdn.net/a345017062/article/details/52443781" target="_blank" rel="external">《常见算法及问题场景——贪心算法》</a></li>
</ul>
<h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul>
<li><a href="https://blog.csdn.net/qfikh/article/details/51960331" target="_blank" rel="external">《 五大常用算法之四：回溯法》</a></li>
</ul>
<h2 id="剪枝算法"><a href="#剪枝算法" class="headerlink" title="剪枝算法"></a>剪枝算法</h2><ul>
<li><a href="https://blog.csdn.net/luningcsdn/article/details/50930276" target="_blank" rel="external">《α-β剪枝算法》</a></li>
</ul>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul>
<li><a href="https://www.cnblogs.com/little-YTMM/p/5372680.html" target="_blank" rel="external">《详解动态规划——邹博讲动态规划》</a></li>
<li><a href="https://blog.csdn.net/yao_zi_jie/article/details/54580283" target="_blank" rel="external">《动态规划算法的个人理解》</a></li>
</ul>
<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><ul>
<li><p><a href="https://blog.csdn.net/amds123/article/details/70173402" target="_blank" rel="external">《带你搞懂朴素贝叶斯分类算法》</a></p>
<ul>
<li>P(B|A)=P(A|B)P(B)/P(A)</li>
</ul>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用1》</a></p>
</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用2》</a></li>
</ul>
<h2 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="external">《推荐算法综述》</a></li>
<li><a href="https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems" target="_blank" rel="external">《TOP 10 开源的推荐系统简介》</a></li>
</ul>
<h2 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h2><ul>
<li><a href="https://blog.csdn.net/luoshixian099/article/details/51908175" target="_blank" rel="external">《算法导论–最小生成树（Kruskal和Prim算法）》</a></li>
</ul>
<h2 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h2><ul>
<li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719" target="_blank" rel="external">《Dijkstra算法详解》</a></li>
</ul>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="Java-并发"><a href="#Java-并发" class="headerlink" title="Java 并发"></a>Java 并发</h2><ul>
<li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="external">Java 并发知识合集</a></li>
<li><a href="https://github.com/CL0610/Java-concurrency/blob/master/Java并发知识图谱.png" target="_blank" rel="external">JAVA并发知识图谱</a></li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul>
<li><a href="http://www.importnew.com/18459.html" target="_blank" rel="external">《40个Java多线程问题总结》</a></li>
</ul>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul>
<li><a href="https://www.cnblogs.com/zhanht/p/5450325.html" target="_blank" rel="external">《Java并发编程——线程安全及解决机制简介》</a></li>
</ul>
<h2 id="一致性、事务"><a href="#一致性、事务" class="headerlink" title="一致性、事务"></a>一致性、事务</h2><h3 id="事务-ACID-特性"><a href="#事务-ACID-特性" class="headerlink" title="事务 ACID 特性"></a>事务 ACID 特性</h3><ul>
<li><a href="https://blog.csdn.net/u012440687/article/details/52116108" target="_blank" rel="external">《数据库事务ACID特性》</a></li>
</ul>
<h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul>
<li>未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。</li>
<li>读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。</li>
<li>可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。</li>
<li><p>序列化：所有事物串行处理（牺牲了效率）</p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="external">《理解事务的4种隔离级别》</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/z-sm/p/7245981.html" target="_blank" rel="external">数据库事务的四大特性及事务隔离级别</a></p>
</li>
<li><p><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html" target="_blank" rel="external">《MySQL的InnoDB的幻读问题 》</a></p>
<ul>
<li>幻读的例子非常清楚。</li>
<li>通过 SELECT … FOR UPDATE 解决。</li>
</ul>
</li>
<li><p><a href="http://database.51cto.com/art/201804/570101.htm" target="_blank" rel="external">《一篇文章带你读懂MySQL和InnoDB》</a></p>
<ul>
<li>图解脏读、不可重复读、幻读问题。</li>
</ul>
</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><ul>
<li><p><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="external">《【mysql】关于innodb中MVCC的一些理解》</a></p>
<ul>
<li>innodb 中 MVCC 用在 Repeatable-Read 隔离级别。</li>
<li>MVCC 会产生幻读问题（更新时异常。）</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/whoamiyang/article/details/51901888" target="_blank" rel="external">《轻松理解MYSQL MVCC 实现机制》</a></p>
<ul>
<li>通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间</li>
<li>每次只操作比当前版本小（或等于）的 行。</li>
</ul>
</li>
</ul>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="Java中的锁和同步类"><a href="#Java中的锁和同步类" class="headerlink" title="Java中的锁和同步类"></a>Java中的锁和同步类</h3><ul>
<li><p><a href="https://www.cnblogs.com/qifengshi/p/6831055.html" target="_blank" rel="external">《Java中的锁分类》</a></p>
<ul>
<li>主要包括 synchronized、ReentrantLock、和 ReadWriteLock。 </li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="external">《Java并发之AQS详解》</a></p>
</li>
<li><p><a href="http://cuisuqiang.iteye.com/blog/2020146" target="_blank" rel="external">《Java中信号量 Semaphore》</a></p>
<ul>
<li>有数量控制</li>
<li>申请用 acquire，申请不要则阻塞；释放用 release。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/davidwang456/p/6094947.html" target="_blank" rel="external">《java开发中的Mutex vs Semaphore》</a></p>
<ul>
<li>简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。     </li>
</ul>
</li>
</ul>
<h3 id="公平锁-amp-非公平锁"><a href="#公平锁-amp-非公平锁" class="headerlink" title="公平锁 &amp; 非公平锁"></a>公平锁 &amp; 非公平锁</h3><p>公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p>
<ul>
<li><a href="https://blog.csdn.net/EthanWhite/article/details/55508357" target="_blank" rel="external">《公平锁与非公平锁》</a><ul>
<li>默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。</li>
</ul>
</li>
</ul>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。</p>
<ul>
<li><p><a href="https://www.cnblogs.com/zhiqian-ali/p/6200874.html" target="_blank" rel="external">《【MySQL】悲观锁&amp;乐观锁》</a></p>
<ul>
<li>乐观锁的方式：版本号+重试方式</li>
<li>悲观锁：通过 select … for update 进行行锁(不可读、不可写，share 锁可读不可写)。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/Lawson/p/5008741.html" target="_blank" rel="external">《Mysql查询语句使用select.. for update导致的数据库死锁分析》</a></p>
<ul>
<li>mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。</li>
<li>锁相同数据的不同索引条件可能会引起死锁。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/zejin2008/p/5262751.html" target="_blank" rel="external">《Mysql并发时经典常见的死锁原因及解决方法》</a></p>
</li>
</ul>
<h3 id="乐观锁-amp-CAS"><a href="#乐观锁-amp-CAS" class="headerlink" title="乐观锁 &amp; CAS"></a>乐观锁 &amp; CAS</h3><ul>
<li><a href="http://www.importnew.com/20472.html" target="_blank" rel="external">《乐观锁的一种实现方式——CAS》</a><ul>
<li>和MySQL乐观锁方式相似，只不过是通过和原值进行比较。     </li>
</ul>
</li>
</ul>
<h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。</p>
<ul>
<li><a href="https://www.cnblogs.com/549294286/p/3766717.html" target="_blank" rel="external">《Java CAS 和ABA问题》</a></li>
<li><a href="https://blog.csdn.net/li954644351/article/details/50511879" target="_blank" rel="external">《Java 中 ABA问题及避免》</a><ul>
<li>AtomicStampedReference 和 AtomicStampedReference。 </li>
</ul>
</li>
</ul>
<h3 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h3><p>可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。</p>
<ul>
<li><p><a href="https://www.cnblogs.com/hapjin/p/4840107.html" target="_blank" rel="external">《JAVA中写时复制(Copy-On-Write)Map实现》</a></p>
<ul>
<li>实现读写分离，读取发生在原始数据上，写入发生在副本上。  </li>
<li>不用加锁，通过最终一致实现一致性。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/a494303877/article/details/53404623" target="_blank" rel="external">《聊聊并发-Java中的Copy-On-Write容器》</a></p>
</li>
</ul>
<h3 id="RingBuffer"><a href="#RingBuffer" class="headerlink" title="RingBuffer"></a>RingBuffer</h3><ul>
<li><a href="http://www.cnblogs.com/l00l/p/4115001.html" target="_blank" rel="external">《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》</a></li>
</ul>
<h3 id="可重入锁-amp-不可重入锁"><a href="#可重入锁-amp-不可重入锁" class="headerlink" title="可重入锁 &amp; 不可重入锁"></a>可重入锁 &amp; 不可重入锁</h3><ul>
<li><p><a href="https://www.cnblogs.com/dj3839/p/6580765.html" target="_blank" rel="external">《可重入锁和不可重入锁》</a></p>
<ul>
<li>通过简单代码举例说明可重入锁和不可重入锁。</li>
<li>可重入锁指同一个线程可以再次获得之前已经获得的锁。</li>
<li>可重入锁可以用户避免死锁。</li>
<li>Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/baizhanshi/p/7211802.html" target="_blank" rel="external">《ReenTrantLock可重入锁（和synchronized的区别）总结》</a></p>
<ul>
<li>synchronized 使用方便，编译器来加锁，是非公平锁。</li>
<li>ReenTrantLock 使用灵活，锁的公平性可以定制。</li>
<li>相同加锁场景下，推荐使用 synchronized。</li>
</ul>
</li>
</ul>
<h3 id="互斥锁-amp-共享锁"><a href="#互斥锁-amp-共享锁" class="headerlink" title="互斥锁 &amp; 共享锁"></a>互斥锁 &amp; 共享锁</h3><p>互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。<br>共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock 中的读锁是共享锁。</p>
<ul>
<li><a href="https://www.cnblogs.com/liang1101/p/6475555.html" target="_blank" rel="external">《ReadWriteLock场景应用》</a></li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul>
<li><a href="https://blog.csdn.net/yunfenglw/article/details/45950305" target="_blank" rel="external">《“死锁”四个必要条件的合理解释》</a><ul>
<li>互斥、持有、不可剥夺、环形等待。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/u014039577/article/details/52351626" target="_blank" rel="external">Java如何查看死锁？</a></p>
<ul>
<li>JConsole 可以识别死锁。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/bohu83/article/details/51135061" target="_blank" rel="external">java多线程系列：死锁及检测</a></p>
<ul>
<li>jstack 可以显示死锁。</li>
</ul>
</li>
</ul>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h2><ul>
<li><a href="https://segmentfault.com/a/1190000003692840" target="_blank" rel="external">《操作系统基础知识——操作系统的原理，类型和结构》</a></li>
</ul>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h3><p>典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。</p>
<ul>
<li><a href="https://blog.csdn.net/zero__007/article/details/54089730" target="_blank" rel="external">《从Java视角理解CPU缓存和伪共享》</a></li>
</ul>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>TODO</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul>
<li><a href="https://blog.csdn.net/asdf_1024/article/details/78978437" target="_blank" rel="external">《线程的生命周期及状态转换详解》</a></li>
</ul>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul>
<li><a href="https://www.thinksaas.cn/group/topic/839375/" target="_blank" rel="external">《终结python协程—-从yield到actor模型的实现》</a><ul>
<li>线程的调度是由操作系统负责，协程调度是程序自行负责</li>
<li>与线程相比，协程减少了无谓的操作系统切换.</li>
<li>实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.</li>
</ul>
</li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">《Linux 命令大全》</a></li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ul>
<li><a href="https://blog.csdn.net/q291611265/article/details/48465113" target="_blank" rel="external">《设计模式的六大原则》</a><ul>
<li>开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。</li>
<li>里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。</li>
<li>依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。</li>
<li>接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。</li>
<li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。</li>
<li>合成复用原则：尽量使用合成/聚合,而不是使用继承。</li>
</ul>
</li>
</ul>
<h2 id="23种常见设计模式"><a href="#23种常见设计模式" class="headerlink" title="23种常见设计模式"></a>23种常见设计模式</h2><ul>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="external">《设计模式》</a></li>
<li><a href="https://www.cnblogs.com/susanws/p/5510229.html" target="_blank" rel="external">《23种设计模式全解析》</a></li>
<li><a href="https://github.com/ToryZhou/design-pattern" target="_blank" rel="external">《设计模式类图与示例》</a></li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><p><a href="http://blog.jobbole.com/62314/" target="_blank" rel="external">《细数JDK里的设计模式》</a></p>
<ul>
<li><p>结构型模式：</p>
<ul>
<li>适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。</li>
<li>桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；</li>
<li>组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。</li>
<li>装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。</li>
<li>享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。</li>
<li>代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy</li>
</ul>
</li>
<li><p>创建模式:</p>
<ul>
<li>抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。</li>
<li>建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。</li>
<li>工厂方法：就是 <strong>一个返*</strong> 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。</li>
<li>原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。</li>
<li>单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。</li>
</ul>
</li>
<li>行为模式：<ul>
<li>责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。</li>
<li>命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。</li>
<li>解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。</li>
<li>迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。</li>
<li>中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。</li>
<li>空对象模式：如 java.util.Collections#emptyList()。</li>
<li>观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。</li>
<li>模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/hwaggLee/p/4510687.html" target="_blank" rel="external">《Spring-涉及到的设计模式汇总》</a></p>
</li>
<li><a href="https://blog.csdn.net/u012387062/article/details/54719114" target="_blank" rel="external">《Mybatis使用的设计模式》</a></li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li><a href="https://blog.csdn.net/YECrazy/article/details/79481964" target="_blank" rel="external">《单例模式的三种实现 以及各自的优缺点》</a></li>
<li><a href="https://www.cnblogs.com/ttylinux/p/6498822.html" target="_blank" rel="external">《单例模式－－反射－－防止序列化破坏单例模式》</a><ul>
<li>使用枚举类型。</li>
</ul>
</li>
</ul>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>TODO</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul>
<li><a href="http://www.runoob.com/design-pattern/mvc-pattern.html" target="_blank" rel="external">《MVC 模式》</a><ul>
<li>模型(model)－视图(view)－控制器(controller) </li>
</ul>
</li>
</ul>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><ul>
<li><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="external">《理解 IOC》</a></li>
<li><a href="https://www.cnblogs.com/NancyStartOnce/p/6813162.html" target="_blank" rel="external">《IOC 的理解与解释》</a><ul>
<li>正向控制：传统通过new的方式。反向控制，通过容器注入对象。</li>
<li>作用：用于模块解耦。</li>
<li>DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。</li>
</ul>
</li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul>
<li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="external">《轻松理解AOP(面向切面编程)》</a></li>
<li><a href="https://www.cnblogs.com/hongwz/p/5764917.html" target="_blank" rel="external">《Spring AOP详解》</a></li>
<li><a href="http://www.importnew.com/24305.html" target="_blank" rel="external">《Spring AOP的实现原理》</a><ul>
<li>Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。</li>
</ul>
</li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/" target="_blank" rel="external">《Spring AOP 实现原理与 CGLIB 应用》</a><ul>
<li>Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类 </li>
</ul>
</li>
</ul>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul>
<li><a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="external">《UML教程》</a></li>
</ul>
<h2 id="微服务思想"><a href="#微服务思想" class="headerlink" title="微服务思想"></a>微服务思想</h2><ul>
<li><a href="https://www.cnblogs.com/wintersun/p/6219259.html" target="_blank" rel="external">《微服务架构设计》</a></li>
<li><a href="http://www.infoq.com/cn/articles/micro-service-technology-stack" target="_blank" rel="external">《微服务架构技术栈选型手册》</a></li>
</ul>
<h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><ul>
<li><p><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="external">《微服务架构的理论基础 - 康威定律》</a></p>
<ul>
<li>定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。</li>
<li>定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。</li>
<li>定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。</li>
<li>定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。</li>
</ul>
</li>
<li><p><a href="https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf" target="_blank" rel="external">《微服务架构核⼼20讲》</a></p>
</li>
</ul>
<h1 id="运维-amp-统计-amp-技术支持"><a href="#运维-amp-统计-amp-技术支持" class="headerlink" title="运维 &amp; 统计 &amp; 技术支持"></a>运维 &amp; 统计 &amp; 技术支持</h1><h2 id="常规监控"><a href="#常规监控" class="headerlink" title="常规监控"></a>常规监控</h2><ul>
<li><p><a href="https://blog.csdn.net/enweitech/article/details/77849205" target="_blank" rel="external">《腾讯业务系统监控的修炼之路》</a></p>
<ul>
<li>监控的方式：主动、被动、旁路(比如舆情监控)</li>
<li>监控类型： 基础监控、服务端监控、客户端监控、<br>监控、用户端监控</li>
<li>监控的目标：全、块、准</li>
<li>核心指标：请求量、成功率、耗时</li>
</ul>
</li>
<li><p><a href="https://www.oschina.net/news/67525/monitoring-tools" target="_blank" rel="external">《开源还是商用？十大云运维监控工具横评》</a></p>
<ul>
<li>Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。</li>
</ul>
</li>
<li><p><a href="http://developer.51cto.com/art/201612/525373.htm" target="_blank" rel="external">《监控报警系统搭建及二次开发经验》</a></p>
</li>
</ul>
<p><strong>命令行监控工具</strong></p>
<ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html" target="_blank" rel="external">《常用命令行监控工具》</a></p>
<ul>
<li>top、sar、tsar、nload</li>
</ul>
</li>
<li><p><a href="http://blog.jobbole.com/96846/" target="_blank" rel="external">《20个命令行工具监控 Linux 系统性能》</a></p>
</li>
<li><p><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》</a></p>
</li>
</ul>
<h2 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h2><p>APM —  Application Performance Management</p>
<ul>
<li><p><a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="external">《Dapper，大规模分布式系统的跟踪系统》</a></p>
</li>
<li><p><a href="http://opentracing.io" target="_blank" rel="external">CNCF OpenTracing</a>，<a href="https://github.com/opentracing-contrib/opentracing-specification-zh" target="_blank" rel="external">中文版</a></p>
</li>
<li><p>主要开源软件，按字母排序</p>
<ul>
<li><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="external">Apache SkyWalking</a></li>
<li><a href="https://github.com/dianping/cat" target="_blank" rel="external">CAT</a></li>
<li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="external">CNCF jaeger</a></li>
<li><a href="https://github.com/naver/pinpoint" target="_blank" rel="external">Pinpoint</a></li>
<li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">Zipkin</a></li>
</ul>
</li>
<li><p><a href="http://www.infoq.com/cn/articles/apm-Pinpoint-practice" target="_blank" rel="external">《开源APM技术选型与实战》</a></p>
<ul>
<li>主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。</li>
</ul>
</li>
</ul>
<h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/25195217" target="_blank" rel="external">《流量统计的基础：埋点》</a></p>
<ul>
<li>常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度</li>
</ul>
</li>
<li><p><a href="http://www.25xt.com/company/17066.html" target="_blank" rel="external">《APP埋点常用的统计工具、埋点目标和埋点内容》</a></p>
<ul>
<li>第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。</li>
</ul>
</li>
<li><p><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="external">《美团点评前端无痕埋点实践》</a></p>
<ul>
<li>所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。 </li>
</ul>
</li>
</ul>
<h2 id="持续集成-CI-CD"><a href="#持续集成-CI-CD" class="headerlink" title="持续集成(CI/CD)"></a>持续集成(CI/CD)</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="external">《持续集成是什么？》</a></li>
<li><a href="https://www.testwo.com/article/1170" target="_blank" rel="external">《8个流行的持续集成工具》</a></li>
</ul>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><ul>
<li><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000" target="_blank" rel="external">《使用Jenkins进行持续集成》</a></li>
</ul>
<h3 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h3><p>开发、测试、生成环境分离。</p>
<ul>
<li><a href="https://my.oschina.net/sancuo/blog/214904" target="_blank" rel="external">《开发环境、生产环境、测试环境的基本理解和区》</a></li>
</ul>
<h2 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h2><h3 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h3><ul>
<li><a href="http://www.ansible.com.cn/" target="_blank" rel="external">《Ansible中文权威指南》</a></li>
<li><a href="https://www.cnblogs.com/heiye123/articles/7855890.html" target="_blank" rel="external">《Ansible基础配置和企业级项目实用案例》</a></li>
</ul>
<h3 id="puppet"><a href="#puppet" class="headerlink" title="puppet"></a>puppet</h3><ul>
<li><a href="https://www.cnblogs.com/keerya/p/8040071.html" target="_blank" rel="external">《自动化运维工具——puppet详解》</a></li>
</ul>
<h3 id="chef"><a href="#chef" class="headerlink" title="chef"></a>chef</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/" target="_blank" rel="external">《Chef 的安装与使用》</a></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="TDD-理论"><a href="#TDD-理论" class="headerlink" title="TDD 理论"></a>TDD 理论</h3><ul>
<li><a href="https://www.jianshu.com/p/62f16cd4fef3" target="_blank" rel="external">《深度解读 - TDD（测试驱动开发）》</a><ul>
<li>基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.</li>
<li>好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈； </li>
</ul>
</li>
</ul>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul>
<li><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="external">《Java单元测试之JUnit篇》</a></li>
<li><a href="https://blog.csdn.net/hotdust/article/details/53406086" target="_blank" rel="external">《JUnit 4 与 TestNG 对比》</a><ul>
<li>TestNG 覆盖 JUnit 功能，适用于更复杂的场景。 </li>
</ul>
</li>
<li><a href="https://blog.csdn.net/wqetfg/article/details/50900512" target="_blank" rel="external">《单元测试主要的测试功能点》</a><ul>
<li>模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。 </li>
</ul>
</li>
</ul>
<h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><ul>
<li><a href="https://blog.csdn.net/blueheart20/article/details/52170790" target="_blank" rel="external">《Apache ab 测试使用指南》</a></li>
<li><a href="https://www.cnblogs.com/binyue/p/6141088.html" target="_blank" rel="external">《大型网站压力测试及优化方案》</a></li>
<li><a href="http://news.chinabyte.com/466/14126966.shtml" target="_blank" rel="external">《10大主流压力/负载/性能测试工具推荐》</a></li>
<li><a href="http://quentinxxz.iteye.com/blog/2249799" target="_blank" rel="external">《真实流量压测工具 tcpcopy应用浅析》</a></li>
<li><a href="https://www.cnblogs.com/jwentest/p/7136727.html" target="_blank" rel="external">《nGrinder 简易使用教程》</a></li>
</ul>
<h3 id="全链路压测"><a href="#全链路压测" class="headerlink" title="全链路压测"></a>全链路压测</h3><ul>
<li><a href="http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot" target="_blank" rel="external">《京东618：升级全链路压测方案，打造军演机器人ForceBot》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30306892" target="_blank" rel="external">《饿了么全链路压测的探索与实践》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28355759" target="_blank" rel="external">《四大语言，八大框架｜滴滴全链路压测解决之道》</a></li>
<li><a href="https://www.jianshu.com/p/27060fd61f72" target="_blank" rel="external">《全链路压测经验》</a></li>
</ul>
<h3 id="A-B-、灰度、蓝绿测试"><a href="#A-B-、灰度、蓝绿测试" class="headerlink" title="A/B 、灰度、蓝绿测试"></a>A/B 、灰度、蓝绿测试</h3><ul>
<li><a href="https://testerhome.com/topics/11165" target="_blank" rel="external">《技术干货 | AB 测试和灰度发布探索及实践》</a></li>
<li><p><a href="http://blog.51cto.com/purplegrape/1403123" target="_blank" rel="external">《nginx 根据IP 进行灰度发布》</a></p>
</li>
<li><p><a href="https://www.v2ex.com/t/344341" target="_blank" rel="external">《蓝绿部署、A/B 测试以及灰度发布》</a></p>
</li>
</ul>
<h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><ul>
<li><a href="https://blog.csdn.net/enweitech/article/details/52910082" target="_blank" rel="external">《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》</a></li>
</ul>
<h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><ul>
<li><a href="http://blog.chinaunix.net/uid-20201831-id-5775661.html" target="_blank" rel="external">《KVM详解，太详细太深入了，经典》</a></li>
<li><a href="https://www.coderxing.com/kvm-install.html" target="_blank" rel="external">《【图文】KVM 虚拟机安装详解》</a></li>
</ul>
<h3 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h3><ul>
<li><a href="https://www.cnblogs.com/sddai/p/5931201.html" target="_blank" rel="external">《Xen虚拟化基本原理详解》</a></li>
</ul>
<h3 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h3><ul>
<li><a href="https://blog.csdn.net/longerzone/article/details/44829255" target="_blank" rel="external">《开源Linux容器 OpenVZ 快速上手指南》</a></li>
</ul>
<h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li><a href="https://www.cnblogs.com/SzeCheng/p/6822905.html" target="_blank" rel="external">《几张图帮你理解 docker 基本原理及快速入门》</a></li>
<li><a href="https://draveness.me/docker" target="_blank" rel="external">《Docker 核心技术与实现原理》</a></li>
<li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="external">《Docker 教程》</a></li>
</ul>
<h2 id="云技术"><a href="#云技术" class="headerlink" title="云技术"></a>云技术</h2><h3 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h3><ul>
<li><a href="https://www.cnblogs.com/klb561/p/8660264.html" target="_blank" rel="external">《OpenStack构架知识梳理》</a></li>
</ul>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><ul>
<li><a href="https://www.cnblogs.com/jetzhang/p/6068773.html" target="_blank" rel="external">《一分钟告诉你究竟DevOps是什么鬼？》</a></li>
<li><a href="http://www.infoq.com/cn/articles/detail-analysis-of-devops" target="_blank" rel="external">《DevOps详解》</a></li>
</ul>
<h2 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h2><ul>
<li><a href="http://www.confluence.cn/" target="_blank" rel="external">Confluence-收费文档管理系统</a></li>
<li>GitLab?</li>
<li>Wiki</li>
</ul>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li><p><a href="https://blog.csdn.net/qq_25797077/article/details/52200722" target="_blank" rel="external">《Ngnix的基本学习-多进程和Apache的比较》</a></p>
<ul>
<li>Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。</li>
<li>事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。  </li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/cunkouzh/p/5410154.html" target="_blank" rel="external">《nginx与Apache的对比以及优缺点》</a></p>
<ul>
<li>nginx只适合静态和反向代理，不适合处理动态请求。</li>
</ul>
</li>
</ul>
<h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><ul>
<li><a href="http://openresty.org/cn/" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://www.linkedkeeper.com/detail/blog.action?bid=1034" target="_blank" rel="external">《浅谈 OpenResty》</a><ul>
<li>通过 Lua 模块可以在Nginx上进行开发。 </li>
</ul>
</li>
</ul>
<h3 id="Apache-Httpd"><a href="#Apache-Httpd" class="headerlink" title="Apache Httpd"></a>Apache Httpd</h3><ul>
<li><a href="http://httpd.apache.org/" target="_blank" rel="external">官方网站</a></li>
</ul>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h4><ul>
<li><a href="https://www.cnblogs.com/hggen/p/6264475.html" target="_blank" rel="external">《TOMCAT原理详解及请求过程》</a></li>
<li><a href="https://www.cnblogs.com/crazylqy/p/4706223.html" target="_blank" rel="external">《Tomcat服务器原理详解》</a></li>
<li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="external">《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/xlgen157387/article/details/79006434" target="_blank" rel="external">《四张图带你了解Tomcat系统架构》</a></p>
</li>
<li><p><a href="https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/" target="_blank" rel="external">《JBoss vs. Tomcat: Choosing A Java Application Server》</a></p>
<ul>
<li>Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Spring。</li>
<li>Jboss 实现全部了JEE特性，软件开源免费、文档收费。</li>
</ul>
</li>
</ul>
<h4 id="调优方案"><a href="#调优方案" class="headerlink" title="调优方案"></a>调优方案</h4><ul>
<li><p><a href="https://www.cnblogs.com/sunfenqing/p/7339058.html" target="_blank" rel="external">《Tomcat 调优方案》</a></p>
<ul>
<li>启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）； </li>
</ul>
</li>
<li><p><a href="http://blog.chinaunix.net/uid-20662363-id-3012760.html" target="_blank" rel="external">《tomcat http协议与ajp协议》</a></p>
</li>
<li><a href="http://dmouse.iteye.com/blog/1354527" target="_blank" rel="external">《AJP与HTTP比较和分析》</a><ul>
<li>AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。</li>
<li>并发高时，AJP协议优于HTTP协议。</li>
</ul>
</li>
</ul>
<h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/" target="_blank" rel="external">《Jetty 的工作原理以及与 Tomcat 的比较》</a></li>
<li><a href="https://blog.csdn.net/doutao6677/article/details/51957288" target="_blank" rel="external">《jetty和tomcat优势比较》</a><ul>
<li>架构比较:Jetty的架构比Tomcat的更为简单。</li>
<li>性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。</li>
<li>其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。 </li>
</ul>
</li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li><a href="https://blog.csdn.net/clementad/article/details/48229243" target="_blank" rel="external">《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》</a></li>
</ul>
<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html" target="_blank" rel="external">《HashMap本地缓存》</a></p>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html" target="_blank" rel="external">《EhCache本地缓存》</a></p>
<ul>
<li>堆内、堆外、磁盘三级缓存。</li>
<li>可按照缓存空间容量进行设置。</li>
<li>按照时间、次数等过期策略。</li>
</ul>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html" target="_blank" rel="external">《Guava Cache》</a></p>
<ul>
<li>简单轻量、无堆外、磁盘缓存。</li>
</ul>
</li>
</ul>
<ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html" target="_blank" rel="external">《Nginx本地缓存》</a></p>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html" target="_blank" rel="external">《Pagespeed—懒人工具，服务器端加速》</a></p>
</li>
</ul>
<h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html" target="_blank" rel="external">《浏览器端缓存》</a></p>
<ul>
<li>主要是利用 Cache-Control 参数。</li>
</ul>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w" target="_blank" rel="external">《H5 和移动端 WebView 缓存机制解析与实战》</a></p>
</li>
</ul>
<h2 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h2><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><ul>
<li><a href="https://github.com/jiangwenyuan/nuster" target="_blank" rel="external">nuster</a> - nuster cache</li>
<li><a href="https://github.com/varnishcache/varnish-cache" target="_blank" rel="external">varnish</a> - varnish cache</li>
<li><a href="https://github.com/squid-cache/squid" target="_blank" rel="external">squid</a> - squid cache</li>
</ul>
<h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><ul>
<li><a href="http://www.runoob.com/Memcached/Memcached-tutorial.html" target="_blank" rel="external">《Memcached 教程》</a></li>
<li><a href="https://blog.csdn.net/chenleixing/article/details/47035453" target="_blank" rel="external">《深入理解Memcached原理》</a><ul>
<li>采用多路复用技术提高并发性。</li>
<li>slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后 把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk 的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。</li>
</ul>
</li>
<li><a href="https://www.jianshu.com/p/36e5cd400580" target="_blank" rel="external">《Memcached软件工作原理》</a></li>
<li><p><a href="http://zhihuzeye.com/archives/2361" target="_blank" rel="external">《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/liu251890347/article/details/37690045" target="_blank" rel="external">《memcache 中 add 、 set 、replace 的区别》</a></p>
<ul>
<li>区别在于当key存在还是不存在时，返回值是true和false的。</li>
</ul>
</li>
<li><p><a href="https://pan.baidu.com/s/1qX00Lti?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=" target="_blank" rel="external"><strong>《memcached全面剖析》</strong></a></p>
</li>
</ul>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">《Redis 教程》</a></li>
<li><a href="https://blog.csdn.net/wcf373722432/article/details/78678504" target="_blank" rel="external">《redis底层原理》</a><ul>
<li>使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。</li>
<li>使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。</li>
</ul>
</li>
<li><p><a href="http://doc.redisfans.com/topic/persistence.html" target="_blank" rel="external">《Redis持久化方式》</a></p>
<ul>
<li>RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。</li>
<li>AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。</li>
<li>也可以两者结合使用。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/chunlongyu/article/details/53346436" target="_blank" rel="external">《分布式缓存–序列3–原子操作与CAS乐观锁》</a></p>
</li>
</ul>
<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul>
<li><a href="https://blog.csdn.net/sunhuiliang85/article/details/73656830" target="_blank" rel="external">《Redis单线程架构》</a></li>
</ul>
<h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><ul>
<li><a href="https://blog.csdn.net/qq_29108585/article/details/63251491" target="_blank" rel="external">《redis的回收策略》</a></li>
</ul>
<h3 id="Tair"><a href="#Tair" class="headerlink" title="Tair"></a>Tair</h3><ul>
<li><a href="https://github.com/alibaba/tair" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://blog.csdn.net/farphone/article/details/53522383" target="_blank" rel="external">《Tair和Redis的对比》</a></li>
<li>特点：可以配置备份节点数目，通过异步同步到备份节点</li>
<li>一致性Hash算法。</li>
<li>架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。</li>
</ul>
<p>几种存储引擎:</p>
<ul>
<li>MDB，完全内存性，可以用来存储Session等数据。</li>
<li>Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作</li>
<li>LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。</li>
<li>Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。</li>
</ul>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul>
<li><p><a href="https://www.cnblogs.com/charlesblc/p/6045238.html" target="_blank" rel="external">《消息队列-推/拉模式学习 &amp; ActiveMQ及JMS学习》</a></p>
<ul>
<li>RabbitMQ 消费者默认是推模式（也支持拉模式）。</li>
<li>Kafka 默认是拉模式。</li>
<li>Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。</li>
<li>Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/yunfeng482/article/details/72856762" target="_blank" rel="external">《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》</a></p>
</li>
</ul>
<h3 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h3><p>消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。</p>
<ul>
<li><a href="https://blog.csdn.net/yanghua_kobe/article/details/43877281" target="_blank" rel="external">《消息总线VS消息队列》</a></li>
</ul>
<h3 id="消息的顺序"><a href="#消息的顺序" class="headerlink" title="消息的顺序"></a>消息的顺序</h3><ul>
<li><a href="https://www.cnblogs.com/cjsblog/p/8267892.html" target="_blank" rel="external">《如何保证消费者接收消息的顺序》</a></li>
</ul>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。</p>
<ul>
<li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780" target="_blank" rel="external">《RabbitMQ的应用场景以及基本原理介绍》</a></li>
<li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="external">《消息队列之 RabbitMQ》</a> </li>
<li><a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">《RabbitMQ之消息确认机制（事务+Confirm）》</a></li>
</ul>
<h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。</p>
<ul>
<li><a href="https://www.jianshu.com/p/824066d70da8" target="_blank" rel="external">《RocketMQ 实战之快速入门》</a></li>
<li><a href="http://www.iocoder.cn/categories/RocketMQ/?vip&amp;architect-awesome" target="_blank" rel="external">《RocketMQ 源码解析》</a></li>
</ul>
<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>纯Java实现，兼容JMS，可以内嵌于Java应用中。</p>
<ul>
<li><a href="https://www.cnblogs.com/wintersun/p/3962302.html" target="_blank" rel="external">《ActiveMQ消息队列介绍》</a></li>
</ul>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>高吞吐量、采用拉模式。适合高IO场景，比如日志同步。</p>
<ul>
<li><a href="http://kafka.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://blog.csdn.net/allthesametome/article/details/47362451" target="_blank" rel="external">《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》</a></li>
<li><a href="http://lxw1234.com/archives/2015/10/538.htm" target="_blank" rel="external">《Kafka分区机制介绍与示例》</a></li>
</ul>
<h3 id="Redis-消息推送"><a href="#Redis-消息推送" class="headerlink" title="Redis 消息推送"></a>Redis 消息推送</h3><p>生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_34212276/article/details/78455004" target="_blank" rel="external">《Redis学习笔记之十：Redis用作消息队列》</a></li>
</ul>
<h3 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h3><p> TODO</p>
<h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><h3 id="单机定时调度"><a href="#单机定时调度" class="headerlink" title="单机定时调度"></a>单机定时调度</h3><ul>
<li><p><a href="https://www.cnblogs.com/shuaiqing/p/7742382.html" target="_blank" rel="external">《linux定时任务cron配置》</a></p>
</li>
<li><p><a href="https://my.oschina.net/daquan/blog/483305" target="_blank" rel="external">《Linux cron运行原理》</a></p>
<ul>
<li>fork 进程 + sleep 轮询</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="external">《Quartz使用总结》</a></p>
</li>
<li><a href="https://blog.csdn.net/wenniuwuren/article/details/42082981/" target="_blank" rel="external">《Quartz源码解析 —- 触发器按时启动原理》</a></li>
<li><a href="https://www.jianshu.com/p/bab8e4e32952" target="_blank" rel="external">《quartz原理揭秘和源码解读》</a><ul>
<li>定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。</li>
</ul>
</li>
</ul>
<h3 id="分布式定时调度"><a href="#分布式定时调度" class="headerlink" title="分布式定时调度"></a>分布式定时调度</h3><ul>
<li><p><a href="https://blog.csdn.net/qq_16216221/article/details/70314337" target="_blank" rel="external">《这些优秀的国产分布式任务调度系统，你用过几个？》</a></p>
<ul>
<li>opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="external">《Quartz任务调度的基本实现原理》</a></p>
<ul>
<li>Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的 </li>
</ul>
</li>
<li><a href="http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Lite 源码解析》</a></li>
<li><a href="http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Cloud 源码解析》</a></li>
</ul>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><ul>
<li><p><a href="https://blog.csdn.net/top_code/article/details/54615853" target="_blank" rel="external">《从零开始实现RPC框架 - RPC原理及实现》</a></p>
<ul>
<li>核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/testcs_dn/article/details/78050590" target="_blank" rel="external">《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》</a></p>
</li>
</ul>
<h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><ul>
<li><a href="http://dubbo.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://www.cnblogs.com/steven520213/p/7606598.html" target="_blank" rel="external">dubbo实现原理简单介绍</a></li>
</ul>
<p><strong> SPI </strong><br>TODO</p>
<h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><ul>
<li><a href="http://thrift.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://blog.csdn.net/kesonyk/article/details/50924489" target="_blank" rel="external">《Thrift RPC详解》</a><ul>
<li>支持多语言，通过中间语言定义接口。</li>
</ul>
</li>
</ul>
<h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><p>服务端可以认证加密，在外网环境下，可以保证数据安全。</p>
<ul>
<li><a href="https://grpc.io/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://www.cnblogs.com/LBSer/p/4853234.html" target="_blank" rel="external">《你应该知道的RPC原理》</a></li>
</ul>
<h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><h3 id="Sharding-Jdbc"><a href="#Sharding-Jdbc" class="headerlink" title="Sharding Jdbc"></a>Sharding Jdbc</h3><ul>
<li><a href="http://shardingjdbc.io/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="日志搜集"><a href="#日志搜集" class="headerlink" title="日志搜集"></a>日志搜集</h3><ul>
<li><a href="http://cjting.me/misc/build-log-system-with-elkb/" target="_blank" rel="external">《从零开始搭建一个ELKB日志收集系统》</a></li>
<li><a href="https://blog.csdn.net/lzw_2006/article/details/51280058" target="_blank" rel="external">《用ELK搭建简单的日志收集分析系统》</a></li>
<li><a href="https://www.cnblogs.com/beginmind/p/6058194.html" target="_blank" rel="external">《日志收集系统-探究》</a></li>
</ul>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><ul>
<li><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">Apollo - 携程开源的配置中心应用</a></p>
<ul>
<li>Spring Boot 和 Spring Cloud</li>
<li>支持推、拉模式更新配置</li>
<li>支持多种语言 </li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/u011320740/article/details/78742625" target="_blank" rel="external">《基于zookeeper实现统一配置管理》</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/shamo89/p/8016908.html" target="_blank" rel="external">《 Spring Cloud Config 分布式配置中心使用教程》</a></p>
</li>
</ul>
<p>servlet 3.0 异步特性可用于配置中心的客户端</p>
<ul>
<li><a href="https://www.cnblogs.com/dogdogwang/p/7151866.html" target="_blank" rel="external">《servlet3.0 新特性——异步处理》</a></li>
</ul>
<h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h2><p>主要职责：请求转发、安全认证、协议转换、容灾。</p>
<ul>
<li><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/" target="_blank" rel="external">《API网关那些儿》</a></li>
<li><p><a href="http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo" target="_blank" rel="external">《谈API网关的背景、架构以及落地方案》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zhanglh046/article/details/78651993" target="_blank" rel="external">《使用Zuul构建API Gateway》</a></p>
</li>
<li><a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;architect-awesome" target="_blank" rel="external">《Spring Cloud Gateway 源码解析》</a></li>
<li><a href="https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A" target="_blank" rel="external">《HTTP API网关选择之一Kong介绍》</a></li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="OSI-七层协议"><a href="#OSI-七层协议" class="headerlink" title="OSI 七层协议"></a>OSI 七层协议</h3><ul>
<li><a href="https://www.cnblogs.com/Robin-YB/p/6668762.html" target="_blank" rel="external">《OSI七层协议模型、TCP/IP四层模型学习笔记》</a></li>
</ul>
<h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul>
<li><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="external">《深入浅出 TCP/IP 协议》</a></li>
<li><a href="https://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">《TCP协议中的三次握手和四次挥手》</a></li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul>
<li><a href="https://www.cnblogs.com/wangning528/p/6388464.html" target="_blank" rel="external">《http协议详解(超详细)》</a></li>
</ul>
<h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><ul>
<li><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126" target="_blank" rel="external">《HTTP 2.0 原理详细分析》</a></li>
<li><a href="https://blog.csdn.net/u012657197/article/details/77877840" target="_blank" rel="external">《HTTP2.0的基本单位为二进制帧》</a><ul>
<li>利用二进制帧负责传输。</li>
<li>多路复用。</li>
</ul>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul>
<li><p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html" target="_blank" rel="external">《https原理通俗了解》</a></p>
<ul>
<li>使用非对称加密协商加密算法</li>
<li>使用对称加密方式传输数据</li>
<li>使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/enweitech/article/details/53213862" target="_blank" rel="external">《八大免费SSL证书-给你的网站免费添加Https安全加密》</a></p>
</li>
</ul>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><ul>
<li><p><a href="http://blog.51cto.com/litaotao/1289790" target="_blank" rel="external">《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》</a></p>
<ul>
<li>五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。</li>
<li>三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。</li>
</ul>
</li>
<li><p><a href="http://www.cnblogs.com/Anker/p/3265058.html" target="_blank" rel="external">《select、poll、epoll之间的区别总结》</a></p>
<ul>
<li>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</li>
<li>select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。</li>
<li>select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。</li>
<li>poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。</li>
</ul>
</li>
<li><p><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/" target="_blank" rel="external">《select，poll，epoll比较  》</a></p>
<ul>
<li>在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a></p>
<ul>
<li>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/skiof007/article/details/52873421" target="_blank" rel="external">《BIO与NIO、AIO的区别》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u013074465/article/details/46276967" target="_blank" rel="external">《两种高效的服务器设计模型：Reactor和Proactor模型》</a></p>
</li>
</ul>
<h3 id="Epoll"><a href="#Epoll" class="headerlink" title="Epoll"></a>Epoll</h3><ul>
<li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html" target="_blank" rel="external">《epoll使用详解（精髓）》</a></li>
</ul>
<h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h3><ul>
<li><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a></li>
<li><a href="https://blog.csdn.net/xidianliuy/article/details/51612676" target="_blank" rel="external">《Java NIO编写Socket服务器的一个例子》</a></li>
</ul>
<h3 id="kqueue"><a href="#kqueue" class="headerlink" title="kqueue"></a>kqueue</h3><ul>
<li><a href="http://www.cnblogs.com/luminocean/p/5631336.html" target="_blank" rel="external">《kqueue用法简介》</a></li>
</ul>
<h2 id="连接和短连接"><a href="#连接和短连接" class="headerlink" title="连接和短连接"></a>连接和短连接</h2><ul>
<li><a href="https://www.cnblogs.com/pangguoping/p/5571422.html" target="_blank" rel="external">《TCP/IP系列——长连接与短连接的区别》</a></li>
</ul>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li><a href="https://blog.csdn.net/excellentyuxiao/article/details/53390408" target="_blank" rel="external">《Netty原理剖析》</a><ul>
<li>Reactor 模式介绍。</li>
<li>Netty 是 Reactor 模式的一种实现。</li>
</ul>
</li>
</ul>
<h2 id="零拷贝（Zero-copy）"><a href="#零拷贝（Zero-copy）" class="headerlink" title="零拷贝（Zero-copy）"></a>零拷贝（Zero-copy）</h2><ul>
<li><a href="https://www.cnblogs.com/xys1228/p/6088805.html" target="_blank" rel="external">《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》</a><ul>
<li>多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。</li>
</ul>
</li>
</ul>
<h2 id="序列化-二进制协议"><a href="#序列化-二进制协议" class="headerlink" title="序列化(二进制协议)"></a>序列化(二进制协议)</h2><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><ul>
<li><a href="https://www.cnblogs.com/happyday56/p/4268249.html" target="_blank" rel="external">《Hessian原理分析》</a><br>Binary-RPC;不仅仅是序列化</li>
</ul>
<h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><ul>
<li><a href="https://blog.csdn.net/antgan/article/details/52103966" target="_blank" rel="external">《Protobuf协议的Java应用例子》</a><br>Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写  .proto 文件。</li>
<li><p><a href="https://worktile.com/tech/share/prototol-buffers" target="_blank" rel="external">《Protocol Buffers序列化协议及应用》</a></p>
<pre><code>* 关于协议的解释；缺点：可读性差;
</code></pre></li>
<li><p><a href="https://blog.csdn.net/eric520zenobia/article/details/53766571" target="_blank" rel="external">《简单的使用 protobuf 和 protostuff》</a></p>
<ul>
<li>protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。</li>
</ul>
</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><h3 id="数据库设计的三大范式"><a href="#数据库设计的三大范式" class="headerlink" title="数据库设计的三大范式"></a>数据库设计的三大范式</h3><ul>
<li><a href="https://www.cnblogs.com/waj6511988/p/7027127.html" target="_blank" rel="external">《数据库的三大范式以及五大约束》</a><ul>
<li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li>
<li>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li>
<li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li>
</ul>
</li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><p><a href="http://www.admin10000.com/document/5372.html" target="_blank" rel="external">《MySQL的InnoDB索引原理详解》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="external">《MySQL存储引擎－－MyISAM与InnoDB区别》</a></p>
<ul>
<li>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁</li>
</ul>
</li>
<li><p><a href="https://www.2cto.com/database/201211/172380.html" target="_blank" rel="external">《myisam和innodb索引实现的不同》</a></p>
</li>
</ul>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul>
<li><a href="https://my.oschina.net/kailuncen/blog/1504217" target="_blank" rel="external">《一篇文章带你读懂Mysql和InnoDB》</a></li>
</ul>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li><p><a href="http://vdisk.weibo.com/s/muWOT" target="_blank" rel="external">《MySQL36条军规》</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/zhouyusheng/p/8038224.html" target="_blank" rel="external">《MYSQL性能优化的最佳20+条经验》</a></p>
</li>
<li><a href="https://blog.csdn.net/when_less_is_more/article/details/70187459" target="_blank" rel="external">《SQL优化之道》</a></li>
<li><a href="https://www.cnblogs.com/sivkun/p/7518540.html" target="_blank" rel="external">《mysql数据库死锁的产生原因及解决办法》</a></li>
<li><a href="https://blog.csdn.net/monkey_d_feilong/article/details/52291556" target="_blank" rel="external">《导致索引失效的可能情况》</a></li>
<li><a href="https://blog.csdn.net/zy_281870667/article/details/51604540" target="_blank" rel="external">《 MYSQL分页limit速度太慢优化方法》</a><ul>
<li>原则上就是缩小扫描范围。</li>
</ul>
</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="聚集索引-非聚集索引"><a href="#聚集索引-非聚集索引" class="headerlink" title="聚集索引, 非聚集索引"></a>聚集索引, 非聚集索引</h4><ul>
<li><a href="https://blog.csdn.net/no_endless/article/details/77073549" target="_blank" rel="external">《MySQL 聚集索引/非聚集索引简述》</a></li>
<li><a href="https://www.cnblogs.com/zlcxbb/p/5757245.html" target="_blank" rel="external">《MyISAM和InnoDB的索引实现》</a></li>
</ul>
<p>MyISAM 是非聚集，InnoDB 是聚集</p>
<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><ul>
<li><a href="https://www.cnblogs.com/summer0space/p/7247778.html" target="_blank" rel="external">《复合索引的优点和注意事项》</a></li>
</ul>
<h4 id="自适应哈希索引-AHI"><a href="#自适应哈希索引-AHI" class="headerlink" title="自适应哈希索引(AHI)"></a>自适应哈希索引(AHI)</h4><ul>
<li><a href="https://blog.csdn.net/Linux_ever/article/details/62043708" target="_blank" rel="external">《InnoDB存储引擎——自适应哈希索引》</a></li>
</ul>
<h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><ul>
<li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="external">《MySQL 性能优化神器 Explain 使用分析》</a></li>
</ul>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul>
<li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">MongoDB 教程</a></li>
<li><a href="http://mxdxm.iteye.com/blog/2093603" target="_blank" rel="external">《Mongodb相对于关系型数据库的优缺点》</a><ul>
<li>优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；</li>
<li>缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；</li>
</ul>
</li>
</ul>
<h3 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h3><ul>
<li><a href="http://www.thebigdata.cn/HBase/35831.html" target="_blank" rel="external">《简明 HBase 入门教程（开篇）》</a></li>
<li><a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html" target="_blank" rel="external">《深入学习HBase架构原理》</a></li>
<li><a href="https://blog.csdn.net/youzhouliu/article/details/67632882" target="_blank" rel="external">《传统的行存储和（HBase）列存储的区别》</a></li>
</ul>
<ul>
<li><p><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/39891099" target="_blank" rel="external">《Hbase与传统数据库的区别》</a></p>
<ul>
<li>空数据不存储，节省空间，且适用于并发。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/u014091123/article/details/73163088" target="_blank" rel="external">《HBase Rowkey设计》</a></p>
<ul>
<li>rowkey 按照字典顺序排列，便于批量扫描。</li>
<li>通过散列可以避免热点。</li>
</ul>
</li>
</ul>
<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="搜索引擎原理"><a href="#搜索引擎原理" class="headerlink" title="搜索引擎原理"></a>搜索引擎原理</h2><ul>
<li><a href="https://www.jianshu.com/p/0193dc44135b" target="_blank" rel="external">《倒排索引–搜索引擎入门》</a></li>
</ul>
<h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><ul>
<li><a href="https://www.cnblogs.com/rodge-run/p/6551152.html" target="_blank" rel="external">《Lucene入门简介》</a></li>
</ul>
<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul>
<li><a href="https://blog.csdn.net/laoyang360/article/details/52244917" target="_blank" rel="external">《Elasticsearch学习，请先看这一篇！》</a></li>
<li><a href="https://blog.csdn.net/cyony/article/details/65437708" target="_blank" rel="external">《Elasticsearch索引原理》</a></li>
</ul>
<h2 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h2><ul>
<li><a href="https://blog.csdn.net/u011936655/article/details/51960005" target="_blank" rel="external">《 Apache Solr入门教程》</a></li>
<li><a href="https://blog.csdn.net/convict_eva/article/details/53537837" target="_blank" rel="external">《elasticsearch与solr比较》</a></li>
</ul>
<h2 id="sphinx"><a href="#sphinx" class="headerlink" title="sphinx"></a>sphinx</h2><ul>
<li><a href="http://blog.jobbole.com/101672/" target="_blank" rel="external">《Sphinx 的介绍和原理探索》</a></li>
</ul>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><h2 id="性能优化方法论"><a href="#性能优化方法论" class="headerlink" title="性能优化方法论"></a>性能优化方法论</h2><ul>
<li><p><a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread" target="_blank" rel="external">《15天的性能优化工作，5方面的调优经验》</a></p>
<ul>
<li>代码层面、业务层面、数据库层面、服务器层面、前端优化。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/tenglizhe/article/details/44563135" target="_blank" rel="external">《系统性能优化的几个方面》</a></p>
</li>
</ul>
<h2 id="容量评估"><a href="#容量评估" class="headerlink" title="容量评估"></a>容量评估</h2><ul>
<li><a href="https://blog.csdn.net/u012528360/article/details/70054156" target="_blank" rel="external">《联网性能与容量评估的方法论和典型案例》</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959542&amp;idx=1&amp;sn=2494bbea9a855e0e1c3ccd6d2562a600&amp;scene=21#wechat_redirect" target="_blank" rel="external">《互联网架构，如何进行容量设计？》</a><ul>
<li>评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS</li>
</ul>
</li>
</ul>
<h2 id="CDN-网络"><a href="#CDN-网络" class="headerlink" title="CDN 网络"></a>CDN 网络</h2><ul>
<li><a href="https://www.cnblogs.com/wxiaona/p/5867685.html" target="_blank" rel="external">《CDN加速原理》</a></li>
<li><a href="https://www.zhihu.com/question/20536932" target="_blank" rel="external">《国内有哪些比较好的 CDN？》</a></li>
</ul>
<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><ul>
<li><a href="https://blog.csdn.net/fysuccess/article/details/66972554" target="_blank" rel="external">《主流Java数据库连接池比较与开发配置实战》</a></li>
</ul>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul>
<li><a href="https://blog.csdn.net/yethyeth/article/details/73266455" target="_blank" rel="external">《九大Java性能调试工具，必备至少一款》</a></li>
</ul>
<h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h2><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><ul>
<li><a href="http://storm.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://blog.csdn.net/uisoul/article/details/77989927" target="_blank" rel="external">《最详细的Storm入门教程》</a></li>
</ul>
<h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><ul>
<li><a href="https://blog.csdn.net/lisi1129/article/details/54844919" target="_blank" rel="external">《Flink之一 Flink基本原理介绍》</a></li>
</ul>
<h3 id="Kafka-Stream"><a href="#Kafka-Stream" class="headerlink" title="Kafka Stream"></a>Kafka Stream</h3><ul>
<li><a href="https://yq.aliyun.com/articles/58382" target="_blank" rel="external">《Kafka Stream调研：一种轻量级流计算模式》</a></li>
</ul>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>例如：</p>
<ul>
<li>广告相关实时统计；</li>
<li>推荐系统用户画像标签实时更新；</li>
<li>线上服务健康状况实时监测；</li>
<li>实时榜单；</li>
<li>实时数据统计。</li>
</ul>
<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><ul>
<li><a href="https://blog.csdn.net/houbin0912/article/details/72967178" target="_blank" rel="external">《用通俗易懂的话说下hadoop是什么,能做什么》</a></li>
<li><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html" target="_blank" rel="external">《史上最详细的Hadoop环境搭建》</a></li>
</ul>
<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><ul>
<li><a href="https://segmentfault.com/a/1190000011575458" target="_blank" rel="external">《【Hadoop学习】HDFS基本原理》</a></li>
</ul>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><ul>
<li><a href="https://blog.csdn.net/oppo62258801/article/details/72884633" target="_blank" rel="external">《用通俗易懂的大白话讲解Map/Reduce原理》</a></li>
<li><a href="https://blog.csdn.net/foye12/article/details/78358292" target="_blank" rel="external">《 简单的map-reduce的java例子》</a></li>
</ul>
<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><ul>
<li><a href="http://www.cnblogs.com/codeOfLife/p/5492740.html" target="_blank" rel="external">《初步掌握Yarn的架构及原理》</a></li>
</ul>
<h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><ul>
<li><a href="http://www.cnblogs.com/tgzhu/p/5818374.html" target="_blank" rel="external">《Spark(一): 基本架构及原理》</a></li>
</ul>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="web-安全"><a href="#web-安全" class="headerlink" title="web 安全"></a>web 安全</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul>
<li><a href="https://blog.csdn.net/qq_21956483/article/details/54377947" target="_blank" rel="external">《xss攻击原理与解决方法》</a><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html" target="_blank" rel="external">《CSRF原理及防范》</a></li>
</ul>
<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html" target="_blank" rel="external">《SQL注入》</a></li>
</ul>
<h3 id="Hash-Dos"><a href="#Hash-Dos" class="headerlink" title="Hash Dos"></a>Hash Dos</h3><ul>
<li><a href="http://www.freebuf.com/articles/web/14199.html" target="_blank" rel="external">《邪恶的JAVA HASH DOS攻击》</a><ul>
<li>利用JsonObject 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。</li>
</ul>
</li>
<li><a href="http://blog.it2048.cn/article_hash-collision.html" target="_blank" rel="external">《一种高级的DoS攻击-Hash碰撞攻击》</a></li>
<li><a href="http://www.iteye.com/news/23939/" target="_blank" rel="external">《关于Hash Collision DoS漏洞：解析与解决方案》</a></li>
</ul>
<h3 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html" target="_blank" rel="external">《上传文件漏洞原理及防范》</a></li>
</ul>
<h3 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html" target="_blank" rel="external">《DVWA》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html" target="_blank" rel="external">W3af</a></li>
<li><a href="https://blog.csdn.net/xygg0801/article/details/53610640" target="_blank" rel="external">OpenVAS详解</a></li>
</ul>
<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><ul>
<li><p><a href="https://blog.csdn.net/niaonao/article/details/51112686" target="_blank" rel="external">《验证码原理分析及实现》</a></p>
</li>
<li><p><a href="https://my.oschina.net/jiangbianwanghai/blog/1031031" target="_blank" rel="external">《详解滑动验证码的实现原理》</a></p>
<ul>
<li>滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/xcj26/p/5242758.html" target="_blank" rel="external">《淘宝滑动验证码研究》</a></p>
</li>
</ul>
<h2 id="DDoS-防范"><a href="#DDoS-防范" class="headerlink" title="DDoS 防范"></a>DDoS 防范</h2><ul>
<li><a href="http://netsecurity.51cto.com/art/201601/503799.htm" target="_blank" rel="external">《学习手册：DDoS的攻击方式及防御手段》</a></li>
<li><a href="http://netsecurity.51cto.com/art/201406/442756.htm" target="_blank" rel="external">《免费DDoS攻击测试工具大合集》</a></li>
</ul>
<h2 id="用户隐私信息保护"><a href="#用户隐私信息保护" class="headerlink" title="用户隐私信息保护"></a>用户隐私信息保护</h2><ol>
<li>用户密码非明文保存，加动态salt。</li>
<li>身份证号，手机号如果要显示，用 “*” 替代部分字符。</li>
<li>联系方式在的显示与否由用户自己控制。</li>
<li>TODO</li>
</ol>
<ul>
<li><a href="https://zhidao.baidu.com/question/1988017976673661587.html" target="_blank" rel="external">《个人隐私包括哪些》</a></li>
<li><p><a href="https://www.zhihu.com/question/20137108" target="_blank" rel="external">《在互联网上，隐私的范围包括哪些？》</a></p>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html" target="_blank" rel="external">《用户密码保存》</a></p>
</li>
</ul>
<h2 id="序列化漏洞"><a href="#序列化漏洞" class="headerlink" title="序列化漏洞"></a>序列化漏洞</h2><ul>
<li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/" target="_blank" rel="external">《Lib之过？Java反序列化漏洞通用利用分析》</a></li>
</ul>
<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6421-chang-jian-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="external">《常见对称加密算法》</a><ul>
<li>DES、3DES、Blowfish、AES</li>
<li>DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。</li>
<li>DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。</li>
</ul>
</li>
</ul>
<h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html" target="_blank" rel="external">《常用的哈希算法》</a></p>
<ul>
<li>MD5 和 SHA-1 已经不再安全，已被弃用。</li>
<li>目前 SHA-256 是比较安全的。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/zhangruhong168/article/details/78033202" target="_blank" rel="external">《基于Hash摘要签名的公网URL签名验证设计方案》</a></p>
</li>
</ul>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6424-chang-yong-fei-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="external">《常见非对称加密算法》</a></p>
<ul>
<li>RSA、DSA、ECDSA(螺旋曲线加密算法)</li>
<li>和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</li>
<li><p>256位的ECC秘钥的安全性等同于3072位的RSA秘钥。</p>
<p>  <a href="http://baijiahao.baidu.com/s?id=1578348858092033763&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">《区块链的加密技术》</a>    </p>
</li>
</ul>
</li>
</ul>
<h2 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h2><ul>
<li><a href="http://www.freebuf.com/articles/system/121540.html" target="_blank" rel="external">《Linux强化论：15步打造一个安全的Linux服务器》</a></li>
</ul>
<h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>TODO</p>
<h2 id="网络隔离"><a href="#网络隔离" class="headerlink" title="网络隔离"></a>网络隔离</h2><h3 id="内外网分离"><a href="#内外网分离" class="headerlink" title="内外网分离"></a>内外网分离</h3><p>TODO</p>
<h3 id="登录跳板机"><a href="#登录跳板机" class="headerlink" title="登录跳板机"></a>登录跳板机</h3><p>在内外环境中通过跳板机登录到线上主机。</p>
<ul>
<li><a href="http://blog.51cto.com/zero01/2062618" target="_blank" rel="external">《搭建简易堡垒机》</a></li>
</ul>
<h2 id="授权、认证"><a href="#授权、认证" class="headerlink" title="授权、认证"></a>授权、认证</h2><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><ul>
<li><a href="https://www.cnblogs.com/zq8024/p/5003050.html" target="_blank" rel="external">《基于组织角色的权限设计》</a></li>
<li><a href="https://www.cnblogs.com/shijiaqi1066/p/3793894.html" target="_blank" rel="external">《权限系统与RBAC模型概述》</a></li>
<li><a href="https://blog.csdn.net/he90227/article/details/38663553" target="_blank" rel="external">《Spring整合Shiro做权限控制模块详细案例分析》</a></li>
</ul>
<h3 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">《理解OAuth 2.0》</a></li>
<li><a href="https://www.cnblogs.com/flashsun/p/7424071.html" target="_blank" rel="external">《一张图搞定OAuth2.0》</a></li>
</ul>
<h3 id="双因素认证（2FA）"><a href="#双因素认证（2FA）" class="headerlink" title="双因素认证（2FA）"></a>双因素认证（2FA）</h3><p>2FA - Two-factor authentication，用于加强登录验证</p>
<p>常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）</p>
<ul>
<li>【《双因素认证（2FA）教程》】(<a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html</a>)</li>
</ul>
<h3 id="单点登录-SSO"><a href="#单点登录-SSO" class="headerlink" title="单点登录(SSO)"></a>单点登录(SSO)</h3><ul>
<li><p><a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="external">《单点登录原理与简单实现》</a></p>
</li>
<li><p><a href="https://github.com/apereo/cas" target="_blank" rel="external">CAS单点登录框架</a></p>
</li>
</ul>
<h1 id="常用开源框架"><a href="#常用开源框架" class="headerlink" title="常用开源框架"></a>常用开源框架</h1><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><ul>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html" target="_blank" rel="external">《开源协议的选择》</a></p>
</li>
<li><p><a href="http://choosealicense.online/" target="_blank" rel="external">如何选择一个开源软件协议</a></p>
</li>
</ul>
<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><h3 id="Log4j、Log4j2"><a href="#Log4j、Log4j2" class="headerlink" title="Log4j、Log4j2"></a>Log4j、Log4j2</h3><ul>
<li><a href="https://blog.csdn.net/u012422446/article/details/51199724" target="_blank" rel="external">《log4j 详细讲解》</a></li>
<li><a href="https://blog.csdn.net/vbirdbest/article/details/71751835" target="_blank" rel="external">《log4j2 实际使用详解》</a></li>
<li><a href="https://my.oschina.net/OutOfMemory/blog/789267" target="_blank" rel="external">《Log4j1,Logback以及Log4j2性能测试对比》</a><ul>
<li>Log4J 异步日志性能优异。 </li>
</ul>
</li>
</ul>
<h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><ul>
<li><a href="https://blog.csdn.net/rulon147/article/details/52620541" target="_blank" rel="external">《最全LogBack 详解、含java案例和配置说明》</a></li>
</ul>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><ul>
<li><a href="https://blog.csdn.net/sinat_34093604/article/details/53082000" target="_blank" rel="external">《ORM框架使用优缺点》</a><ul>
<li>主要目的是为了提高开发效率。 </li>
</ul>
</li>
</ul>
<p><strong>MyBatis：</strong></p>
<ul>
<li><p><a href="https://www.cnblogs.com/winclpt/articles/7511672.html" target="_blank" rel="external">《mybatis缓存机制详解》</a></p>
<ul>
<li>一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效</li>
<li>二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。  </li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/baidu_32877851/article/details/53959268" target="_blank" rel="external">《MyBatis学习之代码生成器Generator》</a></p>
</li>
</ul>
<h2 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h2><p>TODO</p>
<h2 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h2><h3 id="Spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h3><p><strong>Spring</strong></p>
<ul>
<li><a href="https://www.w3cschool.cn/wkspring/" target="_blank" rel="external">Spring 简明教程</a></li>
</ul>
<p><strong>Spring Boot</strong></p>
<ul>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Boot基础教程》</a></li>
</ul>
<p><strong>Spring Cloud</strong></p>
<ul>
<li><a href="http://springboot.fun/" target="_blank" rel="external">Spring Boot 中文索引站</a></li>
<li><a href="https://springcloud.cc/" target="_blank" rel="external">Spring Cloud 中文文档</a></li>
<li><a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Cloud基础教程》</a></li>
</ul>
<h2 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h2><ul>
<li><a href="https://www.cnblogs.com/crazylqy/p/4872236.html" target="_blank" rel="external">《Apache Commons 工具类介绍及简单使用》</a></li>
<li><a href="http://ifeve.com/google-guava/" target="_blank" rel="external">《Google guava 中文教程》</a></li>
</ul>
<h1 id="分布式设计"><a href="#分布式设计" class="headerlink" title="分布式设计"></a>分布式设计</h1><h2 id="扩展性设计"><a href="#扩展性设计" class="headerlink" title="扩展性设计"></a>扩展性设计</h2><ul>
<li><p><a href="https://blog.csdn.net/hemin1003/article/details/53633926" target="_blank" rel="external">《架构师不可不知的十大可扩展架构》</a></p>
<ul>
<li>总结下来，通用的套路就是分布、缓存及异步处理。 </li>
</ul>
</li>
<li><p><a href="https://yq.aliyun.com/articles/38119" target="_blank" rel="external">《可扩展性设计之数据切分》</a></p>
<ul>
<li>水平切分+垂直切分</li>
<li>利用中间件进行分片如，MySQL Proxy。</li>
<li>利用分片策略进行切分，如按照ID取模。 </li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/deniro_li/article/details/78458306" target="_blank" rel="external">《说说如何实现可扩展性的大型网站架构》</a></p>
<ul>
<li>分布式服务+消息队列。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/chaofanwei/article/details/29191073" target="_blank" rel="external">《大型网站技术架构（七）–网站的可扩展性架构》</a></p>
</li>
</ul>
<h2 id="稳定性-amp-高可用"><a href="#稳定性-amp-高可用" class="headerlink" title="稳定性 &amp; 高可用"></a>稳定性 &amp; 高可用</h2><ul>
<li><a href="https://blog.csdn.net/hustspy1990/article/details/78008324" target="_blank" rel="external">《系统设计：关于高可用系统的一些技术方案》</a><ul>
<li>可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。</li>
<li>隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。</li>
<li>解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。</li>
<li>限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。</li>
<li>降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。</li>
<li>熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。</li>
<li>自动化测试：通过完善的测试，减少发布引起的故障。</li>
<li>灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://coolshell.cn/articles/17459.html" target="_blank" rel="external">《关于高可用的系统》</a><ul>
<li>设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。     </li>
</ul>
</li>
</ul>
<h3 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h3><ul>
<li><p><a href="https://www.cnblogs.com/wuyun-blog/p/6186198.html" target="_blank" rel="external">《转！！负载均衡器技术Nginx和F5的优缺点对比》</a></p>
<ul>
<li>主要是和F5对比。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/lcword/p/5773296.html" target="_blank" rel="external">《软/硬件负载均衡产品 你知多少？》</a></p>
</li>
</ul>
<h3 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h3><ul>
<li><a href="https://www.cnblogs.com/tianzhiliang/articles/2317808.html" target="_blank" rel="external">《几种负载均衡算法》</a><br>  轮寻、权重、负载、最少连接、QoS</li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html" target="_blank" rel="external">《DNS负载均衡》</a><ul>
<li>配置简单，更新速度慢。 </li>
</ul>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html" target="_blank" rel="external">《Nginx负载均衡》</a></p>
<ul>
<li>简单轻量、学习成本低；主要适用于web应用。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/edisonchou/p/4281978.html" target="_blank" rel="external">《借助LVS+Keepalived实现负载均衡 》</a></p>
<ul>
<li>配置比较负载、只支持到4层，性能较高。</li>
</ul>
</li>
<li><p><a href="http://www.ttlsa.com/linux/haproxy-study-tutorial/" target="_blank" rel="external">《HAProxy用法详解 全网最详细中文文档》</a></p>
<ul>
<li>支持到七层（比如HTTP）、功能比较全面，性能也不错。</li>
</ul>
</li>
<li><p><a href="http://blog.itpub.net/25704976/viewspace-1319781/" target="_blank" rel="external">《Haproxy+Keepalived+MySQL实现读均衡负载》</a></p>
<ul>
<li>主要是用户读请求的负载均衡。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/lylife/p/5584019.html" target="_blank" rel="external">《rabbitmq+haproxy+keepalived实现高可用集群搭建》</a></p>
</li>
</ul>
<h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul>
<li><a href="https://www.cnblogs.com/haoxinyue/p/6792309.html" target="_blank" rel="external">《谈谈高并发系统的限流》</a><ul>
<li>计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。</li>
<li>漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。</li>
<li>令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。</li>
<li>Nginx 限流：通过 <code>limit_req</code> 等模块限制并发连接数。</li>
</ul>
</li>
</ul>
<h3 id="应用层容灾"><a href="#应用层容灾" class="headerlink" title="应用层容灾"></a>应用层容灾</h3><ul>
<li><p><a href="https://segmentfault.com/a/1190000005988895" target="_blank" rel="external">《防雪崩利器：熔断器 Hystrix 的原理与使用》</a></p>
<ul>
<li>雪崩效应原因：硬件故障、硬件故障、程序Bug、重试加大流量、用户大量请求。 </li>
<li>雪崩的对策：限流、改进缓存模式(缓存预加载、同步调用改异步)、自动扩容、降级。</li>
<li>Hystrix设计原则：<ul>
<li>资源隔离：Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩。</li>
<li>熔断开关：服务的健康状况 = 请求失败数 / 请求总数，通过阈值设定和滑动窗口控制开关。</li>
<li>命令模式：通过继承 HystrixCommand 来包装服务调用逻辑。 </li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="external">《缓存穿透，缓存击穿，缓存雪崩解决方案分析》</a></p>
</li>
<li><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="external">《缓存击穿、失效以及热点key问题》</a> <ul>
<li>主要策略：失效瞬间：单机使用锁；使用分布式锁；不过期；</li>
<li>热点数据：热点数据单独存储；使用本地缓存；分成多个子key；</li>
</ul>
</li>
</ul>
<h3 id="跨机房容灾"><a href="#跨机房容灾" class="headerlink" title="跨机房容灾"></a>跨机房容灾</h3><ul>
<li><p><a href="http://dc.idcquan.com/ywgl/71559.shtml" target="_blank" rel="external">《“异地多活”多机房部署经验谈》</a></p>
<ul>
<li>通过自研中间件进行数据同步。 </li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/jeffreynicole/article/details/48135093" target="_blank" rel="external">《异地多活（异地双活）实践经验》</a></p>
<ul>
<li>注意延迟问题，多次跨机房调用会将延时放大数倍。</li>
<li>建房间专线很大概率会出现问题，做好运维和程序层面的容错。</li>
<li>不能依赖于程序端数据双写，要有自动同步方案。 </li>
<li>数据永不在高延迟和较差网络质量下，考虑同步质量问题。</li>
<li>核心业务和次要业务分而治之，甚至只考虑核心业务。</li>
<li>异地多活监控部署、测试也要跟上。</li>
<li>业务允许的情况下考虑用户分区，尤其是游戏、邮箱业务。</li>
<li>控制跨机房消息体大小，越小越好。</li>
<li>考虑使用docker容器虚拟化技术，提高动态调度能力。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/yoara/article/details/38013751" target="_blank" rel="external">容灾技术及建设经验介绍</a></p>
</li>
</ul>
<h3 id="容灾演练流程"><a href="#容灾演练流程" class="headerlink" title="容灾演练流程"></a>容灾演练流程</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650996320&amp;idx=1&amp;sn=0ed3be190bbee4a9277886ef88cbb2e5" target="_blank" rel="external">《依赖治理、灰度发布、故障演练，阿里电商故障演练系统的设计与实战经验》</a><ul>
<li>常见故障画像</li>
<li>案例：预案有效性、预案有效性、故障复现、架构容灾测试、参数调优、参数调优、故障突袭、联合演练。</li>
</ul>
</li>
</ul>
<h3 id="平滑启动"><a href="#平滑启动" class="headerlink" title="平滑启动"></a>平滑启动</h3><ul>
<li><p>平滑重启应用思路<br>1.端流量（如vip层）、2. flush 数据(如果有)、3, 重启应用</p>
</li>
<li><p><a href="https://blog.csdn.net/u011001084/article/details/73480432" target="_blank" rel="external">《JVM安全退出（如何优雅的关闭java服务）》</a><br>推荐推出方式：System.exit，Kill SIGTERM；不推荐 kill-9；用 Runtime.addShutdownHook 注册钩子。</p>
</li>
<li><a href="http://ju.outofmemory.cn/entry/337235" target="_blank" rel="external">《常见Java应用如何优雅关闭》</a><br>Java、Spring、Dubbo 优雅关闭方式。</li>
</ul>
<h2 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h2><h3 id="读写分离模式"><a href="#读写分离模式" class="headerlink" title="读写分离模式"></a>读写分离模式</h3><ul>
<li><a href="https://www.cnblogs.com/houdj/p/6563771.html" target="_blank" rel="external">《Mysql主从方案的实现》</a></li>
<li><a href="https://www.cnblogs.com/edisonchou/p/4133148.html" target="_blank" rel="external">《搭建MySQL主从复制经典架构》</a></li>
<li><p><a href="https://blog.csdn.net/nimasike/article/details/48048341" target="_blank" rel="external">《Haproxy+多台MySQL从服务器(Slave) 实现负载均衡》</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/zhangsubai/p/6801764.html" target="_blank" rel="external">《DRBD+Heartbeat+Mysql高可用读写分离架构》</a></p>
<ul>
<li>DRDB 进行磁盘复制，避免单点问题。</li>
</ul>
</li>
<li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/62-ke-kuo-zhan-de-shu-ju-ku-jia-gou/621-gao-ke-yong-mysql-de-ji-zhong-fang-an/6214-mysql-cluster-fang-an.html" target="_blank" rel="external">《MySQL Cluster 方式》</a></p>
</li>
</ul>
<h3 id="分片模式"><a href="#分片模式" class="headerlink" title="分片模式"></a>分片模式</h3><ul>
<li><p><a href="https://www.jianshu.com/p/32b3e91aa22c" target="_blank" rel="external">《分库分表需要考虑的问题及方案》</a></p>
<ul>
<li>中间件： 轻量级：sharding-jdbc、TSharding；重量级：Atlas、MyCAT、Vitess等。</li>
<li>问题：事务、Join、迁移、扩容、ID、分页等。</li>
<li>事务补偿：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步等。</li>
<li>分库策略：数值范围；取模；日期等。</li>
<li>分库数量：通常 MySQL 单库 5千万条、Oracle 单库一亿条需要分库。 </li>
</ul>
</li>
<li><p><a href="https://www.2cto.com/database/201503/380348.html" target="_blank" rel="external">《MySql分表和表分区详解》</a></p>
<ul>
<li>分区：是MySQL内部机制，对客户端透明，数据存储在不同文件中，表面上看是同一个表。</li>
<li>分表：物理上创建不同的表、客户端需要管理分表路由。</li>
</ul>
</li>
</ul>
<h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><ul>
<li><a href="https://blog.csdn.net/jiaolongdy/article/details/51188798" target="_blank" rel="external">《永不失联！如何实现微服务架构中的服务发现？》</a><ul>
<li>客户端服务发现模式：客户端直接查询注册表，同时自己负责负载均衡。Eureka 采用这种方式。</li>
<li>服务器端服务发现模式：客户端通过负载均衡查询服务实例。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/u010963948/article/details/71730165" target="_blank" rel="external">《SpringCloud服务注册中心比较:Consul vs Zookeeper vs Etcd vs Eureka》</a></p>
<ul>
<li>CAP支持：Consul（CA）、zookeeper（cp）、etcd（cp） 、euerka（ap）</li>
<li>作者认为目前 Consul 对 Spring cloud 的支持比较好。</li>
</ul>
</li>
<li><p><a href="http://mobile.51cto.com/news-502394.htm" target="_blank" rel="external">《基于Zookeeper的服务注册与发现》</a></p>
<ul>
<li>优点：API简单、Pinterest，Airbnb 在用、多语言、通过watcher机制来实现配置PUSH，能快速响应配置变化。 </li>
</ul>
</li>
</ul>
<h3 id="服务路由控制"><a href="#服务路由控制" class="headerlink" title="服务路由控制"></a>服务路由控制</h3><ul>
<li><a href="https://blog.csdn.net/xundh/article/details/59492750" target="_blank" rel="external">《分布式服务框架学习笔记4 服务路由》</a><ul>
<li>原则：透明化路由</li>
<li>负载均衡策略：随机、轮询、服务调用延迟、一致性哈希、粘滞连接</li>
<li>本地路由有限策略：injvm(优先调用jvm内部的服务)，innative(优先使用相同物理机的服务),原则上找距离最近的服务。</li>
<li>配置方式：统一注册表；本地配置；动态下发。</li>
</ul>
</li>
</ul>
<h2 id="分布式一致"><a href="#分布式一致" class="headerlink" title="分布式一致"></a>分布式一致</h2><h3 id="CAP-与-BASE-理论"><a href="#CAP-与-BASE-理论" class="headerlink" title="CAP 与 BASE 理论"></a>CAP 与 BASE 理论</h3><ul>
<li><a href="http://www.cnblogs.com/szlbm/p/5588543.html" target="_blank" rel="external">《从分布式一致性谈到CAP理论、BASE理论》</a><ul>
<li>一致性分类：强一致(立即一致)；弱一致(可在单位时间内实现一致，比如秒级)；最终一致(弱一致的一种，一定时间内最终一致)</li>
<li>CAP：一致性、可用性、分区容错性(网络故障引起)</li>
<li>BASE：Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）</li>
<li>BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</li>
</ul>
</li>
</ul>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ul>
<li><a href="http://www.hollischuang.com/archives/1716" target="_blank" rel="external">《分布式锁的几种实现方式》</a><ul>
<li>基于数据库的分布式锁：优点：操作简单、容易理解。缺点：存在单点问题、数据库性能够开销较大、不可重入；</li>
<li>基于缓存的分布式锁：优点：非阻塞、性能好。缺点：操作不好容易造成锁无法释放的情况。</li>
<li>Zookeeper 分布式锁：通过有序临时节点实现锁机制，自己对应的节点需要最小，则被认为是获得了锁。优点：集群可以透明解决单点问题，避免锁不被释放问题，同时锁可以重入。缺点：性能不如缓存方式，吞吐量会随着zk集群规模变大而下降。</li>
</ul>
</li>
<li><p><a href="https://www.tuicool.com/articles/VZJr6fY" target="_blank" rel="external">《基于Zookeeper的分布式锁》</a></p>
<ul>
<li>清楚的原理描述 + Java 代码示例。 </li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/0201zcr/p/5942748.html" target="_blank" rel="external">《jedisLock—redis分布式锁实现》</a></p>
<ul>
<li>基于 setnx(set if ont exists)，有则返回false，否则返回true。并支持过期时间。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/albertfly/article/details/77412333" target="_blank" rel="external">《Memcached 和 Redis 分布式锁方案》</a></p>
<ul>
<li>利用 memcached 的 add（有别于set）操作，当key存在时，返回false。</li>
</ul>
</li>
</ul>
<h3 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h3><h4 id="PAXOS"><a href="#PAXOS" class="headerlink" title="PAXOS"></a>PAXOS</h4><ul>
<li><a href="https://www.cnblogs.com/linbingdong/p/6253479.html" target="_blank" rel="external">《分布式系列文章——Paxos算法原理与推导》</a></li>
<li><a href="https://blog.csdn.net/u010039929/article/details/70171672" target="_blank" rel="external">《Paxos–&gt;Fast Paxos–&gt;Zookeeper分析》</a></li>
<li><a href="https://www.cnblogs.com/leesf456/p/6012777.html" target="_blank" rel="external">《【分布式】Zookeeper与Paxos》</a></li>
</ul>
<h4 id="Zab"><a href="#Zab" class="headerlink" title="Zab"></a>Zab</h4><ul>
<li><a href="https://www.jianshu.com/p/fb527a64deee" target="_blank" rel="external">《Zab：Zookeeper 中的分布式一致性协议介绍》</a></li>
</ul>
<h4 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h4><ul>
<li><a href="http://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="external">《Raft 为什么是更易理解的分布式一致性算法》</a><ul>
<li>三种角色：Leader（领袖）、Follower（群众）、Candidate（候选人）</li>
<li>通过随机等待的方式发出投票，得票多的获胜。</li>
</ul>
</li>
</ul>
<h4 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h4><ul>
<li><a href="http://blog.51cto.com/tianya23/530743" target="_blank" rel="external">《Gossip算法》</a></li>
</ul>
<h4 id="两阶段提交、多阶段提交"><a href="#两阶段提交、多阶段提交" class="headerlink" title="两阶段提交、多阶段提交"></a>两阶段提交、多阶段提交</h4><ul>
<li><a href="http://blog.jobbole.com/95632/" target="_blank" rel="external">《关于分布式事务、两阶段提交协议、三阶提交协议》</a></li>
</ul>
<h3 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h3><ul>
<li><a href="https://www.cnblogs.com/wxgblogs/p/6639272.html" target="_blank" rel="external">《分布式系统—幂等性设计》</a><ul>
<li>幂等特性的作用：该资源具备幂等性，请求方无需担心重复调用会产生错误。</li>
<li>常见保证幂等的手段：MVCC（类似于乐观锁）、去重表(唯一索引)、悲观锁、一次性token、序列号方式。 </li>
</ul>
</li>
</ul>
<h3 id="分布式一致方案"><a href="#分布式一致方案" class="headerlink" title="分布式一致方案"></a>分布式一致方案</h3><ul>
<li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" target="_blank" rel="external">《分布式系统事务一致性解决方案》</a></li>
<li><a href="https://weibo.com/ttarticle/p/show?id=2309403965965003062676" target="_blank" rel="external">《保证分布式系统数据一致性的6种方案》</a></li>
</ul>
<h3 id="分布式-Leader-节点选举"><a href="#分布式-Leader-节点选举" class="headerlink" title="分布式 Leader 节点选举"></a>分布式 Leader 节点选举</h3><ul>
<li><a href="https://blog.csdn.net/johnson_moon/article/details/78809995" target="_blank" rel="external">《利用zookeeper实现分布式leader节点选举》</a></li>
</ul>
<h3 id="TCC-Try-Confirm-Cancel-柔性事务"><a href="#TCC-Try-Confirm-Cancel-柔性事务" class="headerlink" title="TCC(Try/Confirm/Cancel) 柔性事务"></a>TCC(Try/Confirm/Cancel) 柔性事务</h3><ul>
<li><a href="https://www.jianshu.com/p/ab1a1c6b08a1" target="_blank" rel="external">《传统事务与柔性事务》</a><ul>
<li>基于BASE理论：基本可用、柔性状态、最终一致。</li>
<li>解决方案：记录日志+补偿（正向补充或者回滚）、消息重试(要求程序要幂等)；“无锁设计”、采用乐观锁机制。</li>
</ul>
</li>
</ul>
<h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/27666295" target="_blank" rel="external">说说分布式文件存储系统-基本架构</a> ？</li>
<li><a href="https://blog.csdn.net/gatieme/article/details/44982961" target="_blank" rel="external">《各种分布式文件系统的比较》</a> ？<ul>
<li>HDFS：大批量数据读写，用于高吞吐量的场景，不适合小文件。</li>
<li>FastDFS：轻量级、适合小文件。</li>
</ul>
</li>
</ul>
<h2 id="唯一ID-生成"><a href="#唯一ID-生成" class="headerlink" title="唯一ID 生成"></a>唯一ID 生成</h2><h3 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h3><ul>
<li><p><a href="https://www.cnblogs.com/baiwa/p/5318432.html" target="_blank" rel="external">《高并发分布式系统中生成全局唯一Id汇总》</a></p>
<ul>
<li>Twitter 方案（Snowflake 算法）：41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)</li>
<li>Flicker 方案：MySQL自增ID + “REPLACE INTO XXX:SELECT LAST_INSERT_ID();” </li>
<li>UUID：缺点，无序，字符串过长，占用空间，影响检索性能。</li>
<li>MongoDB 方案：利用 ObjectId。缺点：不能自增。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/hdu09075340/article/details/79103851" target="_blank" rel="external">《TDDL 在分布式下的SEQUENCE原理》</a></p>
<ul>
<li>在数据库中创建 sequence 表，用于记录，当前已被占用的id最大值。</li>
<li>每台客户端主机取一个id区间（比如 1000~2000）缓存在本地，并更新 sequence 表中的id最大值记录。</li>
<li>客户端主机之间取不同的id区间，用完再取，使用乐观锁机制控制并发。</li>
</ul>
</li>
</ul>
<h2 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h2><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html" target="_blank" rel="external">《一致性哈希算法》</a></li>
</ul>
<h1 id="设计思想-amp-开发模式"><a href="#设计思想-amp-开发模式" class="headerlink" title="设计思想 &amp; 开发模式"></a>设计思想 &amp; 开发模式</h1><h2 id="DDD-Domain-driven-Design-领域驱动设计"><a href="#DDD-Domain-driven-Design-领域驱动设计" class="headerlink" title="DDD(Domain-driven Design - 领域驱动设计)"></a>DDD(Domain-driven Design - 领域驱动设计)</h2><ul>
<li><p><a href="https://www.cnblogs.com/netfocus/p/5548025.html" target="_blank" rel="external">《浅谈我对DDD领域驱动设计的理解》</a></p>
<ul>
<li>概念：DDD 主要对传统软件开发流程(分析-设计-编码)中各阶段的割裂问题而提出，避免由于一开始分析不明或在软件开发过程中的信息流转不一致而造成软件无法交付（和需求方设想不一致）的问题。DDD 强调一切以领域（Domain）为中心，强调领域专家（Domain Expert）的作用，强调先定义好领域模型之后在进行开发，并且领域模型可以指导开发（所谓的驱动）。</li>
<li>过程：理解领域、拆分领域、细化领域，模型的准确性取决于模型的理解深度。</li>
<li>设计：DDD 中提出了建模工具，比如聚合、实体、值对象、工厂、仓储、领域服务、领域事件来帮助领域建模。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/butterfly100/p/7827870.html" target="_blank" rel="external">《领域驱动设计的基础知识总结》</a></p>
<ul>
<li>领域（Doamin）本质上就是问题域，比如一个电商系统，一个论坛系统等。</li>
<li>界限上下文（Bounded Context）：阐述子域之间的关系，可以简单理解成一个子系统或组件模块。</li>
<li>领域模型（Domain Model）：DDD的核心是建立（用通用描述语言、工具—领域通用语言）正确的领域模型；反应业务需求的本质，包括实体和过程；其贯穿软件分析、设计、开发 的整个过程；常用表达领域模型的方式：图、代码或文字；</li>
<li>领域通用语言：领域专家、开发设计人员都能立即的语言或工具。</li>
<li>经典分层架构：用户界面/展示层、应用层、领域层、基础设施层，是四层架构模式。</li>
<li>使用的模式：<ul>
<li>关联尽量少，尽量单项，尽量降低整体复杂度。</li>
<li>实体（Entity）：领域中的唯一标示，一个实体的属性尽量少，少则清晰。</li>
<li>值对象（Value Object）：没有唯一标识，且属性值不可变，小二简单的对象，比如Date。</li>
<li>领域服务（Domain Service）： 协调多个领域对象，只有方法没有状态(不存数据)；可以分为应用层服务，领域层服务、基础层服务。</li>
<li>聚合及聚合根（Aggregate，Aggregate Root）：聚合定义了一组具有内聚关系的相关对象的集合；聚合根是对聚合引用的唯一元素；当修改一个聚合时，必须在事务级别；大部分领域模型中，有70%的聚合通常只有一个实体，30%只有2~3个实体；如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互；</li>
<li>工厂（Factory）：类似于设计模式中的工厂模式。</li>
<li>仓储（Repository）：持久化到DB，管理对象，且只对聚合设计仓储。</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="http://www.cnblogs.com/Leo_wl/p/3866629.html" target="_blank" rel="external">《领域驱动设计(DDD)实现之路》</a></p>
<ul>
<li>聚合：比如一辆汽车（Car）包含了引擎（Engine）、车轮（Wheel）和油箱（Tank）等组件，缺一不可。</li>
</ul>
</li>
<li><p><a href="http://www.hollischuang.com/archives/553" target="_blank" rel="external">《领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处》</a></p>
</li>
</ul>
<h3 id="命令查询职责分离-CQRS"><a href="#命令查询职责分离-CQRS" class="headerlink" title="命令查询职责分离(CQRS)"></a>命令查询职责分离(CQRS)</h3><p>CQRS — Command Query Responsibility Seperation</p>
<ul>
<li><p><a href="https://www.cnblogs.com/cnblogsfans/p/4551990.html" target="_blank" rel="external">《领域驱动设计系列 (六)：CQRS》</a></p>
<ul>
<li>核心思想：读写分离（查询和更新在不同的方法中），不同的流程只是不同的设计方式，CQ代码分离，分布式环境中会有明显体现（有冗余数据的情况下），目的是为了高性能。</li>
</ul>
</li>
<li><p><a href="http://www.techweb.com.cn/network/system/2017-07-07/2553563.shtml" target="_blank" rel="external">《DDD CQRS架构和传统架构的优缺点比较》</a></p>
<ul>
<li>最终一致的设计理念；依赖于高可用消息中间件。</li>
</ul>
</li>
<li><p><a href="http://www.cnblogs.com/netfocus/p/4055346.html" target="_blank" rel="external">《CQRS架构简介》</a></p>
<ul>
<li>一个实现 CQRS 的抽象案例。</li>
</ul>
</li>
<li><p><a href="http://www.uml.org.cn/zjjs/201609221.asp" target="_blank" rel="external">《深度长文：我对CQRS/EventSourcing架构的思考》</a></p>
<ul>
<li>CQRS 模式分析 + 12306 抢票案例</li>
</ul>
</li>
</ul>
<h3 id="贫血，充血模型"><a href="#贫血，充血模型" class="headerlink" title="贫血，充血模型"></a>贫血，充血模型</h3><ul>
<li><a href="https://kb.cnblogs.com/page/520743/" target="_blank" rel="external">《贫血，充血模型的解释以及一些经验》</a><ul>
<li>失血模型：老子和儿子分别定义，相互不知道，二者实体定义中完全没有业务逻辑，通过外部Service进行关联。</li>
<li>贫血模型：老子知道儿子，儿子也知道老子；部分业务逻辑放到实体中；优点：各层单项依赖，结构清楚，易于维护；缺点：不符合OO思想，相比于充血模式，Service层较为厚重；</li>
<li>充血模型：和贫血模型类似，区别在于如何划分业务逻辑。优点：Service层比较薄，只充当Facade的角色，不和DAO打交道、复合OO思想；缺点：非单项依赖，DO和DAO之间双向依赖、和Service层的逻辑划分容易造成混乱。</li>
<li>肿胀模式：是一种极端情况，取消Service层、全部业务逻辑放在DO中；优点：符合OO思想、简化了分层；缺点：暴露信息过多、很多非DO逻辑也会强行并入DO。这种模式应该避免。</li>
<li>作者主张使用贫血模式。</li>
</ul>
</li>
</ul>
<h2 id="Actor-模式"><a href="#Actor-模式" class="headerlink" title="Actor 模式"></a>Actor 模式</h2><p>TODO</p>
<h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><h3 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h3><p>TODO</p>
<h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><p>TODO</p>
<h3 id="Vert-x"><a href="#Vert-x" class="headerlink" title="Vert.x"></a>Vert.x</h3><p>TODO</p>
<h2 id="DODAF2-0"><a href="#DODAF2-0" class="headerlink" title="DODAF2.0"></a>DODAF2.0</h2><ul>
<li><a href="http://www.360doc.com/content/16/0627/19/33945750_571201779.shtml" target="_blank" rel="external">《DODAF2.0方法论》</a></li>
<li><a href="http://blog.51cto.com/xiaoyong/1553164" target="_blank" rel="external">《DODAF2.0之能力视角如何落地》</a></li>
</ul>
<h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>无需过多关系服务器的服务架构理念。</p>
<ul>
<li><p><a href="http://www.jdon.com/soa/serverless.html" target="_blank" rel="external">《什么是Serverless无服务器架构？》</a></p>
<ul>
<li>Serverless 不代表出去服务器，而是去除对服务器运行状态的关心。</li>
<li>Serverless 代表一思维方式的转变，从“构建一套服务在一台服务器上，对对个事件进行响应转变为构建一个为服务器，来响应一个事件”。</li>
<li>Serverless 不代表某个具体的框架。</li>
</ul>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/10/how-to-understand-serverless" target="_blank" rel="external">《如何理解Serverless？》</a></p>
<ul>
<li>依赖于 Baas （(Mobile) Backend as a Service） 和 Faas （Functions as a service）</li>
</ul>
</li>
</ul>
<h2 id="Service-Mesh"><a href="#Service-Mesh" class="headerlink" title="Service Mesh"></a>Service Mesh</h2><ul>
<li><a href="https://time.geekbang.org/article/2355" target="_blank" rel="external">《什么是Service Mesh？》</a></li>
<li><p><a href="https://www.jianshu.com/p/e23e3e74538e" target="_blank" rel="external">《初识 Service Mesh》</a></p>
</li>
<li><p><a href="https://time.geekbang.org/article/2355" target="_blank" rel="external">《什么是Service Mesh？》</a></p>
</li>
</ul>
<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="架构评审"><a href="#架构评审" class="headerlink" title="架构评审"></a>架构评审</h2><ul>
<li><a href="http://developer.51cto.com/art/201506/478486.htm" target="_blank" rel="external">《架构设计之如何评审架构设计说明书》</a></li>
<li><a href="https://blog.csdn.net/wireless_com/article/details/45935591" target="_blank" rel="external">《人人都是架构师：非功能性需求》</a></li>
</ul>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/architect-12-rules-complete/" target="_blank" rel="external">《架构之重构的12条军规》</a></li>
</ul>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul>
<li><a href="https://github.com/alibaba/p3c" target="_blank" rel="external">《阿里巴巴Java开发手册》</a></li>
</ul>
<h2 id="代码-Review"><a href="#代码-Review" class="headerlink" title="代码 Review"></a>代码 Review</h2><p>制度还是制度!<br>另外，每个公司需要根据自己的需求和目标制定自己的 check list</p>
<ul>
<li><p><a href="http://www.sohu.com/a/229745352_181657" target="_blank" rel="external">《为什么你做不好 Code Review？》</a></p>
<ul>
<li>代码 review 做的好，在于制度建设。</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/uxyheaven/article/details/49773619" target="_blank" rel="external">《从零开始Code Review》</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/zuoping/p/5477047.html" target="_blank" rel="external">《Code Review Checklist》</a></p>
</li>
<li><p><a href="https://dzone.com/articles/java-code-review-checklist" target="_blank" rel="external">《Java Code Review Checklist》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/legend0011/article/details/45585575" target="_blank" rel="external">《如何用 gitlab 做 code review》</a></p>
</li>
</ul>
<h2 id="RUP"><a href="#RUP" class="headerlink" title="RUP"></a>RUP</h2><ul>
<li><a href="https://blog.csdn.net/apanious/article/details/51011946" target="_blank" rel="external">《运用RUP 4+1视图方法进行软件架构设计》</a></li>
</ul>
<h2 id="看板管理"><a href="#看板管理" class="headerlink" title="看板管理"></a>看板管理</h2><ul>
<li><a href="https://blog.csdn.net/tkchen/article/details/51637643" target="_blank" rel="external">《说说看板在项目中的应用》</a></li>
</ul>
<h2 id="SCRUM"><a href="#SCRUM" class="headerlink" title="SCRUM"></a>SCRUM</h2><p>SCRUM - 争球</p>
<ul>
<li>3个角色:Product Owner(PO) 产品负责人;Scrum Master（SM），推动Scrum执行;Team 开发团队。</li>
<li>3个工件：Product Backlog 产品TODOLIST，含优先级;Sprint Backlog 功能开发 TODO LIST；燃尽图；</li>
<li>五个价值观：专注、勇气、公开、承诺、尊重。</li>
</ul>
<ul>
<li><p><a href="https://blog.csdn.net/inny100_100/article/details/54633757" target="_blank" rel="external">《敏捷项目管理流程-Scrum框架最全总结！》</a></p>
</li>
<li><p><a href="https://blog.csdn.net/superkunkun/article/details/52951142" target="_blank" rel="external">《敏捷其实很简单3—敏捷方法之scrum》</a></p>
</li>
</ul>
<h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><p>TODO</p>
<h2 id="极限编程（XP）"><a href="#极限编程（XP）" class="headerlink" title="极限编程（XP）"></a>极限编程（XP）</h2><p>XP - eXtreme Programming</p>
<ul>
<li><p><a href="http://www.woshipm.com/pmd/406917.html" target="_blank" rel="external">《主流敏捷开发方法：极限编程XP》</a></p>
<ul>
<li>是一种指导开发人员的方法论。</li>
<li><p>4大价值：</p>
<ul>
<li>沟通：鼓励口头沟通，提高效率。</li>
<li>简单：够用就好。</li>
<li>反馈：及时反馈、通知相关人。</li>
<li>勇气：提倡拥抱变化，敢于重构。</li>
</ul>
</li>
<li><p>5个原则：快速反馈、简单性假设、逐步修改、提倡更改（小步快跑）、优质工作（保证质量的前提下保证小步快跑）。</p>
</li>
<li>5个工作：阶段性冲刺；冲刺计划会议；每日站立会议；冲刺后review；回顾会议。</li>
</ul>
</li>
</ul>
<h2 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h2><p>边写码，边review。能够增强代码质量、减少bug。</p>
<ul>
<li><a href="http://www.baike.com/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" target="_blank" rel="external">《结对编程》</a></li>
</ul>
<h2 id="PDCA-循环质量管理"><a href="#PDCA-循环质量管理" class="headerlink" title="PDCA 循环质量管理"></a>PDCA 循环质量管理</h2><p>P——PLAN 策划，D——DO 实施，C——CHECK 检查，A——ACT 改进</p>
<ul>
<li><a href="http://www.baike.com/wiki/PDCA" target="_blank" rel="external">《PDCA》</a></li>
</ul>
<h2 id="FMEA管理模式"><a href="#FMEA管理模式" class="headerlink" title="FMEA管理模式"></a>FMEA管理模式</h2><p>TODO</p>
<h1 id="通用业务术语"><a href="#通用业务术语" class="headerlink" title="通用业务术语"></a>通用业务术语</h1><p>TODO</p>
<h1 id="技术趋势"><a href="#技术趋势" class="headerlink" title="技术趋势"></a>技术趋势</h1><p>TODO</p>
<h1 id="政策、法规"><a href="#政策、法规" class="headerlink" title="政策、法规"></a>政策、法规</h1><p>TODO</p>
<h2 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h2><h3 id="严格遵守刑法253法条"><a href="#严格遵守刑法253法条" class="headerlink" title="严格遵守刑法253法条"></a>严格遵守刑法253法条</h3><p>我国刑法第253条之一规定：</p>
<blockquote>
<ul>
<li>国家机关或者金融、电信、交通、教育、医疗等单位的工作人员，违反国家规定，将本单位在履行职责或者提供服务过程中获得的公民个人信息，出售或者非法提供给他人，情节严重的，处3年以下有期徒刑或者拘役，并处或者单处罚金。</li>
<li>窃取或者以其他方法非法获取上述信息，情节严重的，依照前款的规定处罚。 </li>
<li>单位犯前两款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。</li>
</ul>
</blockquote>
<p>最高人民法院、最高人民检察院关于执行《中华人民共和国刑法》确定罪名的补充规定（四）规定：触犯刑法第253条之一第1款之规定，构成“出售、非法提供公民个人信息罪”；触犯刑法第253条之一第2款之规定，构成“非法获取公民个人信息罪”</p>
<ul>
<li><a href="https://baike.baidu.com/item/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BD%AA" target="_blank" rel="external">《非法获取公民个人信息罪》</a></li>
</ul>
<h1 id="架构师素质"><a href="#架构师素质" class="headerlink" title="架构师素质"></a>架构师素质</h1><ul>
<li><p><a href="http://hellojava.info/?p=430" target="_blank" rel="external">《架构师画像》</a></p>
<ul>
<li>业务理解和抽象能力</li>
<li>NB的代码能力</li>
<li>全面：1. 在面对业务问题上，架构师脑海里是否会浮现出多种技术方案；2. 在做系统设计时是否考虑到了足够多的方方面面；3. 在做系统设计时是否考虑到了足够多的方方面面； </li>
<li>全局：是否考虑到了对上下游的系统的影响。</li>
<li>权衡：权衡投入产出比；优先级和节奏控制；</li>
</ul>
</li>
<li><p><a href="http://www.infoq.com/cn/articles/architecture-optimization-and-design-the-architect-must-know" target="_blank" rel="external">《关于架构优化和设计，架构师必须知道的事情》</a></p>
<ul>
<li>要去考虑的细节：模块化、轻耦合、无共享架构；减少各个组件之前的依赖、注意服务之间依赖所有造成的链式失败及影响等。</li>
<li>基础设施、配置、测试、开发、运维综合考虑。</li>
<li>考虑人、团队、和组织的影响。 </li>
</ul>
</li>
<li><p><a href="https://www.zhihu.com/question/19841397" target="_blank" rel="external">《如何才能真正的提高自己，成为一名出色的架构师？》</a> </p>
</li>
<li><p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/54144129" target="_blank" rel="external">《架构师的必备素质和成长途径》</a></p>
<ul>
<li>素质：业务理解、技术广度、技术深度、丰富经验、沟通能力、动手能力、美学素养。</li>
<li>成长路径：2年积累知识、4年积累技能和组内影响力、7年积累部门内影响力、7年以上积累跨部门影响力。 </li>
</ul>
</li>
<li><p><a href="http://blog.51cto.com/frankfan/1248401" target="_blank" rel="external">《架构设计师—你在哪层楼？》</a></p>
<ul>
<li>第一层的架构师看到的只是产品本身</li>
<li>第二层的架构师不仅看到自己的产品，还看到了整体的方案</li>
<li>第三层的架构师看到的是商业价值 </li>
</ul>
</li>
</ul>
<h1 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h1><p>TODO</p>
<h2 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h2><h1 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h1><h2 id="行业资讯"><a href="#行业资讯" class="headerlink" title="行业资讯"></a>行业资讯</h2><ul>
<li><a href="http://36kr.com/" target="_blank" rel="external">36kr</a></li>
<li><a href="http://www.techweb.com.cn/" target="_blank" rel="external">Techweb</a></li>
</ul>
<h2 id="公众号列表"><a href="#公众号列表" class="headerlink" title="公众号列表"></a>公众号列表</h2><p>TODO</p>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="团队博客"><a href="#团队博客" class="headerlink" title="团队博客"></a>团队博客</h3><ul>
<li><a href="http://jm.taobao.org/" target="_blank" rel="external">阿里中间件博客</a></li>
<li><a href="https://tech.meituan.com" target="_blank" rel="external">美团点评技术团队博客</a></li>
</ul>
<h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><ul>
<li><a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰的网络日志</a></li>
<li><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳 - COOLSHELL-陈皓</a></li>
<li><a href="http://hellojava.info/" target="_blank" rel="external">hellojava-阿里毕玄</a></li>
<li><a href="http://cmsblogs.com/" target="_blank" rel="external">Cm’s Blog</a></li>
<li><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD-翟永超-《Spring Cloud微服务实战》作者</a></li>
</ul>
<h2 id="综合门户、社区"><a href="#综合门户、社区" class="headerlink" title="综合门户、社区"></a>综合门户、社区</h2><p><strong>国内：</strong></p>
<ul>
<li><a href="http://csdn.net" target="_blank" rel="external">CSDN</a><br>   老牌技术社区、不必解释。</li>
<li><a href="http://www.51cto.com/" target="_blank" rel="external">51cto.com</a></li>
<li><a href="http://www.iteye.com/" target="_blank" rel="external">ITeye</a><ul>
<li>偏 Java 方向 </li>
</ul>
</li>
<li><a href="https://www.cnblogs.com" target="_blank" rel="external">博客园</a></li>
<li><a href="http://www.tom.net/" target="_blank" rel="external">ChinaUnix</a><ul>
<li>偏 Linux 方向 </li>
</ul>
</li>
<li><a href="https://www.oschina.net/" target="_blank" rel="external">开源中国社区</a></li>
<li><a href="http://www.open-open.com/" target="_blank" rel="external">深度开源</a></li>
<li><p><a href="http://www.jobbole.com/" target="_blank" rel="external">伯乐在线</a></p>
<ul>
<li>涵盖 IT职场、Web前端、后端、移动端、数据库等方面内容，偏技术端。</li>
</ul>
</li>
<li><p><a href="http://www.itpub.net/" target="_blank" rel="external">ITPUB</a></p>
</li>
<li><a href="https://cloud.tencent.com/developer/column" target="_blank" rel="external">腾讯云— 云+社区</a></li>
<li><a href="https://yq.aliyun.com/" target="_blank" rel="external">阿里云— 云栖社区</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="external">IBM DeveloperWorks</a></li>
<li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.linkedkeeper.com" target="_blank" rel="external">LinkedKeeper</a></li>
</ul>
<p><strong>国外：</strong></p>
<ul>
<li><a href="https://dzone.com" target="_blank" rel="external">DZone</a></li>
<li><a href="https://www.reddit.com" target="_blank" rel="external">Reddit</a></li>
</ul>
<h2 id="问答、讨论类社区"><a href="#问答、讨论类社区" class="headerlink" title="问答、讨论类社区"></a>问答、讨论类社区</h2><ul>
<li><a href="https://segmentfault.com" target="_blank" rel="external">segmentfault</a><ul>
<li>问答+专栏 </li>
</ul>
</li>
<li><a href="https://www.zhihu.com/" target="_blank" rel="external">知乎</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a></li>
</ul>
<h2 id="行业数据分析"><a href="#行业数据分析" class="headerlink" title="行业数据分析"></a>行业数据分析</h2><ul>
<li><a href="http://report.iresearch.cn/" target="_blank" rel="external">艾瑞网</a></li>
<li><p><a href="https://www.questmobile.com.cn" target="_blank" rel="external">QUEST MOBILE</a></p>
</li>
<li><p><a href="http://data.stats.gov.cn/" target="_blank" rel="external">国家数据</a></p>
</li>
<li><p><a href="http://www.talkingdata.com/" target="_blank" rel="external">TalkingData</a></p>
</li>
</ul>
<h2 id="专项网站"><a href="#专项网站" class="headerlink" title="专项网站"></a>专项网站</h2><ul>
<li><p>测试:</p>
<ul>
<li><a href="http://www.ltesting.net/" target="_blank" rel="external">领测国际</a> </li>
<li><a href="https://www.testwo.com/" target="_blank" rel="external">测试窝</a></li>
<li><a href="https://testerhome.com" target="_blank" rel="external">TesterHome</a></li>
</ul>
</li>
<li><p>运维:</p>
<pre><code>* [运维派](http://www.yunweipai.com/) 
* [Abcdocker](https://www.abcdocker.com/)
</code></pre></li>
<li><p>Java:</p>
<ul>
<li><a href="http://www.importnew.com/" target="_blank" rel="external">ImportNew</a><ul>
<li>专注于 Java 技术分享</li>
</ul>
</li>
<li><a href="https://howtodoinjava.com/" target="_blank" rel="external">HowToDoInJava</a><ul>
<li>英文博客</li>
</ul>
</li>
</ul>
</li>
<li><p>安全</p>
<ul>
<li><a href="https://www.2cto.com/" target="_blank" rel="external">红黑联盟</a> </li>
<li><a href="http://www.freebuf.com/" target="_blank" rel="external">FreeBuf</a></li>
</ul>
</li>
<li><p>大数据</p>
<ul>
<li><a href="http://www.thebigdata.cn/" target="_blank" rel="external">中国大数据</a> </li>
</ul>
</li>
<li><p>其他专题网站：</p>
<ul>
<li><a href="http://www.dockerinfo.net/" target="_blank" rel="external">DockerInfo</a><ul>
<li>专注于 Docker 应用及咨询、教程的网站。</li>
</ul>
</li>
<li><a href="https://www.linuxidc.com/" target="_blank" rel="external">Linux公社</a><ul>
<li>Linux 主题社区</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h2><ul>
<li><a href="https://github.com/TeamStuQ/skill-map" target="_blank" rel="external">程序员技能图谱</a></li>
</ul>
<h2 id="推荐参考书"><a href="#推荐参考书" class="headerlink" title="推荐参考书"></a>推荐参考书</h2><h3 id="在线电子书"><a href="#在线电子书" class="headerlink" title="在线电子书"></a>在线电子书</h3><ul>
<li><a href="https://github.com/forezp/SpringCloudLearning" target="_blank" rel="external">《深入理解Spring Cloud与微服务构建》</a></li>
</ul>
<ul>
<li><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523849261680/AliTech101_RD.pdf" target="_blank" rel="external">《阿里技术参考图册-研发篇》</a></li>
<li><p><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523848064814/AliTech101_Algorithms.pdf" target="_blank" rel="external">《阿里技术参考图册-算法篇》</a></p>
</li>
<li><p><a href="http://dpurl.cn/n/1lqcX" target="_blank" rel="external">《2018美团点评技术年货（合辑）》70M</a></p>
</li>
<li><p><a href="http://www.infoq.com/cn/architect/" target="_blank" rel="external">InfoQ《架构师》月刊</a></p>
</li>
<li><p><a href="https://www.w3cschool.cn/architectroad/" target="_blank" rel="external">《架构师之路》</a></p>
</li>
</ul>
<h3 id="纸质书"><a href="#纸质书" class="headerlink" title="纸质书"></a>纸质书</h3><h4 id="开发方面"><a href="#开发方面" class="headerlink" title="开发方面"></a>开发方面</h4><ul>
<li>《阿里巴巴Java开发手册》<a href="https://union-click.jd.com/jdc?d=bVKwZQ" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=阿里巴巴Java开发手册" target="_blank" rel="external">淘宝</a></li>
</ul>
<h4 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h4><ul>
<li>《软件架构师的12项修炼：技术技能篇》<a href="https://union-click.jd.com/jdc?d=gXvRd8" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=软件架构师的12项修炼：技术技能篇" target="_blank" rel="external">淘宝</a></li>
<li>《架构之美》<a href="https://union-click.jd.com/jdc?d=xJit5I" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=架构之美" target="_blank" rel="external">淘宝</a></li>
<li>《分布式服务架构》<a href="https://union-click.jd.com/jdc?d=JS5Od9" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=分布式服务架构" target="_blank" rel="external">淘宝</a></li>
<li>《聊聊架构》 <a href="https://union-click.jd.com/jdc?d=FHooH4" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=聊聊架构" target="_blank" rel="external">淘宝</a></li>
<li>《云原生应用架构实践》<a href="https://union-click.jd.com/jdc?d=orkJSj" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=云原生应用架构实践" target="_blank" rel="external">淘宝</a></li>
<li>《亿级流量网站架构核心技术》<a href="https://union-click.jd.com/jdc?d=RnOSP5" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=亿级流量网站架构核心技术" target="_blank" rel="external">淘宝</a></li>
<li>《淘宝技术这十年》<a href="https://union-click.jd.com/jdc?d=LwrDfD" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=淘宝技术这十年" target="_blank" rel="external">淘宝</a></li>
<li><p>《企业IT架构转型之道-中台战略思想与架构实战》 <a href="https://union-click.jd.com/jdc?d=89pAEm" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=企业IT架构转型之道" target="_blank" rel="external">淘宝</a></p>
</li>
<li><p>《高可用架构（第1卷）》<a href="https://item.jd.com/12195481.html" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=高可用架构" target="_blank" rel="external">淘宝</a></p>
</li>
</ul>
<h4 id="技术管理方面"><a href="#技术管理方面" class="headerlink" title="技术管理方面"></a>技术管理方面</h4><ul>
<li>《CTO说》<a href="https://union-click.jd.com/jdc?d=zhTZyr" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=CTO说" target="_blank" rel="external">淘宝</a></li>
<li>《技术管理之巅》<a href="https://union-click.jd.com/jdc?d=LgRBUW" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=技术管理之巅" target="_blank" rel="external">淘宝</a></li>
<li>《网易一千零一夜：互联网产品项目管理实战》<a href="https://union-click.jd.com/jdc?d=jcRz2r" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=网易一千零一夜：互联网产品项目管理实战" target="_blank" rel="external">淘宝</a></li>
</ul>
<h4 id="基础理论-1"><a href="#基础理论-1" class="headerlink" title="基础理论"></a>基础理论</h4><ul>
<li>《数学之美》<a href="https://union-click.jd.com/jdc?d=ghIES2" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=数学之美" target="_blank" rel="external">淘宝</a></li>
<li>《编程珠玑》<a href="https://union-click.jd.com/jdc?d=YmhdEu" target="_blank" rel="external">京东</a> <a href="https://s.taobao.com/search?q=编程珠玑" target="_blank" rel="external">淘宝</a></li>
</ul>
<h4 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h4><p>TODO</p>
<h4 id="大数据方面"><a href="#大数据方面" class="headerlink" title="大数据方面"></a>大数据方面</h4><h1 id="技术资源"><a href="#技术资源" class="headerlink" title="技术资源"></a>技术资源</h1><h2 id="开源资源"><a href="#开源资源" class="headerlink" title="开源资源"></a>开源资源</h2><ul>
<li><p><a href="https://github.com" target="_blank" rel="external">github</a></p>
</li>
<li><p><a href="https://www.apache.org/index.html" target="_blank" rel="external">Apache 软件基金会</a></p>
</li>
</ul>
<h2 id="手册、文档、教程"><a href="#手册、文档、教程" class="headerlink" title="手册、文档、教程"></a>手册、文档、教程</h2><p><strong>国内：</strong></p>
<ul>
<li><a href="http://w3cschool.cn" target="_blank" rel="external">W3Cschool</a> </li>
<li><p><a href="http://www.runoob.com/" target="_blank" rel="external">Runoob.com</a></p>
<ul>
<li>HTML 、 CSS、XML、Java、Python、PHP、设计模式等入门手册。</li>
</ul>
</li>
<li><p><a href="https://love2.io/" target="_blank" rel="external">Love2.io</a></p>
<ul>
<li>很多很多中文在线电子书，是一个全新的开源技术文档分享平台。</li>
</ul>
</li>
<li><a href="http://gitbook.cn/" target="_blank" rel="external">gitbook.cn</a><ul>
<li>付费电子书。 </li>
</ul>
</li>
<li><a href="http://www.apachecn.org/" target="_blank" rel="external">ApacheCN</a><ul>
<li>AI、大数据方面系列中文文档。</li>
</ul>
</li>
</ul>
<p><strong>国外：</strong></p>
<ul>
<li><a href="http://www.quickcode.co/" target="_blank" rel="external">Quick Code</a><ul>
<li>免费在线技术教程。</li>
</ul>
</li>
<li><a href="http://gitbook.com" target="_blank" rel="external">gitbook.com</a><ul>
<li>有部分中文电子书。</li>
</ul>
</li>
<li><a href="https://www.cheatography.com/" target="_blank" rel="external">Cheatography</a><ul>
<li>Cheat Sheets 大全，单页文档网站。</li>
</ul>
</li>
<li><a href="https://www.tutorialspoint.com/index.htm" target="_blank" rel="external">Tutorialspoint</a><ul>
<li>知名教程网站，提供Java、Python、JS、SQL、大数据等高质量入门教程。</li>
</ul>
</li>
</ul>
<h2 id="在线课堂"><a href="#在线课堂" class="headerlink" title="在线课堂"></a>在线课堂</h2><ul>
<li><a href="http://www.xuetuwuyou.com/" target="_blank" rel="external">学徒无忧</a></li>
<li><a href="https://time.geekbang.org/" target="_blank" rel="external">极客时间</a></li>
<li><a href="https://segmentfault.com/lives" target="_blank" rel="external">segmentfault</a></li>
<li><a href="https://new.stuq.org/course/explore" target="_blank" rel="external">斯达克学院</a></li>
<li><a href="http://nowcoder.com" target="_blank" rel="external">牛客网</a></li>
<li><a href="https://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://edu.51cto.com/" target="_blank" rel="external">51CTO学院</a></li>
</ul>
<h2 id="会议、活动"><a href="#会议、活动" class="headerlink" title="会议、活动"></a>会议、活动</h2><ul>
<li><a href="http://www.infoq.com/cn/qcon/" target="_blank" rel="external">QCon</a></li>
<li><a href="https://archsummit.com" target="_blank" rel="external">ArchSummit</a></li>
<li><a href="http://www.thegitc.com/" target="_blank" rel="external">GITC全球互联网技术大会</a></li>
</ul>
<p><strong>活动发布平台:</strong> </p>
<ul>
<li><a href="http://www.huodongxing.com/" target="_blank" rel="external">活动行</a></li>
</ul>
<h2 id="常用APP"><a href="#常用APP" class="headerlink" title="常用APP"></a>常用APP</h2><ul>
<li><a href="https://time.geekbang.org" target="_blank" rel="external">极客时间</a></li>
<li><a href="https://www.igetget.com" target="_blank" rel="external">得到</a></li>
</ul>
<h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><ul>
<li><a href="https://www.zhipin.com" target="_blank" rel="external">Boss直聘</a></li>
<li><a href="https://www.lagou.com" target="_blank" rel="external">拉勾网</a></li>
<li><a href="https://www.liepin.com" target="_blank" rel="external">猎聘</a></li>
<li><a href="https://cn.100offer.com/" target="_blank" rel="external">100Offer</a></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="https://s.geekbang.org/" target="_blank" rel="external">极客搜索</a><ul>
<li>技术文章搜索引擎。</li>
</ul>
</li>
</ul>
<h2 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h2><ul>
<li><a href="https://coding.net" target="_blank" rel="external">Coding</a></li>
<li><a href="https://gitee.com/" target="_blank" rel="external">码云</a></li>
</ul>
<h2 id="文件服务"><a href="#文件服务" class="headerlink" title="文件服务"></a>文件服务</h2><ul>
<li>七牛</li>
<li>又拍云</li>
</ul>
<h2 id="综合云服务商"><a href="#综合云服务商" class="headerlink" title="综合云服务商"></a>综合云服务商</h2><ul>
<li>阿里云</li>
<li><a href="https://cloud.tencent.com/redirect.php?redirect=1012&amp;cps_key=c2665015d90871c0cb20fef91b7afc3c" target="_blank" rel="external">腾讯云</a></li>
<li>百度云</li>
<li>新浪云</li>
<li>金山云</li>
<li><a href="https://amazonaws-china.com/cn/" target="_blank" rel="external">亚马逊云(AWS)</a></li>
<li><a href="https://cloud.google.com/?hl=zh-cn" target="_blank" rel="external">谷歌云</a></li>
<li><a href="https://azure.microsoft.com/zh-cn/" target="_blank" rel="external">微软云</a></li>
</ul>
<h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><ul>
<li><a href="http://linode.com" target="_blank" rel="external">Linode</a></li>
<li><a href="https://www.digitalocean.com" target="_blank" rel="external">DigitalOcean</a></li>
<li><a href="https://www.vultr.com/" target="_blank" rel="external">Vultr</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;《后端架构师技术图谱》&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;更新于20180624&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dawell.cc/2018/07/26/20180826%E5%90%8E%E7%AB%AF%E6%9E%B6%
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开罗游戏-忍者感悟</title>
    <link href="https://dawell.github.io/2018/04/17/a7.%20%E5%BC%80%E7%BD%97%E6%B8%B8%E6%88%8F-%E5%BF%8D%E8%80%85%E6%84%9F%E6%82%9F/"/>
    <id>https://dawell.github.io/2018/04/17/a7. 开罗游戏-忍者感悟/</id>
    <published>2018-04-17T11:18:20.000Z</published>
    <updated>2018-04-18T05:37:42.761Z</updated>
    
    <content type="html"><![CDATA[<p>游戏比较有意思的是除了攻打地图上的城市，最终还有最终boss，其中还有一个隐藏boss，棒球队，要求不能用炮兵，挑战没有现代工具原始的主将攻击方式</p>
<p>（衣食）住行</p>
<ol>
<li>住：茅屋、住宅、豪宅</li>
<li>行：道路、桥</li>
</ol>
<p>原料</p>
<ol>
<li>食：稻田，水田</li>
<li>原材料：采石、伐木</li>
</ol>
<p>工坊：转换原料—&gt;店铺商品</p>
<p>店铺</p>
<ol>
<li>饮食：餐馆、茶馆</li>
<li>穿着：和服、小饰品</li>
<li>艺术：特产、书画</li>
<li>忍者：道具、铁匠</li>
</ol>
<p>炮兵果真是高次元武器，输出猛如虎，骑兵+炮兵兼职无敌，原始攻击模式是步兵+弓箭</p>
<p>兵种</p>
<ol>
<li>步兵：攻防兼备，T，看防御，体力不够+丸子回复，体力够+炸弹；连击技能、斩击抗性</li>
<li>弓箭：输出，看臂力；带动物</li>
<li>骑兵：重点输出，看攻击；必须匹配马，否则会变为轻步兵；连击技能</li>
<li>炮兵：超级输出，看射击；带眼镜；可以带动物；连射技能</li>
</ol>
<p>棒球队打法</p>
<ol>
<li>保留3个轻步兵满级，卸载防御攻防武器换超级忍者刀，满级的也能低于3轮攻击</li>
<li>弓兵有的话顶多选1-2个高输出的</li>
<li>骑兵：8人超级忍者刀、各种马，不够挑战幕府+劳动马凑1-2个</li>
<li>步兵+弓兵携带所有动物辅助输出</li>
<li>将领技能：斩击抗性4、战术4、步兵连击</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游戏比较有意思的是除了攻打地图上的城市，最终还有最终boss，其中还有一个隐藏boss，棒球队，要求不能用炮兵，挑战没有现代工具原始的主将攻击方式&lt;/p&gt;
&lt;p&gt;（衣食）住行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;住：茅屋、住宅、豪宅&lt;/li&gt;
&lt;li&gt;行：道路、桥&lt;/li&gt;
&lt;/ol
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开罗游戏-城市游戏心得总结</title>
    <link href="https://dawell.github.io/2018/04/08/20180408%E5%BC%80%E7%BD%97%E6%B8%B8%E6%88%8F-%E5%9F%8E%E5%B8%82%E6%B8%B8%E6%88%8F%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93/"/>
    <id>https://dawell.github.io/2018/04/08/20180408开罗游戏-城市游戏心得总结/</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-04-08T12:12:06.139Z</updated>
    
    <content type="html"><![CDATA[<p>清明3天假，放假的前一天晚上突然特别想玩游戏，于是去扒一些评分比较高的游戏，最近玩完的就是这款开罗游戏了<br>总共玩完了2周目，中间有几次简短失败的尝试重新来过<br>虽然是款小游戏，但是完整的体会到了建造城市的乐趣，玩完还是有点收获的</p>
<p>整个城市分为那么几个部分</p>
<ol>
<li>基础产业</li>
<li>餐饮业</li>
<li>娱乐业</li>
<li>制造业</li>
<li>服务业</li>
<li>文化财产业</li>
</ol>
<p>自己总结的建筑关系<br><img src="https://gitee.com/uploads/images/2018/0408/194129_b4f85da9_697510.png" alt="建筑关系" title="屏幕截图.png"></p>
<p>玩游戏建议</p>
<ol>
<li>我觉得上来基础产业要有，同时重点发展餐饮业，制造的建筑可以先重点专业街的</li>
<li>建筑最好都是9宫格形式，中间一开始可以塞棵树还能涨物价，等后期可以改造为工作楼用于发现更多专业</li>
<li>多造几个连续专业街，专业街相邻有效距离也是自己建筑的9宫格内，堆一座建筑的地价每天有大量奖励</li>
<li>树木有时候可以挖到金矿，中间地贵，还是放在边缘建点</li>
<li>人员的培养很重要，新职业抓紧找一个挣钱较少的居民去转职，可以偶尔得到一笔钱</li>
<li>制造业尽快搞，大部分是出行相关，可以加快居民效率</li>
</ol>
<p><img src="https://gitee.com/uploads/images/2018/0408/201148_5bb1e88c_697510.png" alt="输入图片说明" title="屏幕截图.png"></p>
<p>感悟</p>
<ol>
<li>玩这个游戏还是挺费时间的，尤其是中间发展阶段，要等好久，弹出一个新闻就要点击下才能进行下去，有些无聊，二周目时可以加速导致好了很多</li>
<li>想起了小时候玩红警、帝国、星际的时候，自己总是不停的搞发展，不造军队，自己就是喜欢建造发展升级的感觉，所以这种游戏特别对我胃口，不过玩完后又发现这其实很空虚，以后还是不玩开罗了吧，除非开罗出了好友比拼的话，这游戏就有毒了</li>
<li>不玩这个游戏对城市功能了解并没什么系统化的概念，虽然是游戏但是完了后发现服务业真的丰富了我们的城市功能，一个城市必要的是基础+餐饮+娱乐，而制造、服务、文化属于加分项，自己选择城市居住也可以多看中后面的设施完善度</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;清明3天假，放假的前一天晚上突然特别想玩游戏，于是去扒一些评分比较高的游戏，最近玩完的就是这款开罗游戏了&lt;br&gt;总共玩完了2周目，中间有几次简短失败的尝试重新来过&lt;br&gt;虽然是款小游戏，但是完整的体会到了建造城市的乐趣，玩完还是有点收获的&lt;/p&gt;
&lt;p&gt;整个城市分为那么几个
    
    </summary>
    
      <category term="经验" scheme="https://dawell.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="游戏" scheme="https://dawell.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>开罗游戏-游戏品味</title>
    <link href="https://dawell.github.io/2018/04/05/20180405%E6%B8%B8%E6%88%8F%E5%93%81%E5%91%B3/"/>
    <id>https://dawell.github.io/2018/04/05/20180405游戏品味/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2018-04-09T05:46:33.553Z</updated>
    
    <content type="html"><![CDATA[<p>小时候玩游戏会被当做是网瘾，精神污染，最恐怕的电击治疗，那时候是禁止去网吧的，后来电脑与网络普及，网络游戏逐步放开不被限制</p>
<p>头号玩家</p>
<p>对于自己玩游戏的品味说来也奇怪，其实自己一直想玩游戏，但是又不想浪费时间，所以只能玩些精品游戏吧<br>前一阵通过了解快应用的诞生了解到Android厂商的游戏盈利模式，应用市场的游戏排行已经不可信了，而且没有按评价排名的功能<br>想起良心游戏排行榜平台：TabTab，于是从上面搜索高分游戏</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小时候玩游戏会被当做是网瘾，精神污染，最恐怕的电击治疗，那时候是禁止去网吧的，后来电脑与网络普及，网络游戏逐步放开不被限制&lt;/p&gt;
&lt;p&gt;头号玩家&lt;/p&gt;
&lt;p&gt;对于自己玩游戏的品味说来也奇怪，其实自己一直想玩游戏，但是又不想浪费时间，所以只能玩些精品游戏吧&lt;br&gt;前一阵通
    
    </summary>
    
      <category term="经验" scheme="https://dawell.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="游戏" scheme="https://dawell.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>工作中的避免踩坑指南</title>
    <link href="https://dawell.github.io/2017/09/24/20170924%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://dawell.github.io/2017/09/24/20170924工作中的避免踩坑指南/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-09-24T07:20:01.778Z</updated>
    
    <content type="html"><![CDATA[<p>本人工作6人，负责过基础平台众多产品，踩坑无数<br>现根据回忆总结下遇到的坑与如何才能避开这些坑的方法</p>
<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><ul>
<li>被依赖中间件或运维做任何服务端改动需通知</li>
</ul>
<h3 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h3><ul>
<li>发布必须紧跟线上涉及系统的监控情况，有情况里面回滚</li>
<li>灰度必须逐步放量，不可着急，留够时间</li>
<li>禁止周六发布功能，只能发布紧急故障修复</li>
</ul>
<h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><ul>
<li>灰度控制必须加对比监控</li>
<li>禁止加入最新中间件与运维产品，不吃螃蟹</li>
<li>慢SQL禁止，必须看自己表索引是否增加</li>
<li>对关键case做单元测试，web也要，要验证数据的正确性</li>
</ul>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul>
<li>自动清理日志脚本</li>
<li>线上异常日志需要实时关注</li>
<li>web需要打印出请求的头信息便于追踪</li>
<li>三方渠道需要管理，提前做好数量问题、打通准备</li>
<li>提供接口调用文档，列出哪些禁止行为，比如私自遍历uid调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人工作6人，负责过基础平台众多产品，踩坑无数&lt;br&gt;现根据回忆总结下遇到的坑与如何才能避开这些坑的方法&lt;/p&gt;
&lt;h3 id=&quot;通知&quot;&gt;&lt;a href=&quot;#通知&quot; class=&quot;headerlink&quot; title=&quot;通知&quot;&gt;&lt;/a&gt;通知&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;被依赖中
    
    </summary>
    
      <category term="经验" scheme="https://dawell.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="工作" scheme="https://dawell.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>大公司与小公司技术选型感悟</title>
    <link href="https://dawell.github.io/2017/09/17/20170917%E5%A4%A7%E5%85%AC%E5%8F%B8%E4%B8%8E%E5%B0%8F%E5%85%AC%E5%8F%B8%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E6%84%9F%E6%82%9F/"/>
    <id>https://dawell.github.io/2017/09/17/20170917大公司与小公司技术选型感悟/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2017-09-17T04:01:28.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h3><h4 id="大公司都喜欢自研，小公司喜欢用开源"><a href="#大公司都喜欢自研，小公司喜欢用开源" class="headerlink" title="大公司都喜欢自研，小公司喜欢用开源"></a>大公司都喜欢自研，小公司喜欢用开源</h4><p>大公司基于自己的技术实力，有专门的中间件研发团队来维护开发一些中间件产品<br>比如阿里巴巴，现有的技术框架大多都是自己封装或者自研产品：分布式服务框架–HSF、Dubbo，数据库AliSQL，链路监控鹰眼，甚至JDK也基于openJDK定制一版AJDK<br>比如美团点评，分布式调用Pigeon、监控Cat</p>
<p>小公司则更喜欢基于开源的解决方案<br>比如dubbo是开源的，而且很多公司都在用，即使是很久没更新的，依然继续采用，或者用还在维护的当当的dubbox<br>比如链路监控大家就用开源的zipkin<br>比如建设微服务架构，现在就流行使用spring cloud整体方案了</p>
<p>为什么明明有成熟的开源方案了，大公司还要自己搞一套呢？</p>
<ul>
<li>大公司最初也是小公司，他们最初也是尝试使用开源方案但是遇到了瓶颈，于是定制化魔改了一版</li>
<li>没有可行的开源方案，所以自研了，但是等开源有了，已经有上千个服务在使用自研系统，无法替换了</li>
<li>自研系统与公司内部其他产品增加了很多适配与集成特性，为了更加使用其他中间件产品而封装</li>
</ul>
<p>越老的公司自研产品越多，而且大公司内部自研产品功能越来越像<br>比如你会发现大众点评的pigeon的设计与dubbo是如此的相像，但是大众还是用自己的pigeon</p>
<p>现在spring cloud中的各个组件，估计阿里都有自己类似的实现，但是当时阿里开发的时候，spring cloud还没有，所以只能在自研道路上越走越远<br>同时在阿里的研发只要记住阿里中间件的使用规则即可，不用关注细节<br>这有好处也有坏处，好处自然是方便更可靠，更易集成阿里体系，坏处就是你知道的开源与技术也许在自研产品上已经不适用了，使用内部中间件的套路与技巧出了阿里没有什么用处</p>
<p>挖财目前也有强大的中间件团队，为了解决开源中的坑，也逐渐走上了自研道路，很多开源框架都加入了自己维护的代码，没有好的方案就进行自研<br>现在技术革新比较快，往往后来就有的开源框架也能很好的解决类似的问题<br>所以作为架构一定要保持2套技术体系的学习，一套是公司内部封装的技术，一套是开源中流行的解决方案<br>学习中会发现很多是相似的，很多是可以提升的，或者给公司内部中间件做贡献，或者给开源做贡献，都是不错的实践~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;技术框架&quot;&gt;&lt;a href=&quot;#技术框架&quot; class=&quot;headerlink&quot; title=&quot;技术框架&quot;&gt;&lt;/a&gt;技术框架&lt;/h3&gt;&lt;h4 id=&quot;大公司都喜欢自研，小公司喜欢用开源&quot;&gt;&lt;a href=&quot;#大公司都喜欢自研，小公司喜欢用开源&quot; class=&quot;he
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="架构" scheme="https://dawell.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>用户中心</title>
    <link href="https://dawell.github.io/2017/09/04/20170904%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
    <id>https://dawell.github.io/2017/09/04/20170904用户中心/</id>
    <published>2017-09-04T15:30:00.000Z</published>
    <updated>2017-09-05T02:15:06.087Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1504546211663&amp;di=2abfeebbce6670f8442681cf19dead67&amp;imgtype=0&amp;src=http%3A%2F%2Fupload.chinaz.com%2F2016%2F1020%2F201610201727406806.jpg" alt="用户中心"></p>
<h1 id="用户中心导论"><a href="#用户中心导论" class="headerlink" title="用户中心导论"></a>用户中心导论</h1><p>在互联网中，一切都是围绕用户来服务的，为了提供一系列服务，需要在服务中识别自然人个体，所以服务系统中出现了账号的概念来代表自然人，因为现在还不能把自然人通过某种方式直接在服务媒介上识别，所以互联网服务都是在用户想使用服务时引导用户注册一个账号的方式来创建账号。</p>
<ul>
<li>如果不是一系列服务而是一个服务，其实可以让用户直接输入需要填写的信息一次提交进行服务，如：调查问卷</li>
<li>自然人与系统中的账号最好的一一对应关系</li>
</ul>
<h2 id="业务对象（领域对象）"><a href="#业务对象（领域对象）" class="headerlink" title="业务对象（领域对象）"></a>业务对象（领域对象）</h2><p>账号要有唯一性，信息一部分是基本信息，另一部分是扩展的用户信息</p>
<h3 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h3><p>账号在内必须有唯一性，而对用户他不需要非常明确的唯一，只要长久不变的唯一即可</p>
<ul>
<li>对内的账号，会有uid或者userId的概念来代表唯一，不对外暴露</li>
<li>对外的账号会有account来标识唯一，每家公司最account的规则不一样<ul>
<li>微信是用户自己设置的，如果不设置就是空</li>
<li>有的公司会要求必须有账户字段，如果不要求用户输入则自动生成一个账号唯一标识，如 账号xxx</li>
<li>account一旦设置不允许更改</li>
</ul>
</li>
</ul>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>用户注册时的必须信息+个性化信息</p>
<ul>
<li>系统账号信息：uid、account、类型、状态</li>
<li>个人账号信息：手机号、邮箱、昵称、头像、个性化信息</li>
<li>企业账号信息：企业邮箱、代理人手机号、企业图标</li>
</ul>
<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>用户信息是用户自己填写的信息</p>
<ul>
<li>个人不变的自然人信息：姓名、身份证号、性别、生日、教育历史、工作历史、血型、籍贯</li>
<li>个人易变的信息：国籍、学历、当前工作、当前住址、婚姻、收入</li>
<li>企业信息：企业编码、企业名称、法人姓名、企业地址、企业logo</li>
</ul>
<h3 id="账号的分类"><a href="#账号的分类" class="headerlink" title="账号的分类"></a>账号的分类</h3><p>账号在多个系统中都有其存在，所以会有很多种类</p>
<ul>
<li>对外<ul>
<li>通行证个人账号</li>
<li>企业账号</li>
</ul>
</li>
<li>对内<ul>
<li>内部员工账号</li>
<li>外包人员账号</li>
</ul>
</li>
</ul>
<h3 id="账号属性的区别"><a href="#账号属性的区别" class="headerlink" title="账号属性的区别"></a>账号属性的区别</h3><ul>
<li>uid/userid 内部唯一id</li>
<li>account 用户所知的唯一标识</li>
<li>昵称 用户对外的展示名称</li>
</ul>
<h2 id="业务行为（领域行为）"><a href="#业务行为（领域行为）" class="headerlink" title="业务行为（领域行为）"></a>业务行为（领域行为）</h2><p>围绕账号有一系列服务，不过本质要解决的问题是认证、授权与会话。</p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>认证分为2个阶段，首先要创建一个账号，称作“注册”，要进行自然人与服务的映射认证绑定，然后使用这个账号完成认证叫做“登录”。</p>
<p>注册往往需要自然人的唯一性标识，注册认证成功后，用户就可以拿此账号进行登录完成登录认证</p>
<ul>
<li>也可以每次都使用自然人的真实信息认证，在认证的第一次自动完成注册环节。<ul>
<li>因为如果每次认证都使用真实信息会比较麻烦，要让用户输入过多信息，体验不好，所以采用第一种的比较多，比如一般账号都会设置一个密码，下次使用服务，只需要认证账户名+密码即可以完成。</li>
<li>不过现在由于手机验证码方式验证方便出现了登录也使用验证码进行登录的方式。</li>
</ul>
</li>
<li>有的服务为了用户体验，注册完成时就自动登录成功了。</li>
<li>注册时认证最好的信息是自然人中最具有唯一性的标识，比如国内的身份证，国外的驾驶证护照之类信息。而这些信息往往比较长，而且过于隐私，对于用户来说心里门槛高，所以往往可以通过用户的手机号或者邮箱进行认证完成注册认证。<ul>
<li>国内由于手机的普及倾向于使用手机号，而国外倾向于使用邮箱。</li>
<li>支付宝是强金融属性应用，使用身份证号进行注册</li>
<li>银行网银一般通过柜台认证的银行卡或者使用身份证号进行注册</li>
<li>手机号与邮箱都是可变更的，所以用这种方式容易导致用户注册多个账号的情况，为了避免可以在客户端记录上一次登录方式或者服务器记录设备信息对应的登录账号提醒用户</li>
<li>如果是注册or登录的流程，流程中可以在手机号验证后要注册新账号的时候提示用户是否注册或者要登录，这样登录后替换手机号码或者设置</li>
</ul>
</li>
</ul>
<p>认证中有个特别认证方式叫做第三方认证，本质是可信第三方授权+补充认证</p>
<ul>
<li>如果第三方授权后第三方提供的信息足以满足本系统注册要求可直接生成账号并登录</li>
<li>如果不满足一般会在第一次三方授权后要求补充账号认证或账号信息后才能完成注册</li>
</ul>
<h4 id="业务形态"><a href="#业务形态" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>认证前<ul>
<li>注册</li>
<li>登录</li>
<li>通过XXX找回密码</li>
<li>三方登录</li>
<li>完善账号信息</li>
<li>激活验证信息交互</li>
</ul>
</li>
<li>认证后<ul>
<li>修改登录信息</li>
<li>修改三方授权绑定</li>
<li>认证登录记录</li>
</ul>
</li>
</ul>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权在认证之后，如果使用一项服务都需要先进行授权，同时使用一个授权服务往往还需要显示一份使用服务法律协议需用户同意</p>
<ul>
<li>有些场景可以避免授权界面，比如使用一系列的服务时在注册或者登陆的协议中全部写入，即可免授权，不过这种在认证中绑定过多协议的做法可能是不合规的，尤其是金融行业，捆绑授权</li>
<li>比如工具服务中要使用一项P2P服务需要进行授权，支付宝中第一次使用花呗、借呗都需要单独授权同意后</li>
<li>还有一种对外授权，比如你的账号可以提供开放的能力，在其它平台中使用此账号可以登录认证并经过用户授权后把此账号的部分信息提供给第三方使用。</li>
</ul>
<p>对内部账号的授权都是通过权限管理员分配的，所以与前台用户交互流程不一样</p>
<ul>
<li>一般使用RBAC权限模型，即账号-角色-资源，把所有的CRUD操作设置为资源，然后一个角色包含多个资源，一个用户可以分配多个角色，角色相当于资源包的存在</li>
<li>超级管理员一般是不受权限限制的特例</li>
<li>资源的申请尽量自动化，所以一般使用工作流申请</li>
<li>有一种特殊的资源叫做菜单，从而菜单显示也通过权限来控制</li>
<li>资源的管理往往会增加应用这一级别用于隔离，为了同时操作多个资源每个应用会有资源包，而角色会作为跨资源包与资源的汇集方</li>
</ul>
<h4 id="业务形态-1"><a href="#业务形态-1" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>同意授权与协议</li>
<li>授权管理，协议查看</li>
</ul>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>会话是指用户从登录后用户持续使用服务一直到退出整个登录状态，与服务器中的session概念差不多，不过这里在登录后产生的</p>
<ul>
<li>为了保持登录认证状态持续，最简单的做法是用户在输入用户名密码后将用户名密码保存在cookie中，以后每次请求都去校验cookie中的信息</li>
<li>但是这样非常不安全，所以一般在登录认证成功后会生成一个令牌，放到cookie中，每次请求都去校验令牌</li>
<li>为了防止令牌因为意外泄露后的风险，会给令牌设置一个有效期，客户端APP的有效期会更短，而通过刷新令牌机制来换取令牌保持会话持续</li>
</ul>
<p>针对一些多应用或者跨域的情况会提供单点登录功能，即SSO</p>
<ul>
<li>用户在同企业的一个平台认证后，则其他平台会自动认证成功</li>
<li>如果退出，也会全部退出</li>
</ul>
<p>APP中的单点登录会有挤出登录的情况，会话类型会有多种</p>
<ul>
<li>会话排他型：如果在同一个APP中，如果2个人用同样的账号在不同设备上登录，则前一个账号会被强制退出，一般针对金融类APP</li>
<li>会话共享型：同一个账号可以同时在不同设备上登录成功，一般用于工具类APP</li>
</ul>
<h4 id="业务形态-2"><a href="#业务形态-2" class="headerlink" title="业务形态"></a>业务形态</h4><ul>
<li>登录成功后生成会话</li>
<li>退出</li>
<li>自动登录</li>
<li>刷新令牌</li>
</ul>
<h3 id="业务行为附带信息"><a href="#业务行为附带信息" class="headerlink" title="业务行为附带信息"></a>业务行为附带信息</h3><p>这种附带信息不止是用户中心，应该说对于所有业务行为都会有这些信息</p>
<ul>
<li>通过设备请求获取的信息：设备唯一号、请求IP地址</li>
<li>通过来源APP请求的信息：平台号、版本号、投放标识</li>
<li>身份识别信息：用户令牌（认证前为空）</li>
</ul>
<h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全分为通用技术安全与业务安全</p>
<p>通用技术安全</p>
<ul>
<li>CSRF攻击</li>
<li>cookie安全</li>
<li>XSS攻击</li>
</ul>
<p>业务安全：注册、登录、找回密码因为数据验证前操作，需要重点关注安全问题</p>
<ul>
<li>短信验证码、邮箱验证码攻击安全</li>
<li>多业务步骤安全</li>
</ul>
<h3 id="账号集成"><a href="#账号集成" class="headerlink" title="账号集成"></a>账号集成</h3><p>比如将2个公司账号系统进行整合集成打通的业务场景，这里暂不展开</p>
<h3 id="自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录"><a href="#自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录" class="headerlink" title="自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录"></a>自然人通过某种方式直接在服务媒介上识别YY：相当于一个第三方登录授权注册登录</h3><ul>
<li>PC通过信息传入识别<ul>
<li><del>PC上比如指纹识别需要从硬件-操作系统-浏览器打通，非常麻烦，而且还要在设备上绑定好用户信息</del></li>
<li><del>PC人脸识别操作系统是支持了，不过需要浏览器可以调用，且需要电脑配备摄像头，也比较麻烦</del></li>
</ul>
</li>
<li>PC通过信息传出识别<ul>
<li><del>通过文字、声音不是太方便</del></li>
<li>通过图片可以，比如通过二维码图片，然后通过手机设备扫描然后通过认证</li>
</ul>
</li>
<li>手机通过信息传入识别<ul>
<li>指纹，如指纹支付已经有了，估计登录也可以 注册的话需要本地设备设置个人信息 需要手机软件支持</li>
<li>通过PC或者某个非手机设备生产的二维码这里用摄像头对准后识别注册or登录</li>
<li>手机的话通过APP唤醒其他第三方授权注册登录 就是普通的三方登录</li>
<li>通过摄像头人脸识别 可以有 登录 但是不能注册 除非人脸库有你的信息</li>
<li>通过SIM卡信息或者网络基站获取本机手机号码进行注册，并通过手机号码获取实名信息</li>
</ul>
</li>
</ul>
<h1 id="用户中心技术"><a href="#用户中心技术" class="headerlink" title="用户中心技术"></a>用户中心技术</h1><p>技术主要集中在业务行为上</p>
<p>认证<br>认证技术：第三方Oauth2</p>
<p>授权<br>授权协议</p>
<p>会话<br>token技术：刷新令牌<br>SSO技术：CAS、前埋后埋</p>
<p>安全<br>客户端安全<br>token安全<br>密码安全</p>
<p>未完待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1504546211663&amp;amp;di=2abfeebbce6670f8442681cf19
    
    </summary>
    
      <category term="业务" scheme="https://dawell.github.io/categories/%E4%B8%9A%E5%8A%A1/"/>
    
    
      <category term="用户中心" scheme="https://dawell.github.io/tags/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
    
      <category term="账号" scheme="https://dawell.github.io/tags/%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Selenium爬虫</title>
    <link href="https://dawell.github.io/2017/07/22/20170722Selenium%E7%88%AC%E8%99%AB/"/>
    <id>https://dawell.github.io/2017/07/22/20170722Selenium爬虫/</id>
    <published>2017-07-22T15:30:00.000Z</published>
    <updated>2017-07-23T10:19:41.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫研究"><a href="#爬虫研究" class="headerlink" title="爬虫研究"></a>爬虫研究</h3><p>Selenium是一个浏览器自动化测试API，不过目前也可以作为爬虫使用<br>早在2013年的时候就在自动化测试中使用过Selenium，所以对他的API也算熟悉</p>
<p>不过目前Selenium针对浏览器的开发支持程度不一样，一般都需要插件进行辅助</p>
<ul>
<li>chrome 开发最佳</li>
<li>firefox 开发也不错</li>
<li>IE 没有xpath获取的插件，开发困难</li>
</ul>
<p>除了网站登录认证，其实用HttpClient直接请求就可以爬取数据<br>但是有时候这种方式并不直接，直接网站上的信息所见即所得，还能截图看个清楚</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;爬虫研究&quot;&gt;&lt;a href=&quot;#爬虫研究&quot; class=&quot;headerlink&quot; title=&quot;爬虫研究&quot;&gt;&lt;/a&gt;爬虫研究&lt;/h3&gt;&lt;p&gt;Selenium是一个浏览器自动化测试API，不过目前也可以作为爬虫使用&lt;br&gt;早在2013年的时候就在自动化测试中使用过S
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="爬虫" scheme="https://dawell.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>西塘乌镇一日游</title>
    <link href="https://dawell.github.io/2017/05/29/20170529%E8%A5%BF%E5%A1%98%E4%B9%8C%E9%95%87%E4%B8%80%E4%BA%BA%E6%B8%B8/"/>
    <id>https://dawell.github.io/2017/05/29/20170529西塘乌镇一人游/</id>
    <published>2017-05-29T15:30:00.000Z</published>
    <updated>2017-05-30T09:31:45.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>端午节一共3天，是在房价前一天晚上突然想到要去的，但是第一天假期的旅游票已经订不上了，所以定了第二天的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class=&quot;headerlink&quot; title=&quot;经历&quot;&gt;&lt;/a&gt;经历&lt;/h1&gt;&lt;p&gt;端午节一共3天，是在房价前一天晚上突然想到要去的，但是第一天假期的旅游票已经订不上了，所以定了第二天的&lt;/p&gt;

    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="旅游" scheme="https://dawell.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="西塘" scheme="https://dawell.github.io/tags/%E8%A5%BF%E5%A1%98/"/>
    
      <category term="乌镇" scheme="https://dawell.github.io/tags/%E4%B9%8C%E9%95%87/"/>
    
  </entry>
  
  <entry>
    <title>监控系统</title>
    <link href="https://dawell.github.io/2017/05/27/20170527%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://dawell.github.io/2017/05/27/20170527监控系统/</id>
    <published>2017-05-27T12:00:00.000Z</published>
    <updated>2017-05-27T09:32:25.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>记得14年的时候我在公司负责支付资金对账系统，整体逻辑类似定时跑批比对，如果数据对账成功要通知支付系统，如果发现差错账后要进行告警<br>由于整个系统在拉取数据时存在多种方式与各种不可靠情况，比如第三方的对账数据没有在约定时间内放置，数据拉取失败，数据放置错误。还有数据中各种长短账的情况处理，状态与异常情况比较多<br>由于那时候公司也没有监控系统，所以那时候为了方便排查问题，自己做了一个<br>不过现在看来那时候的监控手段还是比较挫的，不过当时不想天天因为排查问题而浪费一上午时间的我能做出这么一个东西也是很有意义的，哈哈</p>
<h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><p>为了不影响线上的对账程序，在后台上开发了这个功能，其实这也是现在监控系统设计的要素之一，就是绝对不能影响核心业务系统的运行<br>开发了一个页面，上面在页面加载的时候会去将各种异常与正常的情况通过SQL去查询数据库，然后将数据统计结果显示在页面上，因为是定时任务，所以为了方便修复数据，在每个统计点都提供了一个按钮可以重新调度定时任务执行一次<br>这个按钮就是一个数据修复的能力了，所以准确说这不止是个监控系统，还是个灰度控制系统<br>整个系统起名叫：上帝模式（当时同事听说这个名字后，都为之称赞~）<br>这个系统在初期帮了我很大的忙，每次排查问题，先看这个界面，上面数字对不上的我都会去确认，一个不漏，非常方便排查问题，而且如果排查完问题，就要重新对某个环节重新执行，只要点一下那个环节的按钮就可以了，so easy！<br>不过之后就发现这个页面要很久才能打开，因为上面执行了太多的SQL，而且越来越慢，这些SQL查询有些字段需要优化：限制时间范围、增加索引 于是又可以继续使用了</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>可以说这是一个简单的看板系统，就是通过SQL语句查询数据库，然后判断异常的数据显示而已，但是足够当时的检查数据的需求<br>真实的监控系统是可以告警，处理业务执行中的数据的，比如打点与异常的监视，不依赖业务方数据库存储的<br>所以真实的监控系统都是采用业务逻辑层主动发送监控数据到监控系统中的，而不是像我这种设计思路，通过扫描存储的数据来监控</p>
<ol>
<li>业务存储的数据只为了业务场景而优化查询，而监控可能是有多维度的需求，不适合在业务库中加索引优化</li>
<li>直接在业务库中查询也会影响真实业务使用，顶多查下从库</li>
<li>如果业务改变了表结构，监控的逻辑也要跟着改</li>
<li>业务数据中很多监控的数据不会存储，而监控需要的数据也只是业务字段的一部分<br>可能最重要的还是第4点，业务落地的数据并不能满足监控需要的数据，比如调用异常，不落地的数据，存储在redis缓存中的业务场景，所以监控系统还是不要基于业务表进行监控<br>基于表的数据分析其实是BI（数据智能）他们的方式，他们其实解决了前3个问题，通过大数据中的Hadoop、HDFS、Hbase、Hive、离线数据分析等技术通过ETL（抽取、过滤、清洗）把业务表变为BI表数据用于统计分析，毕竟落地的数据才是有价值的业务数据<br>而监控关注的是产生这些业务数据的过程，业务逻辑调用过程中的问题，所以要通过业务逻辑层植入监控的逻辑</li>
</ol>
<h1 id="监控系统"><a href="#监控系统" class="headerlink" title="监控系统"></a>监控系统</h1><p>现在监控通过业务监控指标日志打印、日志采集、消息系统、日志信息入库、日志加工分析存储这样的方式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class=&quot;headerlink&quot; title=&quot;经历&quot;&gt;&lt;/a&gt;经历&lt;/h1&gt;&lt;p&gt;记得14年的时候我在公司负责支付资金对账系统，整体逻辑类似定时跑批比对，如果数据对账成功要通知支付系统，如果发现差错账后要进行告警&lt;br&gt;由
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="监控" scheme="https://dawell.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Sonarlint插件</title>
    <link href="https://dawell.github.io/2017/05/23/20170523Sonarlint%E6%8F%92%E4%BB%B6/"/>
    <id>https://dawell.github.io/2017/05/23/20170523Sonarlint插件/</id>
    <published>2017-05-23T13:30:00.000Z</published>
    <updated>2017-05-25T09:01:45.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>sonar与idea集成的相关步骤：</p>
<ol>
<li><p>安装插件<br>idea–plugns中查找sonarLint插件，并安装；安装完成后，重启idea；<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffxpq8n40dj20at047glk.jpg" alt="image"></p>
</li>
<li><p>配置sonarlint插件<br>第一次添加时，需要到General中配置使用的sonar平台地址，一般是公司内部搭建的地址<br><img src="http://wx4.sinaimg.cn/mw690/712a7015gy1ffxpq9bjadj20rr0fk3zv.jpg" alt="image"><br>配置项目信息，在上面那个环节时，下面有个“UPdate bingding”，必须要点击下；看解释就很清楚了。从服务器获取项目列表、规则、配置等；必须在选择项目前完成这事儿。<br><img src="http://wx1.sinaimg.cn/mw690/712a7015gy1ffxpq9xwpuj20id028web.jpg" alt="image"></p>
</li>
<li><p>配置项目：<br>选择你们的项目<br>如果项目，要在SonarQube在配置下你们的项目，导入checkstyle、pmd、findbugs的配置，或者用默认的<br><img src="http://wx4.sinaimg.cn/mw690/712a7015gy1ffxpqafpqvj20s00h50tq.jpg" alt="image"></p>
</li>
<li><p>使用插件<br>配置完成后，在当前项目环境下，idea的左下角就可以看到sonar扩展了，注意选Project files后选择scope<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffxpqaxrguj20n009bmxm.jpg" alt="image"></p>
</li>
</ol>
<p>至此，idea与sonar插件集成完毕</p>
<h2 id="插件拉去项目列表时报错"><a href="#插件拉去项目列表时报错" class="headerlink" title="插件拉去项目列表时报错"></a>插件拉去项目列表时报错</h2><p>不过使用起来遇到一个问题，如果SonarQube的子项目比较多时，插件拉去项目的api会超时timeout，导致无法使用<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue2o52c4j20hd03r74d.jpg" alt="img"><br>解决：<br>问题就是<code>http://xxx:9000/api/projects/index?format=json&amp;subprojects=true</code>这个URL请求时timeout，如果浏览器请求会报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;err_code&quot;:500,&quot;err_msg&quot;:&quot;ActiveRecord::JDBCError: Can not read response from server. Expected to read 255 bytes, read 0 bytes before connection was unexpectedly lost.: SELECT id,uuid,kee,name,language,long_name,scope,qualifier,root_uuid,project_uuid FROM `projects` WHERE (enabled=1 AND scope in (&apos;PRJ&apos;) AND qualifier in (&apos;TRK&apos;,&apos;BRC&apos;))  ORDER BY name&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>问题SQL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">uuid</span>,kee,<span class="keyword">name</span>,<span class="keyword">language</span>,long_name,<span class="keyword">scope</span>,qualifier,root_uuid,project_uuid</div><div class="line"><span class="keyword">FROM</span> <span class="string">`projects`</span></div><div class="line"><span class="keyword">WHERE</span> (enabled=<span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">scope</span> <span class="keyword">in</span> (<span class="string">'PRJ'</span>) <span class="keyword">AND</span> qualifier <span class="keyword">in</span> (<span class="string">'TRK'</span>,<span class="string">'BRC'</span>))</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></div></pre></td></tr></table></figure></p>
<p>实际测试发现：问题出在order by name上，如果只使用order by，执行就会慢到没结果甚至报<code>[Err] 2000 - Unknown MySQL error</code>错误，之后看表结构发现问题<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`name` varchar(2000) COLLATE utf8_bin DEFAULT NULL,</div></pre></td></tr></table></figure></p>
<p>name这个字段竟然有2000的长度，然后看数据库实际数据长度没有超过160的，所以修改为300，查询就非常快了，问题解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;sonar与idea集成的相关步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装插件&lt;br&gt;idea–plugns中查找sonarLint插件，并
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="质量" scheme="https://dawell.github.io/tags/%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>静态代码扫描工具</title>
    <link href="https://dawell.github.io/2017/05/22/20170522%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://dawell.github.io/2017/05/22/20170522静态代码扫描工具/</id>
    <published>2017-05-22T13:57:00.000Z</published>
    <updated>2017-05-25T08:32:23.139Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffuejerhtrj20xc0i0wgr.jpg" alt="img"></p>
<p>优秀的团队为了保证可读性、可维护性、避免重复踩坑与保证代码质量，都会推出一些开发规范来遵守。<br>开发规范是前置主动要求团队成员遵守的，而光靠意识是难以保证完全遵守规范的，所以还需要一些工具辅助。<br>当然即使有工具做这些事情，规范也是必须推广的，让大家先仔细读读，毕竟直接写出优秀的代码是最好的，然后再辅助工具乃最佳实践。</p>
<h1 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h1><p>一流公司制定规范，二流公司申请专利，三流公司生产产品。<br>所以目前公开规范的大多是大厂的规范。</p>
<p>目前知道大厂公开的Java开发规范</p>
<ul>
<li>Google开发规范 github markdown格式 <a href="http://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">点我查看</a></li>
<li>阿里巴巴开发规范 PDF格式 <a href="https://yq.aliyun.com/articles/69327" target="_blank" rel="external">点我查看最新版</a></li>
<li>华为开发规范</li>
<li>Oracle开发规范</li>
</ul>
<p>阿里巴巴的开发规范，虽然不是单纯的规范，还包括了开发中的各种坑从主观上的一些强制规定，但是总体上还是很有用的，可以拿来部分or全部直接执行。</p>
<h1 id="独立的组件"><a href="#独立的组件" class="headerlink" title="独立的组件"></a>独立的组件</h1><h2 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h2><p>只寻找可能存在bug的地方，不注重样式或者格式，它试图只寻找真正的缺陷或者潜在的性能问题。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>基于class分析，如果你clean了再去执行发现没有执行生成报告，所以需要编译后才能执行分析</li>
<li>有maven插件，有IDE插件（eclipse插件，也有idea插件）</li>
<li>开发时不用使用maven插件，要编译执行检测生成xml然后再生成网页查看结果，挺麻烦。如果要与Jenkins集成的时候，maven插件就有用了，<a href="http://www.tuicool.com/articles/QB7nqqF" target="_blank" rel="external">集成方式点我</a></li>
<li>开发时使用IDE插件非常方便</li>
<li>插件中Bug Explorer 中的灰色图标处为 Bug 类型，红色图标表示 bug 较为严重，黄色的图标表示 bug 为警告程度</li>
</ul>
<h3 id="代码缺陷分类"><a href="#代码缺陷分类" class="headerlink" title="代码缺陷分类"></a>代码缺陷分类</h3><p>根据缺陷的性质，大致可以分为下列几类</p>
<ul>
<li>Bad practice  不好的做法</li>
<li>Correctness   可能有不正确</li>
<li>Dodgy code     糟糕的代码</li>
<li>Experimental  实验</li>
<li>Internationalization  国际化</li>
<li>Malicious code vulnerility 恶意的代码漏洞</li>
<li>Multithreaded correctness 多线程问题</li>
<li>Performance  性能问题</li>
</ul>
<p>FindBugs官方网站上也给出了一些案例：<a href="http://findbugs.sourceforge.net/bugDescriptions.html" target="_blank" rel="external">案例点我</a></p>
<h3 id="缺陷列表"><a href="#缺陷列表" class="headerlink" title="缺陷列表"></a>缺陷列表</h3><p><a href="">缺陷列表</a></p>
<h3 id="排除单个规则"><a href="#排除单个规则" class="headerlink" title="排除单个规则"></a>排除单个规则</h3><p>如果是排除一类规则，点击IDE旁边的提示选择排除类型就行</p>
<p>可以针对规则排除单独类中的接触限制，使用注解<code>@edu.umd.cs.findbugs.annotations.SuppressFBWarnings</code><br>要加入依赖  provided代表只在编译时依赖，打包后就没有这个依赖了<br>IDE旁边提示也有这种，不过不会加入以下依赖，需要手动在POM中加入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr305<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a>CheckStyle</h2><p>代码样式风格检查，专门check代码规范风格的，比如缩进，换行操作，命名<br>大项目往往是有很多人一起完成的，然而每个人都有自己的style，导致整个项目的代码不仅存在不符合语言规范的情况，而且读起来非常困难。因此，这样的项目中都会引入Checkstyle，来规范大家的编码风格，尽量做到统一和合理。<br>所以使用checkStyle检查到问题</p>
<p>官方文档：<a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">http://checkstyle.sourceforge.net/checks.html</a></p>
<h3 id="工具界面"><a href="#工具界面" class="headerlink" title="工具界面"></a>工具界面</h3><p>插件<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2cdu0qj20fa06aq3l.jpg" alt="img"></p>
<p>单个文件check<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2fumooj20eq0d3jt3.jpg" alt="img"></p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>基于源码，无需编译</li>
<li>有maven插件，与IDE插件（eclipse插件，也有idea插件）。<a href="http://checkstyle.sourceforge.net/idea.html" target="_blank" rel="external">idea的一些细节配置</a></li>
<li>可以自定义规则</li>
<li>CheckStyle底层基于antlr对源码进行处理</li>
<li>可以配置哪些文件不检查</li>
</ul>
<h3 id="规范配置"><a href="#规范配置" class="headerlink" title="规范配置"></a>规范配置</h3><p>配置位置<br><img src="http://wx3.sinaimg.cn/mw690/712a7015gy1ffue2ixrz0j20su0jhmxs.jpg" alt="img"></p>
<ul>
<li>sun_checks.xml 默认自带sun公司的开发规范，有点严格</li>
<li>google_checks.xml 下载下来好像有点问题，可能与版本有关 <a href="http://checkstyle.sourceforge.net/google_style.html" target="_blank" rel="external">查看</a></li>
<li>华为的规范 很多公司都会用华为的规范改改</li>
<li>自定义的规范 比较了解配置规则的情况下配置</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>我们在代码写完之后，还要花时间去手动解决Checkstyle提示的问题，这是一个非常无聊和耗时的工作。<br>其实很多问题使用IDE的格式化已经能解决一部分，所以最好能提供一个IDE的formatter配置，整个团队都用这个配置导入IDE，这样用用快捷键就能解决一些问题，非常easy。</p>
<h2 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a>PMD</h2><p>与findbug类似找bug用，还有规范，比如说注释不全</p>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>有maven插件，与IDE插件（eclipse插件，也有idea插件）</li>
<li>增强代码质量和修改代码的功能</li>
</ul>
<h3 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h3><ul>
<li>可能的bug——空的try/catch/finally/switch块。</li>
<li>无用代码(Dead code)：无用的本地变量，方法参数和私有方法。</li>
<li>空的if/while语句。</li>
<li>过度复杂的表达式——不必要的if语句，本来可以用while循环但是却用了for循环。</li>
<li>可优化的代码：浪费性能的String/StringBuffer的使用。</li>
</ul>
<h1 id="集合组件"><a href="#集合组件" class="headerlink" title="集合组件"></a>集合组件</h1><h2 id="IdeaIDE的QAPlug"><a href="#IdeaIDE的QAPlug" class="headerlink" title="IdeaIDE的QAPlug"></a>IdeaIDE的QAPlug</h2><p>这个插件是汇集这前面说的3个插件的结果，不用每次都运行3个插件分别排错，1键运行3个同时汇总整合，非常方便，所以其他的不用装了，就用这个就行了！<br>与sonar平台的功能类似！<br>如果公司没有搭建sonarqube平台的话，本地使用这个最佳</p>
<h3 id="插件下载安装"><a href="#插件下载安装" class="headerlink" title="插件下载安装"></a>插件下载安装</h3><p>依次下载 QAPlug、QAPlug-Checkstyle、QAPlug-FindBugs、QAPlug-PMD<br><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue2lstwvj20b706rdfv.jpg" alt="img"></p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>这个插件会把3个插件的错误分类汇总</p>
<ul>
<li>Efficiency 效能</li>
<li>Maintainability 可维护性</li>
<li>Reliability 可靠性</li>
<li>Usability 可用性</li>
</ul>
<h2 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h2><p>代码质量管理系统<br>相当于QAPlug的工程独立出一个服务器部署，可以配置规则，扫描代码，集成了很多静态扫描工具<br>2015年3月的时候就看到一篇文章介绍这个平台了，那时候还没有太过关注，后来发现这个是个很好的平台</p>
<h3 id="Sonarlint"><a href="#Sonarlint" class="headerlink" title="Sonarlint"></a>Sonarlint</h3><p>是SonarQube的配套的IDE插件，配置远程服务器的地址,选取要拉去规则的项目，然后本地就可以执行校验了，用的远程的规则<br>这样还是很方便的，规则可以同一在SonarQube维护，不用每个人本地导入，团队的话用这个最适合</p>
<p>Sonarlint安装与拉取列表失败问题解决见 <a href="/2017/05/23/20170523Sonarlint插件/" title="Sonarlint插件">Sonarlint插件</a></p>
<h3 id="扩充-Lint概念"><a href="#扩充-Lint概念" class="headerlink" title="扩充-Lint概念"></a>扩充-Lint概念</h3><p>Sonarlint是一个Lint工具，其实Lint的含义就代表代码静态分析的工具，协助开发的工具，尤其是前端经常使用，比如插件eslint：检查JavaScript错误非常方便</p>
<h2 id="JArchitect"><a href="#JArchitect" class="headerlink" title="JArchitect"></a>JArchitect</h2><p>多种分析工具的聚合工具<br>是一个商业性的收费的分析工具<br>可以汇聚checkstyle、findbugs、pmd的xml，然后分类总结生成图表<br>不过是收费的，也没有idea插件，不用</p>
<h1 id="代码覆盖率工具"><a href="#代码覆盖率工具" class="headerlink" title="代码覆盖率工具"></a>代码覆盖率工具</h1><p>idea自带了代码覆盖率插件还不错<br>跑单元测试的时候以代码覆盖率的方式运行就行了<br>一般逻辑覆盖率60%就差不多了，核心模块80%覆盖标准即可</p>
<h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><p><img src="http://wx2.sinaimg.cn/mw690/712a7015gy1ffue9vkviqj208r0jumxx.jpg" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先要从意识上要遵守规范，风格统一，需要制定一份Java开发规范，我比较倾向于直接使用阿里的Java规范吧，简单实用，也不过分严格<br>其次要选择静态代码工具，没有SonarQube的话用QAPlug是很好的选择，有的话装个Sonarlint插件就可以了<br>代码覆盖率通过idea自带的即可</p>
<p>有些人可能很排斥规范，总感觉条条框框太多，不符合自己的自由风格，但是软件不是开发完上线就结束的过程，而是需要持续迭代维护升级的过程，新人会接手，要有可读性可维护性。项目大了，人多了也是需要规范化才能更好的融合协作，让混乱变得有序<br>一个人的优秀靠的是经验，一个团队的优秀靠的是规范。<br>有了这些规范与工具，就可以大大的提高团队的整体素质与水平，尤其是大厂开发人员，这个是必须有的。</p>
<p>Best Wishes!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/712a7015gy1ffuejerhtrj20xc0i0wgr.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;优秀的团队为了保证可读性、可维护性、避免重复踩坑与保证代码质量，都会推出一些开发规范来
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="质量" scheme="https://dawell.github.io/tags/%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>博客评论插件</title>
    <link href="https://dawell.github.io/2017/05/21/20170521%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://dawell.github.io/2017/05/21/20170521博客评论插件/</id>
    <published>2017-05-21T13:00:00.000Z</published>
    <updated>2017-05-25T08:33:49.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h1><p>目前知道的评论插件系统</p>
<ul>
<li>多说</li>
<li>友言</li>
<li>网易云跟帖</li>
<li>disqus</li>
<li>畅言</li>
</ul>
<h2 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h2><p>以前一直用多说，不过2017年6月1日开始将不再维护，所以只能弃用之</p>
<h2 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h2><p>尝试了下，一开始网上说不支持https，所以哥有申请了个域名换成了http，结果发现还是不行，最后才发现官网的示例程序都不能跑了，都是一个错误：502，所以弃用！</p>
<h2 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h2><p>目前就是用的这个，功能还算可以满足，不过不支持子域名，所以过去挂在github.io上的子域名注册的时候会提示“站点url存在”，所以需要单独申请个域名挂上</p>
<p>新版的next主体已经支持网易云跟帖，主要更新新版后只要加一个配置即可使用。</p>
<h2 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h2><p>我看网上很多人在弃用多说后都是选择的这个，不过不用翻墙vpn，我官网都无法访问，无比尴尬，所以国内无法使用，弃用！</p>
<h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><p>搜狐的，不过未备案的网站只能用15天，弃用！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前能选择的只有 网易云跟帖了 ，后续完善教程，如何配置网易云跟帖。</p>
<h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul>
<li><a href="https://www.zhihu.com/question/57426274" target="_blank" rel="external">https://www.zhihu.com/question/57426274</a></li>
<li><a href="https://blog.shuiba.co/comment-systems-recommendation#toc_2" target="_blank" rel="external">https://blog.shuiba.co/comment-systems-recommendation#toc_2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;评论插件&quot;&gt;&lt;a href=&quot;#评论插件&quot; class=&quot;headerlink&quot; title=&quot;评论插件&quot;&gt;&lt;/a&gt;评论插件&lt;/h1&gt;&lt;p&gt;目前知道的评论插件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多说&lt;/li&gt;
&lt;li&gt;友言&lt;/li&gt;
&lt;li&gt;网易云跟帖&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="博客" scheme="https://dawell.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客插件" scheme="https://dawell.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%8F%92%E4%BB%B6/"/>
    
      <category term="评论" scheme="https://dawell.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>日志采集</title>
    <link href="https://dawell.github.io/2017/01/04/20170104%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/"/>
    <id>https://dawell.github.io/2017/01/04/20170104日志采集/</id>
    <published>2017-01-03T16:00:00.000Z</published>
    <updated>2017-09-16T03:17:25.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志采集"><a href="#日志采集" class="headerlink" title="日志采集"></a>日志采集</h2><p>日志是线上服务的刚需，用于排查问题分析数据，特点是写入量大、允许一定丢失、断网也要可以写入（比如写入一些网络异常日志）<br>所以日志一般是写到本地磁盘中，写入时为了减少IO，一般都是先缓存一个内存桶中，比如每积累100k写入一次磁盘<br>如果是在单机上，一般的日志框架已经足够使用，用于常用的linux命令查找日志问题足以<br>但是分布式服务环境下，因为机器较多，不可能登录到每台机器上去查找问题，尤其是那种同一个用户操作，要根据uid查找行为链路的时候<br>可能有人会想配置同一个用户操作路由规则总是落到一台机器上是不是可以解决<br>但是这带来了3个问题：单机故障后这个用户所有操作都挂了、横向扩展后用户的日志就可能又路由到另一台机器了、不是所有的方法都有uid参数，路由维度可能有多个：设备id、ip、uid等<br>所以这只会把问题搞复杂。<br>更简单的方式是还是保持原有负载均衡路由与本地日志的策略，通过一个日志采集程序到统一日志管理平台<br>然后通过统一的日志查询平台查询所有机器日志，这样还附带了很多好处，比如日志归档，本地日志可以保留更短时间<br>隔离程序员登录大命令的时间，直接可视化操作，筛选统计更方便，同时还能有权限控制，图表等功能扩展<br>所以这就是日志采集一整套东西，现在互联网流行的一套叫做ELK</p>
<h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><p>ELK(Kibana)</p>
<p>Kibana不好的地方在于日志查询不能像grep那样查看上下多行信息，也就是上下文信息，不过最新的版本好像有这个功能了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日志采集&quot;&gt;&lt;a href=&quot;#日志采集&quot; class=&quot;headerlink&quot; title=&quot;日志采集&quot;&gt;&lt;/a&gt;日志采集&lt;/h2&gt;&lt;p&gt;日志是线上服务的刚需，用于排查问题分析数据，特点是写入量大、允许一定丢失、断网也要可以写入（比如写入一些网络异常日志）&lt;br
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="日志" scheme="https://dawell.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Java内存分析工具</title>
    <link href="https://dawell.github.io/2017/01/03/20170103Java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>https://dawell.github.io/2017/01/03/20170103Java内存分析工具/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-09-16T02:47:58.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h2><p>每次遇到内存消耗过快或者GC回收频繁的时候往往需要heapdump下，分析下内存堆数据，一般需要一些工具作为辅助<br>这里罗列下我常用的分析工具吧</p>
<h3 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h3><p>MAT(Memory Analyzer Tool) 是基于heap dumps来进行分析的，它的分析速度比jhat快，分析结果是图形界面显示，比java内置jhat的可读性更高</p>
<h4 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h4><p>打开Eclipse - &gt;help - &gt; Eclipse Marketplace 进行安装<br>安装完成后提示重启Eclipse，重启后打开window - &gt; open perspective，看到Memory Analysis证明安装成功。<br>然后通过MAT打开dump文件即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java内存分析&quot;&gt;&lt;a href=&quot;#Java内存分析&quot; class=&quot;headerlink&quot; title=&quot;Java内存分析&quot;&gt;&lt;/a&gt;Java内存分析&lt;/h2&gt;&lt;p&gt;每次遇到内存消耗过快或者GC回收频繁的时候往往需要heapdump下，分析下内存堆数据，一般
    
    </summary>
    
      <category term="技术" scheme="https://dawell.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://dawell.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>人的未来，我的人生观</title>
    <link href="https://dawell.github.io/2017/01/02/20170102%E4%BA%BA%E7%9A%84%E6%9C%AA%E6%9D%A5%EF%BC%8C%E6%88%91%E7%9A%84%E4%BA%BA%E7%94%9F%E8%A7%82/"/>
    <id>https://dawell.github.io/2017/01/02/20170102人的未来，我的人生观/</id>
    <published>2017-01-01T16:00:00.000Z</published>
    <updated>2017-06-25T05:43:14.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人的未来，我的价值观"><a href="#人的未来，我的价值观" class="headerlink" title="人的未来，我的价值观"></a>人的未来，我的价值观</h2><p>偶尔看到了一些机器人发展的新闻，这块日本玩的最6，说造出了美女机器人，使用最好的皮肤，可以模拟人说话，微笑等等</p>
<p>其实我对日本一直想造出真实模拟人类的机器一直保持不看好的态度<br>因为人与机器其实差异还挺大的，人是生物，机器是非生物，他们的工作原理不同，人注定要进行吃喝拉撒睡的过程，而机器不需要<br>如果想让机器完全变为人，那就要有人类的一切功能，包括生理的<br>就算用上了机器学习给机器一个与人类工作原理一样的大脑，那也没必要给机器配置上吃喝拉撒睡的功能，因为对于机器来说是多余的，他们可以去掉这些功能也可以正常运作，这些功能对他们没有任何意义，有的只是看上去更像人类罢了<br>机器应该有机器特别的地方，他应该做人类做不到的事情，而不是做人可以做的事情，这才是一个好的方向<br>所以机器发展最终肯定不是模拟人操作的方式，不要认为人就是上帝创造最好的设计，我们用机器堆出一个自己完全没什么软用</p>
<p>我倒是觉得超人总动员中微型机器人黑科技肯定是最终形态，这种完全突破人肉身的限制随意组合的小东西可以做任何事情<br>所以材料与设计问题是要解决的问题</p>
<p>未来的人类肯定与机器各有所长，机器有了人工智能AI也会很聪明，人类受大脑与身体的限制肯定达不到AI的进化程度，到最后人类肯定要依靠机器来进化<br>我觉得人类可能先做出机器人工智能的外设，然后外设效率不如直接大脑联通，所以给大脑植入芯片，最后人类身体逐渐老化，为了意识存留，肯定会将意识上传机器中，人工智能AI去尝试改造基因组，通过制造更聪明的生物来进行辅助进化，最后生物与非生物的结合体组合为主宰IA的载体，意识可以下载到人造载体中，形成真正的“互联网”<br>最终机器与人造生物就是人类的载体，意识与思想才能代表人类，最终的人类也许就没有了吃喝拉撒睡，七情六欲的问题，只会发展科技，但是为了保留人类的情感，肯定会有一个模拟系统来体验过去的人类功能<br>一切就和黑客帝国那样，一些都是为了让你体验而已</p>
<p>也许这个世界就是假的，人类早就发展到了终点，看到了宇宙的谎言，目前的世界只是一个体验系统，等你死后你的意识流就会回归主宰AI，想知道这个世界的一切都在那里。<br>所以我的三观上就认为反正都是假的，人的一生就是要开心嘛，有身体的时候就要让身体愉悦，吃喝拉撒睡，挣钱来更好的体验这原始的人类生活<br>而且最好要丰富的人生经历，好好体验一把，不要干一辈子一样的事情，因为那就浪费了作为原始人类的机会</p>
<p>一切都是为了可以享受生活，不害怕死亡，只是不想遗憾的死去~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人的未来，我的价值观&quot;&gt;&lt;a href=&quot;#人的未来，我的价值观&quot; class=&quot;headerlink&quot; title=&quot;人的未来，我的价值观&quot;&gt;&lt;/a&gt;人的未来，我的价值观&lt;/h2&gt;&lt;p&gt;偶尔看到了一些机器人发展的新闻，这块日本玩的最6，说造出了美女机器人，使用最
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>利率研究</title>
    <link href="https://dawell.github.io/2017/01/01/20170101%E5%88%A9%E7%8E%87%E7%A0%94%E7%A9%B6/"/>
    <id>https://dawell.github.io/2017/01/01/20170101利率研究/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-09-19T06:25:43.602Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1505812122703&amp;di=3fff343ca16b098b573a986fc8d95ed8&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D2258621863%2C1130501876%26fm%3D214%26gp%3D0.jpg" alt=""></p>
<h2 id="花呗分期的真实利率"><a href="#花呗分期的真实利率" class="headerlink" title="花呗分期的真实利率"></a>花呗分期的真实利率</h2><p>为了方便看利率，先统一时间，都换算为年化利率</p>
<h3 id="花呗分期"><a href="#花呗分期" class="headerlink" title="花呗分期"></a>花呗分期</h3><p>花呗分期可以申请3、6、9、12个月的分期还款，费率分别为2.5%，4.5%，6.5%，8.8%，如果直接换算年化为10%，9%，8.67%,8.8%<br>注意这里是费率，并非利率，因为分期每月都会还款，但是按总费率平均每月还的钱不会变化，与实际银行的利率规则不同</p>
<h3 id="银行利率"><a href="#银行利率" class="headerlink" title="银行利率"></a>银行利率</h3><p>银行利率是按照剩余本金计算的，每月还款后会递减。而这里相当于利息一直按贷款最开始的总额计算，利息每月不变了，这样相当于交的利息更多了，一般这种算法比普通的算法大约高出3/2的手续费<br>如果大约计算实际年化利率为15%，13.5%，13.17%，13.2%，这个才算是花呗实际收益利率数据，可以看到花呗的分期还款利率很高，还是非常不划算的。</p>
<h3 id="借呗利率"><a href="#借呗利率" class="headerlink" title="借呗利率"></a>借呗利率</h3><p>借呗的贷款利率与银行一致，有些人的借呗利率是万四，那年化0.0004*365=14.6%，利率也是比较高的<br>借呗我个人之前利率是每日万三，也就是年化10.95%的利率，目前是万2.5，相当于年化9.125%，0.75分利息，1w块钱1年2块5利息</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以看以看出，如果买商品，分期要支付很多利息，而如果自己的借呗日利率低于万4，那使用借呗先借出来分期还款花呗要比直接花呗分期要划算<br>总体来说借呗借的钱可以随便使用，而且利率相对其他网络平台算低的，实时到账，还是非常不错的产品。</p>
<h2 id="P2P平台的利率"><a href="#P2P平台的利率" class="headerlink" title="P2P平台的利率"></a>P2P平台的利率</h2><p>现在有很多P2P网贷平台，也许今年国家要像去年P2P理财平台一样开始整治，不过还没有开始<br>国家的套路一向是先撒网再收网，先让你自由发展，睁一只眼闭一只眼，大批创业公司诞生，然后出个政策，最后只留下100来家同类平台<br>既然国家还没有整治，具体要求还没有下来，那必然这些P2P网贷平台的会有一些猫腻，尤其是利息计算方式</p>
<h3 id="“费率”并非“利率”"><a href="#“费率”并非“利率”" class="headerlink" title="“费率”并非“利率”"></a>“费率”并非“利率”</h3><p>比如现在很多平台并不直接使用“利率”提示用户该还多少利息，而是通过“费率”<br>费率也就是手续费，为啥不叫利率呢，因为利率其实应该与银行利率概念一样，按照每月本金计算，还款也应该是银行借款等额本金、等额本息的分期还款方式<br>但是有些P2P平台依然是让用户选择分期，但是每月还的利息却不是按照剩余本金计算的，要按照贷款时的“费率”算好然后每月还相同的利息，这就相当于每月还款的利息要按照最初借款的总金额计算，每月都还第一个月最大金额的利息</p>
<p>比如一些平台费率都标注到1%，也就是说一年看上去应该就是12%的利率了，但实际上换算为银行的还款利率（大致3/2）就已经20%多了<br>举个实际例子，1w元1年，年化12%，银行利息一年实际只有661.85元，而用这个平台看上去年化12%实际利息要1200元，实际利率达到21.5%了</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>目前来说我知道的蚂蚁借呗、小米贷款、微信的微粒贷应该都是按照银行贷款利率计算的，还算良心<br>但是很多P2P贷款的利率就不好说了，所以借钱的话，费率一定看清楚是如何计算的，可以用房贷计算器之类的算算实际利率是多少</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1505812122703&amp;amp;di=3fff343ca16b098b573a986fc8
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Dawell的博客</title>
    <link href="https://dawell.github.io/2016/12/11/20161211%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://dawell.github.io/2016/12/11/20161211我的博客/</id>
    <published>2016-12-11T07:17:39.000Z</published>
    <updated>2017-05-25T08:31:21.331Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/mw690/712a7015jw1famyj9sbqfj21hc0u0n2u.jpg" alt="img"></p>
<p>网名Dawell，第一个公开的博客站点，分享自己的观点与学到的技术！</p>
<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><ul>
<li>Java架构师</li>
<li>喜欢编程、动漫、游戏</li>
<li>就职于一家大型互联网金融公司</li>
</ul>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul>
<li>过去记录笔记都在本地使用OneNote记录，有很多知识经验不如拿出来分享下，网络公开可以促使自己更加Open。</li>
<li>为了达成每日学习2小时的目标，每周写一篇博文总结，更好的消化知识，督促自己学习。</li>
<li>可以结交更多志同道合的人</li>
</ul>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul>
<li>技术博文每周1篇</li>
<li>专题总结每月1篇</li>
<li>非技术博文每年?篇</li>
</ul>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul>
<li>2016年12月各种环境准备</li>
<li>2017年1月正式开始</li>
</ul>
<p>Best Wishes!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/712a7015jw1famyj9sbqfj21hc0u0n2u.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;网名Dawell，第一个公开的博客站点，分享自己的观点与学到的技术！&lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="个人" scheme="https://dawell.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="杂谈" scheme="https://dawell.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
